{"ast":null,"code":"import axios from 'axios';\nimport jwtDeCoder from 'jwt-decode';\nimport { all, fork, takeLatest, takeEvery, put, delay, call } from 'redux-saga/effects';\nimport { JOIN_REQUEST, JOIN_SUCCESS, JOIN_FAILURE, LOGIN_REQUEST, LOGIN_SUCCESS, LOGIN_FAILURE, LOAD_USER_REQUEST, LOAD_USER_SUCCESS, LOAD_USER_FAILURE, LOGOUT_REQUEST, LOGOUT_SUCCESS, LOGOUT_FAILURE } from '../reducers/auth';\nimport { latest } from 'immer/dist/internal'; //유저정보 유지 사이클 \n//------------------------------------------------------------------------\n\nfunction APILoadUser() {\n  return axios.get('/auth/', {\n    withCredentials: true\n  });\n}\n\nfunction* sagaLoadUser() {\n  try {\n    const result = yield call(APILoadUser);\n    yield put({\n      type: LOAD_USER_SUCCESS,\n      data: result.data.nick\n    });\n  } catch (e) {\n    console.error('LOAD_USER_FAILURE=>', e);\n    yield put({\n      type: LOAD_USER_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadUser() {\n  yield takeEvery(LOAD_USER_REQUEST, sagaLoadUser);\n} //------------------------------------------------------------------------\n//회원가입 사이클 \n//------------------------------------------------------------------------\n\n\nfunction APIJoin(data) {\n  console.log('data==>', data);\n  return axios.post('/auth/join', {\n    data\n  }, {\n    withCredentials: true\n  });\n}\n\nfunction* sagaJoin(action) {\n  try {\n    console.log(action, action.data);\n    const result = yield call(APIJoin, action.data);\n    yield put({\n      type: JOIN_SUCCESS,\n      data: result\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: JOIN_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchJoin() {\n  yield takeLatest(JOIN_REQUEST, sagaJoin);\n} //------------------------------------------------------------------------\n//로그아웃 사이클\n//------------------------------------------------------------------------\n\n\nfunction APILogOut(data) {\n  //jwt 로그인\n  return axios.get('/auth/logOut', {\n    withCredentials: true\n  }); //passport local 로그인\n  //return axios.post('/auth/login',data,{withCredentials:true});\n}\n\nfunction* sagaLogOut() {\n  try {\n    const result = yield call(APILogOut);\n    yield put({\n      type: LOGOUT_SUCCESS\n    });\n  } catch (e) {\n    alert('로그아웃 에러');\n    yield put({\n      type: LOGOUT_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(LOGOUT_REQUEST, sagaLogOut);\n} //------------------------------------------------------------------------\n//로그인 사이클\n//------------------------------------------------------------------------\n\n\nfunction APILogin(data) {\n  //jwt 로그인\n  return axios.post('/auth/login', {\n    data\n  }, {\n    withCredentials: true\n  }); //passport local 로그인\n  //return axios.post('/auth/login',data,{withCredentials:true});\n}\n\nfunction* sagaLogin(action) {\n  try {\n    const result = yield call(APILogin, action.data);\n    console.log('result', result.data.token);\n    const decoded = jwtDeCoder(result.data.token);\n    yield put({\n      type: LOGIN_SUCCESS,\n      data: decoded.nick\n    });\n  } catch (e) {\n    alert('로그인 에러');\n    yield put({\n      type: LOGIN_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLogin() {\n  yield takeEvery(LOGIN_REQUEST, sagaLogin);\n} //------------------------------------------------------------------------\n\n\nexport default function* authSag() {\n  yield all([fork(watchJoin), fork(watchLogin), fork(watchLoadUser), fork(watchLogOut)]);\n}","map":{"version":3,"sources":["C:/git Repository/PersonalProject_001/frontend/sagas/authSaga.js"],"names":["axios","jwtDeCoder","all","fork","takeLatest","takeEvery","put","delay","call","JOIN_REQUEST","JOIN_SUCCESS","JOIN_FAILURE","LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_FAILURE","LOAD_USER_REQUEST","LOAD_USER_SUCCESS","LOAD_USER_FAILURE","LOGOUT_REQUEST","LOGOUT_SUCCESS","LOGOUT_FAILURE","latest","APILoadUser","get","withCredentials","sagaLoadUser","result","type","data","nick","e","console","error","watchLoadUser","APIJoin","log","post","sagaJoin","action","watchJoin","APILogOut","sagaLogOut","alert","watchLogOut","APILogin","sagaLogin","token","decoded","watchLogin","authSag"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAAQC,GAAR,EAAYC,IAAZ,EAAiBC,UAAjB,EAA4BC,SAA5B,EAAuCC,GAAvC,EAA4CC,KAA5C,EAAkDC,IAAlD,QAA6D,oBAA7D;AACA,SACKC,YADL,EAEKC,YAFL,EAGKC,YAHL,EAIKC,aAJL,EAKKC,aALL,EAMKC,aANL,EAOKC,iBAPL,EAQKC,iBARL,EASKC,iBATL,EAUKC,cAVL,EAWKC,cAXL,EAYKC,cAZL,QAcK,kBAdL;AAeA,SAASC,MAAT,QAAuB,qBAAvB,C,CAGA;AACA;;AACA,SAASC,WAAT,GAAsB;AAElB,SAAOtB,KAAK,CAACuB,GAAN,CAAU,QAAV,EAAqB;AAACC,IAAAA,eAAe,EAAC;AAAjB,GAArB,CAAP;AACH;;AAED,UAAUC,YAAV,GAAwB;AAEpB,MAAG;AACC,UAAMC,MAAM,GAAG,MAAMlB,IAAI,CAACc,WAAD,CAAzB;AACA,UAAMhB,GAAG,CAAC;AACFqB,MAAAA,IAAI,EAACX,iBADH;AAEFY,MAAAA,IAAI,EAAEF,MAAM,CAACE,IAAP,CAAYC;AAFhB,KAAD,CAAT;AAKH,GAPD,CAOC,OAAMC,CAAN,EAAQ;AACLC,IAAAA,OAAO,CAACC,KAAR,CAAc,qBAAd,EAAsCF,CAAtC;AACA,UAAMxB,GAAG,CAAC;AACNqB,MAAAA,IAAI,EAACV,iBADC;AAENe,MAAAA,KAAK,EAACF;AAFA,KAAD,CAAT;AAIH;AAEJ;;AAGD,UAAUG,aAAV,GAAyB;AACrB,QAAM5B,SAAS,CAACU,iBAAD,EAAmBU,YAAnB,CAAf;AACH,C,CACD;AAKA;AACA;;;AACA,SAASS,OAAT,CAAiBN,IAAjB,EAAsB;AAClBG,EAAAA,OAAO,CAACI,GAAR,CAAY,SAAZ,EAAwBP,IAAxB;AACA,SAAO5B,KAAK,CAACoC,IAAN,CAAW,YAAX,EAAwB;AAACR,IAAAA;AAAD,GAAxB,EAA+B;AAACJ,IAAAA,eAAe,EAAC;AAAjB,GAA/B,CAAP;AAEH;;AAKD,UAAUa,QAAV,CAAmBC,MAAnB,EAA0B;AAEtB,MAAG;AACAP,IAAAA,OAAO,CAACI,GAAR,CAAYG,MAAZ,EAAoBA,MAAM,CAACV,IAA3B;AACC,UAAMF,MAAM,GAAG,MAAMlB,IAAI,CAAC0B,OAAD,EAASI,MAAM,CAACV,IAAhB,CAAzB;AACA,UAAMtB,GAAG,CAAC;AACNqB,MAAAA,IAAI,EAACjB,YADC;AAENkB,MAAAA,IAAI,EAAEF;AAFA,KAAD,CAAT;AAKH,GARD,CAQC,OAAMI,CAAN,EAAQ;AAEPC,IAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AAEE,UAAMxB,GAAG,CAAC;AACNqB,MAAAA,IAAI,EAAChB,YADC;AAENqB,MAAAA,KAAK,EAACF;AAFA,KAAD,CAAT;AAIH;AAEJ;;AAID,UAAUS,SAAV,GAAqB;AACjB,QAAMnC,UAAU,CAACK,YAAD,EAAc4B,QAAd,CAAhB;AACH,C,CACD;AAKA;AACA;;;AACA,SAASG,SAAT,CAAmBZ,IAAnB,EAAwB;AAEpB;AACA,SAAO5B,KAAK,CAACuB,GAAN,CAAU,cAAV,EAAyB;AAACC,IAAAA,eAAe,EAAC;AAAjB,GAAzB,CAAP,CAHoB,CAKpB;AACA;AACH;;AAED,UAAUiB,UAAV,GAAsB;AAGlB,MAAG;AACD,UAAMf,MAAM,GAAK,MAAMlB,IAAI,CAACgC,SAAD,CAA3B;AAGE,UAAMlC,GAAG,CAAC;AACNqB,MAAAA,IAAI,EAACR;AADC,KAAD,CAAT;AAKH,GATD,CASC,OAAMW,CAAN,EAAQ;AACLY,IAAAA,KAAK,CAAC,SAAD,CAAL;AACA,UAAMpC,GAAG,CAAC;AACNqB,MAAAA,IAAI,EAACP,cADC;AAENY,MAAAA,KAAK,EAACF;AAFA,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUa,WAAV,GAAuB;AACnB,QAAMvC,UAAU,CAACc,cAAD,EAAgBuB,UAAhB,CAAhB;AACH,C,CACD;AAGA;AACA;;;AACA,SAASG,QAAT,CAAkBhB,IAAlB,EAAuB;AAEnB;AACA,SAAO5B,KAAK,CAACoC,IAAN,CAAW,aAAX,EAAyB;AAACR,IAAAA;AAAD,GAAzB,EAAgC;AAACJ,IAAAA,eAAe,EAAC;AAAjB,GAAhC,CAAP,CAHmB,CAKnB;AACA;AACH;;AAED,UAAUqB,SAAV,CAAoBP,MAApB,EAA2B;AAGvB,MAAG;AACC,UAAMZ,MAAM,GAAG,MAAMlB,IAAI,CAACoC,QAAD,EAAUN,MAAM,CAACV,IAAjB,CAAzB;AAEAG,IAAAA,OAAO,CAACI,GAAR,CAAY,QAAZ,EAAuBT,MAAM,CAACE,IAAP,CAAYkB,KAAnC;AACA,UAAMC,OAAO,GAAG9C,UAAU,CAACyB,MAAM,CAACE,IAAP,CAAYkB,KAAb,CAA1B;AAEA,UAAMxC,GAAG,CAAC;AACNqB,MAAAA,IAAI,EAACd,aADC;AAENe,MAAAA,IAAI,EAAEmB,OAAO,CAAClB;AAFR,KAAD,CAAT;AAMH,GAZD,CAYC,OAAMC,CAAN,EAAQ;AACLY,IAAAA,KAAK,CAAC,QAAD,CAAL;AACA,UAAMpC,GAAG,CAAC;AACNqB,MAAAA,IAAI,EAACb,aADC;AAENkB,MAAAA,KAAK,EAACF;AAFA,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUkB,UAAV,GAAsB;AAClB,QAAM3C,SAAS,CAACO,aAAD,EAAeiC,SAAf,CAAf;AACH,C,CACD;;;AAGA,eAAe,UAAUI,OAAV,GAAmB;AAG9B,QAAM/C,GAAG,CAAC,CACNC,IAAI,CAACoC,SAAD,CADE,EAENpC,IAAI,CAAC6C,UAAD,CAFE,EAGN7C,IAAI,CAAC8B,aAAD,CAHE,EAIN9B,IAAI,CAACwC,WAAD,CAJE,CAAD,CAAT;AAOH","sourcesContent":["import axios from 'axios'\r\nimport jwtDeCoder from 'jwt-decode'\r\nimport {all,fork,takeLatest,takeEvery ,put, delay,call} from 'redux-saga/effects'; \r\nimport \r\n    {JOIN_REQUEST,\r\n     JOIN_SUCCESS,\r\n     JOIN_FAILURE,\r\n     LOGIN_REQUEST,\r\n     LOGIN_SUCCESS,\r\n     LOGIN_FAILURE, \r\n     LOAD_USER_REQUEST,\r\n     LOAD_USER_SUCCESS,\r\n     LOAD_USER_FAILURE,\r\n     LOGOUT_REQUEST,\r\n     LOGOUT_SUCCESS,\r\n     LOGOUT_FAILURE,\r\n    } \r\nfrom '../reducers/auth'; \r\nimport { latest } from 'immer/dist/internal';\r\n\r\n\r\n//유저정보 유지 사이클 \r\n//------------------------------------------------------------------------\r\nfunction APILoadUser(){\r\n\r\n    return axios.get('/auth/' , {withCredentials:true}); \r\n}\r\n\r\nfunction* sagaLoadUser(){\r\n\r\n    try{\r\n        const result = yield call(APILoadUser);\r\n        yield put({\r\n                type:LOAD_USER_SUCCESS, \r\n                data: result.data.nick,           \r\n        }); \r\n\r\n    }catch(e){\r\n        console.error('LOAD_USER_FAILURE=>' , e); \r\n        yield put({\r\n            type:LOAD_USER_FAILURE,\r\n            error:e, \r\n        });\r\n    }\r\n\r\n}\r\n\r\n\r\nfunction* watchLoadUser(){\r\n    yield takeEvery(LOAD_USER_REQUEST,sagaLoadUser);\r\n}\r\n//------------------------------------------------------------------------\r\n\r\n\r\n\r\n\r\n//회원가입 사이클 \r\n//------------------------------------------------------------------------\r\nfunction APIJoin(data){\r\n    console.log('data==>' , data); \r\n    return axios.post('/auth/join',{data},{withCredentials:true}); \r\n\r\n}\r\n\r\n\r\n\r\n\r\nfunction* sagaJoin(action){\r\n    \r\n    try{\r\n       console.log(action, action.data);\r\n        const result = yield call(APIJoin,action.data); \r\n        yield put({\r\n            type:JOIN_SUCCESS,\r\n            data: result,\r\n        }); \r\n\r\n    }catch(e){\r\n\r\n      console.error(e); \r\n\r\n        yield put({\r\n            type:JOIN_FAILURE,\r\n            error:e, \r\n        })\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nfunction* watchJoin(){\r\n    yield takeLatest(JOIN_REQUEST,sagaJoin)\r\n}\r\n//------------------------------------------------------------------------\r\n\r\n\r\n\r\n\r\n//로그아웃 사이클\r\n//------------------------------------------------------------------------\r\nfunction APILogOut(data){\r\n\r\n    //jwt 로그인\r\n    return axios.get('/auth/logOut',{withCredentials:true});\r\n\r\n    //passport local 로그인\r\n    //return axios.post('/auth/login',data,{withCredentials:true});\r\n}\r\n\r\nfunction* sagaLogOut(){\r\n\r\n\r\n    try{\r\n      const result =   yield call(APILogOut); \r\n    \r\n\r\n        yield put({\r\n            type:LOGOUT_SUCCESS,\r\n        }); \r\n\r\n\r\n    }catch(e){\r\n        alert('로그아웃 에러'); \r\n        yield put({\r\n            type:LOGOUT_FAILURE, \r\n            error:e,\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchLogOut(){\r\n    yield takeLatest(LOGOUT_REQUEST,sagaLogOut); \r\n}\r\n//------------------------------------------------------------------------\r\n\r\n\r\n//로그인 사이클\r\n//------------------------------------------------------------------------\r\nfunction APILogin(data){\r\n\r\n    //jwt 로그인\r\n    return axios.post('/auth/login',{data},{withCredentials:true});\r\n\r\n    //passport local 로그인\r\n    //return axios.post('/auth/login',data,{withCredentials:true});\r\n}\r\n\r\nfunction* sagaLogin(action){\r\n\r\n\r\n    try{\r\n        const result = yield call(APILogin,action.data); \r\n        \r\n        console.log('result' , result.data.token); \r\n        const decoded = jwtDeCoder(result.data.token); \r\n\r\n        yield put({\r\n            type:LOGIN_SUCCESS,\r\n            data: decoded.nick,\r\n        }); \r\n\r\n\r\n    }catch(e){\r\n        alert('로그인 에러'); \r\n        yield put({\r\n            type:LOGIN_FAILURE, \r\n            error:e,\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchLogin(){\r\n    yield takeEvery(LOGIN_REQUEST,sagaLogin); \r\n}\r\n//------------------------------------------------------------------------\r\n\r\n\r\nexport default function* authSag(){\r\n\r\n\r\n    yield all([\r\n        fork(watchJoin), \r\n        fork(watchLogin), \r\n        fork(watchLoadUser), \r\n        fork(watchLogOut), \r\n        \r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}