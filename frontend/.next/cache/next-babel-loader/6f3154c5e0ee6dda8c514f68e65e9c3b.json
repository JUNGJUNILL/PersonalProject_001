{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(sagaJoin),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchJoin),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(authSag);\n\nimport axios from 'axios';\nimport { all, fork, takeLatest, takeEvery, put, delay, call } from 'redux-saga/effects';\nimport { JOIN_REQUEST, JOIN_SUCCESS, JOIN_FAILURE } from '../reducers/auth';\n\nfunction joinAPI(data) {\n  return axios.post('/');\n}\n\nfunction sagaJoin(action) {\n  return _regeneratorRuntime.wrap(function sagaJoin$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\n\nfunction watchJoin() {\n  return _regeneratorRuntime.wrap(function watchJoin$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(JOIN_REQUEST);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nexport default function authSag() {\n  return _regeneratorRuntime.wrap(function authSag$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([fork(watchJoin)]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["C:/git Repository/PersonalProject_001/frontend/sagas/authSaga.js"],"names":["sagaJoin","watchJoin","authSag","axios","all","fork","takeLatest","takeEvery","put","delay","call","JOIN_REQUEST","JOIN_SUCCESS","JOIN_FAILURE","joinAPI","data","post","action"],"mappings":";;oDAgBUA,Q;qDAIAC,S;qDAKeC,O;;AAzBzB,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAQC,GAAR,EAAYC,IAAZ,EAAiBC,UAAjB,EAA4BC,SAA5B,EAAuCC,GAAvC,EAA4CC,KAA5C,EAAkDC,IAAlD,QAA6D,oBAA7D;AACA,SACKC,YADL,EAEKC,YAFL,EAGKC,YAHL,QAKK,kBALL;;AAQA,SAASC,OAAT,CAAiBC,IAAjB,EAAsB;AAElB,SAAOZ,KAAK,CAACa,IAAN,CAAW,GAAX,CAAP;AAEH;;AAED,SAAUhB,QAAV,CAAmBiB,MAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAAUhB,SAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMK,UAAU,CAACK,YAAD,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKA,eAAe,SAAUT,OAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAGX,iBAAME,GAAG,CAAC,CACNC,IAAI,CAACJ,SAAD,CADE,CAAD,CAAT;;AAHW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import axios from 'axios'\r\nimport {all,fork,takeLatest,takeEvery ,put, delay,call} from 'redux-saga/effects'; \r\nimport \r\n    {JOIN_REQUEST,\r\n     JOIN_SUCCESS,\r\n     JOIN_FAILURE\r\n    } \r\nfrom '../reducers/auth'; \r\n\r\n\r\nfunction joinAPI(data){\r\n\r\n    return axios.post('/')\r\n\r\n}\r\n\r\nfunction* sagaJoin(action){\r\n\r\n}\r\n\r\nfunction* watchJoin(){\r\n    yield takeLatest(JOIN_REQUEST,)\r\n}\r\n\r\n\r\nexport default function* authSag(){\r\n\r\n\r\n    yield all([\r\n        fork(watchJoin), \r\n        \r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}