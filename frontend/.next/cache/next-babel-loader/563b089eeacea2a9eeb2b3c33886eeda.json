{"ast":null,"code":"var _jsxFileName = \"D:\\\\git Repository\\\\PersonalProject_001\\\\frontend\\\\components\\\\mainPosts_1001\\\\mainPosts_1001_comments.js\";\nvar __jsx = React.createElement;\nimport React, { useCallback, useEffect, useState, createRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport custumDateFormat from '../../utilComponent/custumDateFormat';\nimport { DislikeTwoTone, LikeTwoTone } from '@ant-design/icons';\nimport { MAINPOSTS_1001_COMMENTS_REQUEST, MAINPOSTS_1001_COMMENTLIKE_REQUEST } from '../../reducers/mainPosts_1001';\n\nconst Comments1001 = ({\n  key,\n  postFlag,\n  nickName,\n  postId,\n  userInfo,\n  commentId,\n  comment,\n  who,\n  flag,\n  good,\n  bad,\n  createdDate,\n  isAddcomment,\n  likeDisLikeFalg,\n  hello\n}) => {\n  const dispatch = useDispatch();\n  const {\n    clickCommentId,\n    likeIsClicked\n  } = useSelector(state => state.mainPosts_1001);\n  const {\n    0: goodCount,\n    1: setGoodCount\n  } = useState(parseInt(good));\n  const {\n    0: badCount,\n    1: setBadCount\n  } = useState(parseInt(bad));\n  const {\n    0: like,\n    1: setLike\n  } = useState(false);\n  const {\n    0: disLike,\n    1: setDisLike\n  } = useState(false);\n  console.log('clickCommentId=> ', hello, '  commentId=>  ', commentId, 'flag=>  ', flag, '  likeIsClicked=>', likeIsClicked, 'isAddcomment =>', isAddcomment, '   likeDisLikeFalg=> ', likeDisLikeFalg);\n  const likeBtn = useCallback((commentid, flag, likeDislike) => {\n    if (!userInfo) {\n      alert('로그인이 필요한 서비스 입니다.');\n      return;\n    } //alert(`${commentid},${flag},${likeDislike}`)\n    //문자 리터럴로 해야 alert에 변수 들어가진다.\n\n\n    if (flag === \"Y\" || likeDisLikeFalg) {\n      alert('이미 좋아요! 싫어요! 했습니다.');\n      return;\n    } else {\n      // if(likeDisLikeFalg ===\"good\"){\n      //     setLike(true); \n      //     setDisLike(false); \n      //     console.log('good 버튼 누름commentId==>   ',commentId ,'   goodCount=>' , goodCount, ' good=>  ',good , '  flag=>' , flag); \n      // }else{\n      //     setLike(false); \n      //     setDisLike(true); \n      //     console.log('bad 버튼 누름commentId==>   ',commentId ,'   badCount=>' , badCount, ' bad=>  ',bad ); \n      //   }\n      //댓글 좋아요!\n      dispatch({\n        type: MAINPOSTS_1001_COMMENTLIKE_REQUEST,\n        data: {\n          commentid,\n          postFlag,\n          postId,\n          flag: likeDislike,\n          who: userInfo,\n          nickName\n        }\n      });\n    }\n\n    alert(`${likeDislike}`);\n  }, [like, disLike, likeIsClicked]);\n  return __jsx(\"div\", {\n    className: \"divTableRow\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 17\n    }\n  }, __jsx(\"div\", {\n    className: \"divTableCell\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 21\n    }\n  }, __jsx(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 21\n    }\n  }, who), \" \\xA0 \", __jsx(\"small\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 41\n    }\n  }, custumDateFormat(createdDate)), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 87\n    }\n  }), comment, __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 30\n    }\n  }), \"\\uB2F5\\uAE00 [9] \", commentId, __jsx(\"div\", {\n    style: {\n      marginTop: \"1%\",\n      display: \"block\",\n      float: \"right\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 25\n    }\n  }, __jsx(LikeTwoTone, {\n    onClick: () => likeBtn(commentId, flag, 'good'),\n    twoToneColor: commentId === clickCommentId && likeDisLikeFalg === 'good' ? \"#ff0000\" : \"#1ba640\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 29\n    }\n  }), likeDisLikeFalg === 'good' && likeIsClicked ? parseInt(good) + 1 : good, \"\\xA0\\xA0\\xA0\\xA0\", __jsx(DislikeTwoTone, {\n    onClick: () => likeBtn(commentId, flag, 'bad'),\n    twoToneColor: commentId === clickCommentId && likeDisLikeFalg === 'bad' ? \"#ff0000\" : \"#1ba640\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 29\n    }\n  }), likeDisLikeFalg === 'bad' && likeIsClicked ? parseInt(bad) + 1 : bad, \"\\xA0\\xA0\\xA0\\xA0\", __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 29\n    }\n  }))));\n};\n\nexport default Comments1001;","map":{"version":3,"sources":["D:/git Repository/PersonalProject_001/frontend/components/mainPosts_1001/mainPosts_1001_comments.js"],"names":["React","useCallback","useEffect","useState","createRef","useDispatch","useSelector","custumDateFormat","DislikeTwoTone","LikeTwoTone","MAINPOSTS_1001_COMMENTS_REQUEST","MAINPOSTS_1001_COMMENTLIKE_REQUEST","Comments1001","key","postFlag","nickName","postId","userInfo","commentId","comment","who","flag","good","bad","createdDate","isAddcomment","likeDisLikeFalg","hello","dispatch","clickCommentId","likeIsClicked","state","mainPosts_1001","goodCount","setGoodCount","parseInt","badCount","setBadCount","like","setLike","disLike","setDisLike","console","log","likeBtn","commentid","likeDislike","alert","type","data","marginTop","display","float"],"mappings":"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","sourcesContent":["import React, { useCallback,useEffect, useState, createRef } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport custumDateFormat from  '../../utilComponent/custumDateFormat';\r\nimport {DislikeTwoTone,LikeTwoTone} from '@ant-design/icons'\r\nimport \r\n    {\r\n     MAINPOSTS_1001_COMMENTS_REQUEST, \r\n     MAINPOSTS_1001_COMMENTLIKE_REQUEST,\r\n    } \r\nfrom '../../reducers/mainPosts_1001'; \r\n\r\nconst Comments1001 = ({\r\n                      key,\r\n                      postFlag,\r\n                      nickName,\r\n                      postId,\r\n                      userInfo,\r\n\r\n                      commentId,\r\n                      comment,\r\n                      who,\r\n                      flag,\r\n                      good,\r\n                      bad,\r\n                      createdDate,\r\n                      isAddcomment,\r\n                      likeDisLikeFalg,\r\n                      hello\r\n\r\n                    })=>{\r\n\r\n    const dispatch = useDispatch();       \r\n    const {clickCommentId,\r\n           likeIsClicked } =useSelector((state)=>state.mainPosts_1001); \r\n\r\n    const [goodCount,setGoodCount] = useState(parseInt(good));  \r\n    const [badCount,setBadCount]   = useState(parseInt(bad)); \r\n    const [like , setLike]        = useState(false); \r\n    const [disLike , setDisLike]  = useState(false); \r\n\r\n    console.log('clickCommentId=> ' , hello , '  commentId=>  ' , commentId, 'flag=>  ' , flag,'  likeIsClicked=>',likeIsClicked,'isAddcomment =>' , isAddcomment,'   likeDisLikeFalg=> ',likeDisLikeFalg); \r\n\r\n    const likeBtn =useCallback((commentid,flag,likeDislike)=>{\r\n        if(!userInfo){\r\n          alert('로그인이 필요한 서비스 입니다.'); \r\n          return;\r\n        }\r\n          //alert(`${commentid},${flag},${likeDislike}`)\r\n        //문자 리터럴로 해야 alert에 변수 들어가진다.\r\n    \r\n        if(flag===\"Y\" || likeDisLikeFalg){\r\n          \r\n          alert('이미 좋아요! 싫어요! 했습니다.'); \r\n          return; \r\n    \r\n        }else{\r\n\r\n            // if(likeDisLikeFalg ===\"good\"){\r\n            //     setLike(true); \r\n            //     setDisLike(false); \r\n\r\n            //     console.log('good 버튼 누름commentId==>   ',commentId ,'   goodCount=>' , goodCount, ' good=>  ',good , '  flag=>' , flag); \r\n            // }else{\r\n            //     setLike(false); \r\n            //     setDisLike(true); \r\n\r\n            //     console.log('bad 버튼 누름commentId==>   ',commentId ,'   badCount=>' , badCount, ' bad=>  ',bad ); \r\n            //   }\r\n\r\n        //댓글 좋아요!\r\n          dispatch({\r\n            type:MAINPOSTS_1001_COMMENTLIKE_REQUEST, \r\n            data:{\r\n              commentid,\r\n              postFlag,\r\n              postId,\r\n              flag: likeDislike ,\r\n              who: userInfo,\r\n              nickName,\r\n            }\r\n        }); \r\n\r\n    \r\n        }\r\n\r\n       alert(`${likeDislike}`); \r\n      \r\n      },[like,disLike,likeIsClicked]); \r\n\r\n    return (\r\n                <div  className='divTableRow' >\r\n                    <div  className=\"divTableCell\">\r\n                    <b>{who}</b> &nbsp; <small>{custumDateFormat(createdDate)}</small><br/>\r\n                    {comment}<br />\r\n                    답글 [9] {commentId}\r\n               \r\n                        <div  style={{marginTop:\"1%\",display:\"block\",float:\"right\"}}>\r\n                            <LikeTwoTone onClick={()=>likeBtn(commentId,flag,'good')} twoToneColor={commentId===clickCommentId && likeDisLikeFalg ==='good' ? \"#ff0000\" : \"#1ba640\"}/>{likeDisLikeFalg ==='good' && likeIsClicked? parseInt(good)+1 : good}\r\n                            &nbsp;&nbsp;&nbsp;&nbsp;\r\n                            <DislikeTwoTone onClick={()=>likeBtn(commentId,flag,'bad')} twoToneColor={commentId===clickCommentId && likeDisLikeFalg ==='bad' ? \"#ff0000\" : \"#1ba640\"} />{likeDisLikeFalg === 'bad'&& likeIsClicked ? parseInt(bad)+1 : bad}\r\n                            &nbsp;&nbsp;&nbsp;&nbsp;\r\n                            <br />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n                \r\n    )\r\n\r\n}\r\n\r\nexport default Comments1001; "]},"metadata":{},"sourceType":"module"}