{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"D:\\\\git Repository\\\\PersonalProject_001\\\\frontend\\\\components\\\\mainPosts_1001\\\\mainPosts_1001_textArea.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useCallback, useEffect, useState, createRef, forwardRef, useImperativeHandle } from 'react';\nimport { Button } from 'antd'; //forwardRef\n//https://ko.reactjs.org/docs/react-api.html#reactforwardref\n\nvar CommentTextArea = forwardRef(_c = _s(function (_ref, ref) {\n  _s();\n\n  var postFlag = _ref.postFlag,\n      nickName = _ref.nickName,\n      postId = _ref.postId,\n      userInfo = _ref.userInfo,\n      insertComment = _ref.insertComment,\n      unfoldList = _ref.unfoldList;\n  var focusRef = createRef();\n\n  var _useState = useState(''),\n      comment = _useState[0],\n      setComment = _useState[1]; //input box clear , focus\n\n\n  useImperativeHandle(ref, function () {\n    return {\n      clearInput: function clearInput() {\n        return setComment('');\n      },\n      focusInput: function focusInput() {\n        return focusRef.current.focus();\n      }\n    };\n  }); //댓글 입력 textArea \n\n  var onChageComment = useCallback(function (e) {\n    if (comment.length === 300) {\n      alert('300자 이상 입력 할 수 없습니다.');\n      return;\n    }\n\n    setComment(e.target.value);\n  }, [comment]);\n  return __jsx(React.Fragment, null, __jsx(\"textarea\", {\n    value: comment,\n    ref: focusRef,\n    style: {\n      width: \"100%\",\n      height: \"80px\",\n      marginTop: \"3%\"\n    },\n    onChange: onChageComment,\n    placeholder: userInfo ? \"댓글을 작성해 보세요!\" : \"로그인이 필요한 서비스 입니다.\",\n    readOnly: userInfo ? false : true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }\n  }), __jsx(\"div\", {\n    style: {\n      margin: \"1%\",\n      display: \"block\",\n      \"float\": \"left\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }, comment ? comment.length : 0, \" / 300\"), userInfo && __jsx(\"div\", {\n    style: {\n      margin: \"1%\",\n      display: \"block\",\n      \"float\": \"right\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }, __jsx(Button, {\n    type: \"primary\",\n    onClick: function onClick() {\n      return insertComment(postFlag, postId, nickName, comment);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }\n  }, \"\\uB313\\uAE00\\uB2EC\\uAE30\")));\n}, \"ujQ9q4tdhCTfyASez9yA/ObErro=\", false, function () {\n  return [useImperativeHandle];\n}));\n_c2 = CommentTextArea;\nexport default CommentTextArea;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CommentTextArea$forwardRef\");\n$RefreshReg$(_c2, \"CommentTextArea\");","map":{"version":3,"sources":["D:/git Repository/PersonalProject_001/frontend/components/mainPosts_1001/mainPosts_1001_textArea.js"],"names":["React","useCallback","useEffect","useState","createRef","forwardRef","useImperativeHandle","Button","CommentTextArea","ref","postFlag","nickName","postId","userInfo","insertComment","unfoldList","focusRef","comment","setComment","clearInput","focusInput","current","focus","onChageComment","e","length","alert","target","value","width","height","marginTop","margin","display"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA4BC,SAA5B,EAAuCC,QAAvC,EAAiDC,SAAjD,EAA4DC,UAA5D,EAAuEC,mBAAvE,QAAiG,OAAjG;AACA,SAAQC,MAAR,QAAqB,MAArB,C,CAEA;AACA;;AAEA,IAAOC,eAAe,GAAEH,UAAU,SAAC,gBAA+DI,GAA/D,EAAsE;AAAA;;AAAA,MAApEC,QAAoE,QAApEA,QAAoE;AAAA,MAA3DC,QAA2D,QAA3DA,QAA2D;AAAA,MAAlDC,MAAkD,QAAlDA,MAAkD;AAAA,MAA3CC,QAA2C,QAA3CA,QAA2C;AAAA,MAAlCC,aAAkC,QAAlCA,aAAkC;AAAA,MAApBC,UAAoB,QAApBA,UAAoB;AAErG,MAAMC,QAAQ,GAAGZ,SAAS,EAA1B;;AAFqG,kBAGvED,QAAQ,CAAC,EAAD,CAH+D;AAAA,MAG9Fc,OAH8F;AAAA,MAGrFC,UAHqF,iBAMvG;;;AACAZ,EAAAA,mBAAmB,CAACG,GAAD,EAAM;AAAA,WAAO;AAC9BU,MAAAA,UAAU,EAAG;AAAA,eAAMD,UAAU,CAAC,EAAD,CAAhB;AAAA,OADiB;AAE9BE,MAAAA,UAAU,EAAG;AAAA,eAAMJ,QAAQ,CAACK,OAAT,CAAiBC,KAAjB,EAAN;AAAA;AAFiB,KAAP;AAAA,GAAN,CAAnB,CAPuG,CAavG;;AACA,MAAMC,cAAc,GAAEtB,WAAW,CAAC,UAACuB,CAAD,EAAK;AAErC,QAAGP,OAAO,CAACQ,MAAR,KAAmB,GAAtB,EAA0B;AACxBC,MAAAA,KAAK,CAAC,sBAAD,CAAL;AACA;AACD;;AACDR,IAAAA,UAAU,CAACM,CAAC,CAACG,MAAF,CAASC,KAAV,CAAV;AAED,GARgC,EAQ/B,CAACX,OAAD,CAR+B,CAAjC;AAgBF,SACI,4BAEA;AAAU,IAAA,KAAK,EAAEA,OAAjB;AAA0B,IAAA,GAAG,EAAED,QAA/B;AAAyC,IAAA,KAAK,EAAE;AAACa,MAAAA,KAAK,EAAC,MAAP;AAAcC,MAAAA,MAAM,EAAC,MAArB;AAA4BC,MAAAA,SAAS,EAAC;AAAtC,KAAhD;AAA6F,IAAA,QAAQ,EAAER,cAAvG;AAAuH,IAAA,WAAW,EAAGV,QAAQ,GAAG,cAAH,GAAoB,mBAAjK;AAAsL,IAAA,QAAQ,EAAEA,QAAQ,GAAG,KAAH,GAAW,IAAnN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFA,EAIA;AAAK,IAAA,KAAK,EAAE;AAACmB,MAAAA,MAAM,EAAC,IAAR;AAAaC,MAAAA,OAAO,EAAC,OAArB;AAA6B,eAAM;AAAnC,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGhB,OAAO,GAAGA,OAAO,CAACQ,MAAX,GAAqB,CAD/B,WAJA,EAQCZ,QAAQ,IACL;AAAK,IAAA,KAAK,EAAE;AAACmB,MAAAA,MAAM,EAAC,IAAR;AAAaC,MAAAA,OAAO,EAAC,OAArB;AAA6B,eAAM;AAAnC,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,SAAb;AAAuB,IAAA,OAAO,EAAE;AAAA,aAAInB,aAAa,CAACJ,QAAD,EAAUE,MAAV,EAAiBD,QAAjB,EAA0BM,OAA1B,CAAjB;AAAA,KAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCADJ,CATJ,CADJ;AAqBC,CAnDiC;AAAA,UAOhCX,mBAPgC;AAAA,GAAlC;MAAOE,e;AAqDP,eAAeA,eAAf","sourcesContent":["import React, { useCallback,useEffect, useState, createRef ,forwardRef,useImperativeHandle} from 'react'\r\nimport {Button} from 'antd'\r\n\r\n//forwardRef\r\n//https://ko.reactjs.org/docs/react-api.html#reactforwardref\r\n\r\nconst  CommentTextArea= forwardRef(({postFlag,nickName,postId,userInfo,insertComment,unfoldList} ,ref) =>{\r\n\r\n    const focusRef = createRef(); \r\n    const [comment, setComment] = useState(''); \r\n\r\n  \r\n  //input box clear , focus\r\n  useImperativeHandle(ref, () => ({\r\n    clearInput : () => setComment(''),\r\n    focusInput : () => focusRef.current.focus(),\r\n  }));\r\n\r\n\r\n  //댓글 입력 textArea \r\n  const onChageComment =useCallback((e)=>{\r\n\r\n    if(comment.length === 300){\r\n      alert('300자 이상 입력 할 수 없습니다.'); \r\n      return; \r\n    }\r\n    setComment(e.target.value); \r\n\r\n  },[comment]); \r\n  \r\n\r\n\r\n    \r\n\r\n\r\n\r\nreturn (\r\n    <>\r\n  \r\n    <textarea value={comment} ref={focusRef} style={{width:\"100%\",height:\"80px\",marginTop:\"3%\"}} onChange={onChageComment} placeholder={ userInfo ? \"댓글을 작성해 보세요!\" : \"로그인이 필요한 서비스 입니다.\"} readOnly={userInfo ? false : true}/>\r\n   \r\n    <div style={{margin:\"1%\",display:\"block\",float:\"left\"}}>\r\n      {comment ? comment.length  : 0 } &#47; 300\r\n    </div>\r\n\r\n    {userInfo && \r\n        <div style={{margin:\"1%\",display:\"block\",float:\"right\"}}>\r\n            <Button type=\"primary\" onClick={()=>insertComment(postFlag,postId,nickName,comment)}>댓글달기</Button>\r\n        </div>\r\n    }\r\n\r\n\r\n\r\n\r\n    </>\r\n)\r\n\r\n})\r\n\r\nexport default CommentTextArea; "]},"metadata":{},"sourceType":"module"}