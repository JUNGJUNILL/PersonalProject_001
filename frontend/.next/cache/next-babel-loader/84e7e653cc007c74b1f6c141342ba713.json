{"ast":null,"code":"var _jsxFileName = \"D:\\\\git Repository\\\\PersonalProject_001\\\\frontend\\\\components\\\\mainPosts_1001\\\\mainPosts_1001_comments.js\";\nvar __jsx = React.createElement;\nimport React, { useCallback, useEffect, useState, createRef, memo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport custumDateFormat from '../../utilComponent/custumDateFormat';\nimport { DislikeTwoTone, LikeTwoTone } from '@ant-design/icons';\nimport { MAINPOSTS_1001_COMMENTS_REQUEST, MAINPOSTS_1001_COMMENTLIKE_REQUEST } from '../../reducers/mainPosts_1001';\nimport { Badge } from 'antd';\n\nconst Comments1001 = ({\n  key,\n  postFlag,\n  nickName,\n  postId,\n  userInfo,\n  commentId,\n  comment,\n  who,\n  flag,\n  good,\n  bad,\n  createdDate,\n  likeBtn,\n  clickedComponent,\n  likeDislikeflag\n}) => {\n  const dispatch = useDispatch();\n  const {\n    clickCommentId,\n    likeIsClicked\n  } = useSelector(state => state.mainPosts_1001);\n  const {\n    0: goodCount,\n    1: setGoodCount\n  } = useState(parseInt(good));\n  const {\n    0: badCount,\n    1: setBadCount\n  } = useState(parseInt(bad));\n  const {\n    0: like,\n    1: setLike\n  } = useState(false);\n  const {\n    0: disLike,\n    1: setDisLike\n  } = useState(false);\n  console.log('clickedComponent=>', clickedComponent, '     flag=>', flag);\n\n  const gggg = () => {\n    alert(clickedComponent);\n    return;\n  }; // const likeBtn =useCallback((commentid,flag,likeDislike)=>{\n  //     if(!userInfo){\n  //       alert('로그인이 필요한 서비스 입니다.'); \n  //       return;\n  //     }\n  //       //alert(`${commentid},${flag},${likeDislike}`)\n  //     //문자 리터럴로 해야 alert에 변수 들어가진다.\n  //     if(flag===\"Y\" || likeDisLikeFalg){\n  //       alert('이미 좋아요! 싫어요! 했습니다.'); \n  //       return; \n  //     }else{\n  //         //alert('likeDisLikeFalg->' , likeDisLikeFalg); \n  //         if(likeDislike === \"good\"){\n  //           setGoodCount(parseInt(good)+1); \n  //         }else{\n  //           setBadCount(parseInt(bad)+1);\n  //           }\n  //       //댓글 좋아요!\n  //       dispatch({\n  //         type:MAINPOSTS_1001_COMMENTLIKE_REQUEST, \n  //         data:{\n  //           commentid,\n  //           postFlag,\n  //           postId,\n  //           flag: likeDislike ,\n  //           who: userInfo,\n  //           nickName,\n  //         }\n  //     }); \n  //            // 댓글 리스트 \n  //     //   dispatch({\n  //     //     type:MAINPOSTS_1001_COMMENTS_REQUEST, \n  //     //     data:{\n  //     //       postId,\n  //     //       nickName,\n  //     //       postFlag,\n  //     //       who:userInfo,\n  //     //     }\n  //     // }); \n  //     }\n  //    alert(`${likeDislike}`); \n  //   },[]); \n\n\n  return __jsx(\"div\", {\n    className: \"divTableRow\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 17\n    }\n  }, __jsx(\"div\", {\n    className: \"divTableCell\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 21\n    }\n  }, __jsx(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 21\n    }\n  }, who), \" \\xA0 \", __jsx(\"small\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 41\n    }\n  }, custumDateFormat(createdDate)), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 87\n    }\n  }), comment, __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 30\n    }\n  }), \"\\uB2F5\\uAE00 [9] \", commentId, \" \", __jsx(\"input\", {\n    type: \"button\",\n    value: \"ttt\",\n    onClick: gggg,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 40\n    }\n  }), __jsx(\"div\", {\n    style: {\n      marginTop: \"1%\",\n      display: \"block\",\n      float: \"right\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 25\n    }\n  }, __jsx(LikeTwoTone, {\n    onClick: () => likeBtn(commentId, flag, 'good'),\n    twoToneColor: clickedComponent ? \"#ff0000\" : \"#1ba640\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 29\n    }\n  }), good, \"\\xA0\\xA0\\xA0\\xA0\", __jsx(DislikeTwoTone, {\n    onClick: () => likeBtn(commentId, flag, 'bad'),\n    twoToneColor: clickedComponent ? \"#ff0000\" : \"#1ba640\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 29\n    }\n  }), bad, \"\\xA0\\xA0\\xA0\\xA0\", __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 29\n    }\n  }))));\n};\n\nexport default React.memo(Comments1001);","map":{"version":3,"sources":["D:/git Repository/PersonalProject_001/frontend/components/mainPosts_1001/mainPosts_1001_comments.js"],"names":["React","useCallback","useEffect","useState","createRef","memo","useDispatch","useSelector","custumDateFormat","DislikeTwoTone","LikeTwoTone","MAINPOSTS_1001_COMMENTS_REQUEST","MAINPOSTS_1001_COMMENTLIKE_REQUEST","Badge","Comments1001","key","postFlag","nickName","postId","userInfo","commentId","comment","who","flag","good","bad","createdDate","likeBtn","clickedComponent","likeDislikeflag","dispatch","clickCommentId","likeIsClicked","state","mainPosts_1001","goodCount","setGoodCount","parseInt","badCount","setBadCount","like","setLike","disLike","setDisLike","console","log","gggg","alert","marginTop","display","float"],"mappings":"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","sourcesContent":["import React, { useCallback,useEffect, useState, createRef, memo } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport custumDateFormat from  '../../utilComponent/custumDateFormat';\r\nimport {DislikeTwoTone,LikeTwoTone} from '@ant-design/icons'\r\nimport \r\n    {\r\n     MAINPOSTS_1001_COMMENTS_REQUEST, \r\n     MAINPOSTS_1001_COMMENTLIKE_REQUEST,\r\n    } \r\nfrom '../../reducers/mainPosts_1001'; \r\nimport { Badge } from 'antd';\r\n\r\nconst Comments1001 = ({\r\n                      key,\r\n                      postFlag,\r\n                      nickName,\r\n                      postId,\r\n                      userInfo,\r\n\r\n                      commentId,\r\n                      comment,\r\n                      who,\r\n                      flag,\r\n                      good,\r\n                      bad,\r\n                      createdDate,\r\n\r\n\r\n\r\n                      likeBtn,\r\n\r\n                      clickedComponent,\r\n                      likeDislikeflag\r\n\r\n                    })=>{\r\n\r\n    const dispatch = useDispatch();       \r\n    const {clickCommentId,\r\n           likeIsClicked } =useSelector((state)=>state.mainPosts_1001); \r\n\r\n    const [goodCount,setGoodCount] = useState(parseInt(good));  \r\n    const [badCount,setBadCount]   = useState(parseInt(bad)); \r\n    const [like , setLike]        = useState(false); \r\n    const [disLike , setDisLike]  = useState(false); \r\n\r\n        console.log('clickedComponent=>' ,clickedComponent ,'     flag=>' , flag); \r\n    const gggg = ()=>{\r\n        alert(clickedComponent);\r\n        return; \r\n    }\r\n\r\n\r\n     // const likeBtn =useCallback((commentid,flag,likeDislike)=>{\r\n    //     if(!userInfo){\r\n    //       alert('로그인이 필요한 서비스 입니다.'); \r\n    //       return;\r\n    //     }\r\n    //       //alert(`${commentid},${flag},${likeDislike}`)\r\n    //     //문자 리터럴로 해야 alert에 변수 들어가진다.\r\n    \r\n    //     if(flag===\"Y\" || likeDisLikeFalg){\r\n          \r\n    //       alert('이미 좋아요! 싫어요! 했습니다.'); \r\n    //       return; \r\n    \r\n    //     }else{\r\n    //         //alert('likeDisLikeFalg->' , likeDisLikeFalg); \r\n    //         if(likeDislike === \"good\"){\r\n\r\n    //           setGoodCount(parseInt(good)+1); \r\n\r\n    //         }else{\r\n\r\n    //           setBadCount(parseInt(bad)+1);\r\n\r\n    //           }\r\n\r\n     \r\n\r\n    //       //댓글 좋아요!\r\n    //       dispatch({\r\n    //         type:MAINPOSTS_1001_COMMENTLIKE_REQUEST, \r\n    //         data:{\r\n    //           commentid,\r\n    //           postFlag,\r\n    //           postId,\r\n    //           flag: likeDislike ,\r\n    //           who: userInfo,\r\n    //           nickName,\r\n    //         }\r\n    //     }); \r\n\r\n\r\n    //            // 댓글 리스트 \r\n    //     //   dispatch({\r\n    //     //     type:MAINPOSTS_1001_COMMENTS_REQUEST, \r\n    //     //     data:{\r\n    //     //       postId,\r\n    //     //       nickName,\r\n    //     //       postFlag,\r\n    //     //       who:userInfo,\r\n    //     //     }\r\n    //     // }); \r\n    \r\n    //     }\r\n\r\n    //    alert(`${likeDislike}`); \r\n      \r\n    //   },[]); \r\n\r\n    return (\r\n                <div  className='divTableRow' >\r\n                    <div  className=\"divTableCell\">\r\n                    <b>{who}</b> &nbsp; <small>{custumDateFormat(createdDate)}</small><br/>\r\n                    {comment}<br />\r\n                    답글 [9] {commentId} <input type=\"button\" value=\"ttt\" onClick={gggg}/>\r\n               \r\n                        <div  style={{marginTop:\"1%\",display:\"block\",float:\"right\"}}>\r\n                            <LikeTwoTone onClick={()=>likeBtn(commentId,flag,'good')} twoToneColor={clickedComponent ? \"#ff0000\" : \"#1ba640\"}/>{good}\r\n                            &nbsp;&nbsp;&nbsp;&nbsp;\r\n                            <DislikeTwoTone onClick={()=>likeBtn(commentId,flag,'bad')} twoToneColor={clickedComponent ? \"#ff0000\" : \"#1ba640\"} />{bad}\r\n                            &nbsp;&nbsp;&nbsp;&nbsp;\r\n                            <br />\r\n                        </div> \r\n                    </div>\r\n                </div>\r\n\r\n\r\n                \r\n    )\r\n\r\n}\r\n\r\nexport default React.memo(Comments1001); "]},"metadata":{},"sourceType":"module"}