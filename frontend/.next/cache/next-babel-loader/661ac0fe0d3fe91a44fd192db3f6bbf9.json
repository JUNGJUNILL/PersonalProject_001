{"ast":null,"code":"import axios from 'axios';\nimport { all, fork, takeLatest, takeEvery, put, delay, call } from 'redux-saga/effects';\nimport { JOIN_REQUEST, JOIN_SUCCESS, JOIN_FAILURE, LOGIN_REQUEST, LOGIN_SUCCESS, LOGIN_FAILURE } from '../reducers/auth';\n\nfunction APIJoin(data) {\n  return axios.post('/auth', {\n    data\n  }, {\n    withCredentials: true\n  });\n}\n\nfunction* sagaJoin(action) {\n  try {\n    console.log(action, action.data);\n    const result = yield call(APIJoin, action.data);\n    yield put({\n      type: JOIN_SUCCESS,\n      data: result\n    });\n  } catch (e) {\n    alert('에러발생');\n    yield put({\n      type: JOIN_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchJoin() {\n  yield takeLatest(JOIN_REQUEST, sagaJoin);\n}\n\nfunction APILogin(data) {\n  console.log('data=>', data);\n  return axios.post('/auth/login', {\n    data\n  }, {\n    withCredentials: true\n  });\n}\n\nfunction* sagaLogin(action) {\n  const result = yield call(APILogin, action.data);\n\n  try {} catch (e) {\n    alert('로그인 에러');\n    yield put({\n      type: LOGIN_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLogin() {\n  yield takeLatest(LOGIN_REQUEST, sagaLogin);\n}\n\nexport default function* authSag() {\n  yield all([fork(watchJoin), fork(watchLogin)]);\n}","map":{"version":3,"sources":["C:/git Repository/PersonalProject_001/frontend/sagas/authSaga.js"],"names":["axios","all","fork","takeLatest","takeEvery","put","delay","call","JOIN_REQUEST","JOIN_SUCCESS","JOIN_FAILURE","LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_FAILURE","APIJoin","data","post","withCredentials","sagaJoin","action","console","log","result","type","e","alert","error","watchJoin","APILogin","sagaLogin","watchLogin","authSag"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,GAAR,EAAYC,IAAZ,EAAiBC,UAAjB,EAA4BC,SAA5B,EAAuCC,GAAvC,EAA4CC,KAA5C,EAAkDC,IAAlD,QAA6D,oBAA7D;AACA,SACKC,YADL,EAEKC,YAFL,EAGKC,YAHL,EAIKC,aAJL,EAKKC,aALL,EAMKC,aANL,QAQK,kBARL;;AAWA,SAASC,OAAT,CAAiBC,IAAjB,EAAsB;AAElB,SAAOf,KAAK,CAACgB,IAAN,CAAW,OAAX,EAAmB;AAACD,IAAAA;AAAD,GAAnB,EAA0B;AAACE,IAAAA,eAAe,EAAC;AAAjB,GAA1B,CAAP;AAEH;;AAED,UAAUC,QAAV,CAAmBC,MAAnB,EAA0B;AAEtB,MAAG;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ,EAAoBA,MAAM,CAACJ,IAA3B;AACC,UAAMO,MAAM,GAAG,MAAMf,IAAI,CAACO,OAAD,EAASK,MAAM,CAACJ,IAAhB,CAAzB;AACA,UAAMV,GAAG,CAAC;AACNkB,MAAAA,IAAI,EAACd,YADC;AAENM,MAAAA,IAAI,EAAEO;AAFA,KAAD,CAAT;AAKH,GARD,CAQC,OAAME,CAAN,EAAQ;AAELC,IAAAA,KAAK,CAAC,MAAD,CAAL;AAEA,UAAMpB,GAAG,CAAC;AACNkB,MAAAA,IAAI,EAACb,YADC;AAENgB,MAAAA,KAAK,EAACF;AAFA,KAAD,CAAT;AAIH;AAEJ;;AAID,UAAUG,SAAV,GAAqB;AACjB,QAAMxB,UAAU,CAACK,YAAD,EAAcU,QAAd,CAAhB;AACH;;AAED,SAASU,QAAT,CAAkBb,IAAlB,EAAuB;AACnBK,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAuBN,IAAvB;AACA,SAAOf,KAAK,CAACgB,IAAN,CAAW,aAAX,EAAyB;AAACD,IAAAA;AAAD,GAAzB,EAAgC;AAACE,IAAAA,eAAe,EAAC;AAAjB,GAAhC,CAAP;AACH;;AAGD,UAAUY,SAAV,CAAoBV,MAApB,EAA2B;AAEvB,QAAMG,MAAM,GAAG,MAAMf,IAAI,CAACqB,QAAD,EAAUT,MAAM,CAACJ,IAAjB,CAAzB;;AAEA,MAAG,CAEF,CAFD,CAEC,OAAMS,CAAN,EAAQ;AACLC,IAAAA,KAAK,CAAC,QAAD,CAAL;AACA,UAAMpB,GAAG,CAAC;AACNkB,MAAAA,IAAI,EAACV,aADC;AAENa,MAAAA,KAAK,EAACF;AAFA,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUM,UAAV,GAAsB;AAClB,QAAM3B,UAAU,CAACQ,aAAD,EAAekB,SAAf,CAAhB;AACH;;AAGD,eAAe,UAAUE,OAAV,GAAmB;AAG9B,QAAM9B,GAAG,CAAC,CACNC,IAAI,CAACyB,SAAD,CADE,EAENzB,IAAI,CAAC4B,UAAD,CAFE,CAAD,CAAT;AAKH","sourcesContent":["import axios from 'axios'\r\nimport {all,fork,takeLatest,takeEvery ,put, delay,call} from 'redux-saga/effects'; \r\nimport \r\n    {JOIN_REQUEST,\r\n     JOIN_SUCCESS,\r\n     JOIN_FAILURE,\r\n     LOGIN_REQUEST,\r\n     LOGIN_SUCCESS,\r\n     LOGIN_FAILURE, \r\n    } \r\nfrom '../reducers/auth'; \r\n\r\n\r\nfunction APIJoin(data){\r\n\r\n    return axios.post('/auth',{data},{withCredentials:true}); \r\n\r\n}\r\n\r\nfunction* sagaJoin(action){\r\n    \r\n    try{\r\n       console.log(action, action.data);\r\n        const result = yield call(APIJoin,action.data); \r\n        yield put({\r\n            type:JOIN_SUCCESS,\r\n            data: result,\r\n        }); \r\n\r\n    }catch(e){\r\n\r\n        alert('에러발생'); \r\n\r\n        yield put({\r\n            type:JOIN_FAILURE,\r\n            error:e, \r\n        })\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nfunction* watchJoin(){\r\n    yield takeLatest(JOIN_REQUEST,sagaJoin)\r\n}\r\n\r\nfunction APILogin(data){\r\n    console.log('data=>' , data); \r\n    return axios.post('/auth/login',{data},{withCredentials:true}); \r\n}\r\n\r\n\r\nfunction* sagaLogin(action){\r\n\r\n    const result = yield call(APILogin,action.data); \r\n\r\n    try{\r\n\r\n    }catch(e){\r\n        alert('로그인 에러'); \r\n        yield put({\r\n            type:LOGIN_FAILURE, \r\n            error:e,\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchLogin(){\r\n    yield takeLatest(LOGIN_REQUEST,sagaLogin); \r\n}\r\n\r\n\r\nexport default function* authSag(){\r\n\r\n\r\n    yield all([\r\n        fork(watchJoin), \r\n        fork(watchLogin), \r\n        \r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}