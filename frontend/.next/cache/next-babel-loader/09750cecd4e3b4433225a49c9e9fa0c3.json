{"ast":null,"code":"var _jsxFileName = \"D:\\\\git Repository\\\\PersonalProject_001\\\\frontend\\\\components\\\\mainPosts_1001\\\\mainPosts_1001_comments.js\";\nvar __jsx = React.createElement;\nimport React, { useCallback, useEffect, useState, createRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport custumDateFormat from '../../utilComponent/custumDateFormat';\nimport { DislikeTwoTone, LikeTwoTone } from '@ant-design/icons';\nimport { MAINPOSTS_1001_COMMENTS_REQUEST, MAINPOSTS_1001_COMMENTLIKE_REQUEST } from '../../reducers/mainPosts_1001';\n\nconst Comments1001 = ({\n  createdDate,\n  comment,\n  userNickName,\n  commentId,\n  flag,\n  good,\n  bad,\n  likeBtn,\n  nickName,\n  postFlag,\n  postId\n}) => {\n  const dispatch = useDispatch();\n  const {\n    userInfo\n  } = useSelector(state => state.auth);\n\n  const test = (p1, p2, p3) => {\n    likeBtn(p1, p2, p3);\n  }; // const likeBtn =useCallback((commentid,flag,likeDislike)=>{\n  //     if(!userInfo){\n  //       alert('로그인이 필요한 서비스 입니다.'); \n  //       return;\n  //     }\n  //     //alert(`${commentid},${flag},${likeDislike}`)\n  //     //문자 리터럴로 해야 alert에 변수 들어가진다.\n  //     if(flag === \"Y\"){\n  //       alert('이미 좋아요! 싫어요! 했습니다.'); \n  //       return; \n  //     }else{\n  //         if(likeDislike ===\"good\"){\n  //             setLike(true); \n  //         }else{\n  //             setDisLike(true); \n  //         }\n  //     //댓글 좋아요!\n  //       dispatch({\n  //         type:MAINPOSTS_1001_COMMENTLIKE_REQUEST, \n  //         data:{\n  //           commentid,\n  //           postFlag,\n  //           postId,\n  //           flag: likeDislike ,\n  //           who: userInfo,\n  //           nickName,\n  //         }\n  //     }); \n  //     }\n  //     //댓글 리스트 \n  //     dispatch({\n  //       type:MAINPOSTS_1001_COMMENTS_REQUEST, \n  //       data:{\n  //         postId,\n  //         nickName,\n  //         postFlag,\n  //         who:userInfo, \n  //       }\n  //   }); \n  //    alert(`${likeDislike}`); \n  //   },[]); \n\n\n  return __jsx(\"div\", {\n    className: \"divTableRow\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 17\n    }\n  }, __jsx(\"div\", {\n    className: \"divTableCell\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 21\n    }\n  }, __jsx(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 21\n    }\n  }, userNickName), \" \\xA0 \", __jsx(\"small\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 50\n    }\n  }, custumDateFormat(createdDate)), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 96\n    }\n  }), comment, __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 30\n    }\n  }), \"\\uB2F5\\uAE00 [9]\", __jsx(\"div\", {\n    style: {\n      marginTop: \"1%\",\n      display: \"block\",\n      float: \"right\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 25\n    }\n  }, __jsx(LikeTwoTone, {\n    onClick: () => test(commentId, flag, 'good'),\n    twoToneColor: like ? \"#ff0000\" : \"#1ba640\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 29\n    }\n  }), good, \"\\xA0\\xA0\\xA0\\xA0\", __jsx(DislikeTwoTone, {\n    onClick: () => likeBtn(commentId, flag, 'good'),\n    twoToneColor: disLike ? \"#ff0000\" : \"#1ba640\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 159\n    }\n  }), bad, \"\\xA0\\xA0\\xA0\\xA0\", __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 298\n    }\n  }))));\n};\n\nexport default Comments1001;","map":{"version":3,"sources":["D:/git Repository/PersonalProject_001/frontend/components/mainPosts_1001/mainPosts_1001_comments.js"],"names":["React","useCallback","useEffect","useState","createRef","useDispatch","useSelector","custumDateFormat","DislikeTwoTone","LikeTwoTone","MAINPOSTS_1001_COMMENTS_REQUEST","MAINPOSTS_1001_COMMENTLIKE_REQUEST","Comments1001","createdDate","comment","userNickName","commentId","flag","good","bad","likeBtn","nickName","postFlag","postId","dispatch","userInfo","state","auth","test","p1","p2","p3","marginTop","display","float","like","disLike"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA4BC,SAA5B,EAAuCC,QAAvC,EAAiDC,SAAjD,QAAkE,OAAlE;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAEA,OAAOC,gBAAP,MAA8B,sCAA9B;AACA,SAAQC,cAAR,EAAuBC,WAAvB,QAAyC,mBAAzC;AACA,SAEKC,+BAFL,EAGKC,kCAHL,QAKK,+BALL;;AAOA,MAAMC,YAAY,GAAG,CAAC;AAACC,EAAAA,WAAD;AAAaC,EAAAA,OAAb;AAAqBC,EAAAA,YAArB;AAAkCC,EAAAA,SAAlC;AAA4CC,EAAAA,IAA5C;AAAiDC,EAAAA,IAAjD;AAAsDC,EAAAA,GAAtD;AAA0DC,EAAAA,OAA1D;AAAmEC,EAAAA,QAAnE;AAA4EC,EAAAA,QAA5E;AAAqFC,EAAAA;AAArF,CAAD,KAAiG;AAElH,QAAMC,QAAQ,GAAGnB,WAAW,EAA5B;AACA,QAAM;AAACoB,IAAAA;AAAD,MAAoBnB,WAAW,CAAEoB,KAAD,IAASA,KAAK,CAACC,IAAhB,CAArC;;AAEA,QAAMC,IAAI,GAAG,CAACC,EAAD,EAAIC,EAAJ,EAAOC,EAAP,KAAY;AAErBX,IAAAA,OAAO,CAACS,EAAD,EAAIC,EAAJ,EAAOC,EAAP,CAAP;AACH,GAHD,CALkH,CASlH;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAEA,SACY;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIhB,YAAJ,CADA,YAC6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAQR,gBAAgB,CAACM,WAAD,CAAxB,CAD7B,EAC2E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAD3E,EAECC,OAFD,EAES;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFT,sBAKI;AAAK,IAAA,KAAK,EAAE;AAACkB,MAAAA,SAAS,EAAC,IAAX;AAAgBC,MAAAA,OAAO,EAAC,OAAxB;AAAgCC,MAAAA,KAAK,EAAC;AAAtC,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,WAAD;AAAa,IAAA,OAAO,EAAE,MAAIN,IAAI,CAACZ,SAAD,EAAWC,IAAX,EAAgB,MAAhB,CAA9B;AAAuD,IAAA,YAAY,EAAEkB,IAAI,GAAG,SAAH,GAAe,SAAxF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EACyGjB,IADzG,sBACsI,MAAC,cAAD;AAAgB,IAAA,OAAO,EAAE,MAAIE,OAAO,CAACJ,SAAD,EAAWC,IAAX,EAAgB,MAAhB,CAApC;AAA6D,IAAA,YAAY,EAAEmB,OAAO,GAAG,SAAH,GAAe,SAAjG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADtI,EACqPjB,GADrP,sBACiR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADjR,CALJ,CADJ,CADZ;AAcH,CAxED;;AA0EA,eAAeP,YAAf","sourcesContent":["import React, { useCallback,useEffect, useState, createRef } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport custumDateFormat from  '../../utilComponent/custumDateFormat';\r\nimport {DislikeTwoTone,LikeTwoTone} from '@ant-design/icons'\r\nimport \r\n    {\r\n     MAINPOSTS_1001_COMMENTS_REQUEST, \r\n     MAINPOSTS_1001_COMMENTLIKE_REQUEST,\r\n    } \r\nfrom '../../reducers/mainPosts_1001'; \r\n\r\nconst Comments1001 = ({createdDate,comment,userNickName,commentId,flag,good,bad,likeBtn, nickName,postFlag,postId}) =>{\r\n\r\n    const dispatch = useDispatch(); \r\n    const {userInfo}        = useSelector((state)=>state.auth);\r\n\r\n    const test = (p1,p2,p3)=>{\r\n\r\n        likeBtn(p1,p2,p3); \r\n    }\r\n    // const likeBtn =useCallback((commentid,flag,likeDislike)=>{\r\n    //     if(!userInfo){\r\n    //       alert('로그인이 필요한 서비스 입니다.'); \r\n    //       return;\r\n    //     }\r\n      \r\n    //     //alert(`${commentid},${flag},${likeDislike}`)\r\n    //     //문자 리터럴로 해야 alert에 변수 들어가진다.\r\n    \r\n    //     if(flag === \"Y\"){\r\n    //       alert('이미 좋아요! 싫어요! 했습니다.'); \r\n    //       return; \r\n    \r\n    //     }else{\r\n    //         if(likeDislike ===\"good\"){\r\n    //             setLike(true); \r\n    //         }else{\r\n    //             setDisLike(true); \r\n    //         }\r\n\r\n    //     //댓글 좋아요!\r\n    //       dispatch({\r\n    //         type:MAINPOSTS_1001_COMMENTLIKE_REQUEST, \r\n    //         data:{\r\n    //           commentid,\r\n    //           postFlag,\r\n    //           postId,\r\n    //           flag: likeDislike ,\r\n    //           who: userInfo,\r\n    //           nickName,\r\n    //         }\r\n    //     }); \r\n    \r\n    //     }\r\n    \r\n    //     //댓글 리스트 \r\n    //     dispatch({\r\n    //       type:MAINPOSTS_1001_COMMENTS_REQUEST, \r\n    //       data:{\r\n    //         postId,\r\n    //         nickName,\r\n    //         postFlag,\r\n    //         who:userInfo, \r\n    //       }\r\n    //   }); \r\n    //    alert(`${likeDislike}`); \r\n      \r\n    //   },[]); \r\n\r\n    return (\r\n                <div className='divTableRow' >\r\n                    <div className=\"divTableCell\">\r\n                    <b>{userNickName}</b> &nbsp; <small>{custumDateFormat(createdDate)}</small><br/>\r\n                    {comment}<br />\r\n                    답글 [9]\r\n               \r\n                        <div style={{marginTop:\"1%\",display:\"block\",float:\"right\"}}>{/*#1ba640*/}\r\n                            <LikeTwoTone onClick={()=>test(commentId,flag,'good')} twoToneColor={like ? \"#ff0000\" : \"#1ba640\"}/>{good}&nbsp;&nbsp;&nbsp;&nbsp;<DislikeTwoTone onClick={()=>likeBtn(commentId,flag,'good')} twoToneColor={disLike ? \"#ff0000\" : \"#1ba640\"} />{bad}&nbsp;&nbsp;&nbsp;&nbsp;<br />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Comments1001; "]},"metadata":{},"sourceType":"module"}