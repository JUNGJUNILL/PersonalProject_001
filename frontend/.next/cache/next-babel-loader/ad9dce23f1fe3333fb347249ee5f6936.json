{"ast":null,"code":"var _jsxFileName = \"D:\\\\git Repository\\\\PersonalProject_001\\\\frontend\\\\pages\\\\CKEditor.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useCallback, useRef } from 'react';\nimport { Button, Input, Alert } from 'antd';\nimport CKEditor from '@ckeditor/ckeditor5-react';\nimport ClassicEditor from '@ckeditor/ckeditor5-build-classic';\n\nconst Editor = () => {\n  const {\n    0: content,\n    1: setContent\n  } = useState('');\n\n  const abc = () => {\n    alert(content);\n  };\n\n  return __jsx(\"div\", {\n    className: \"demo-editor\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 9\n    }\n  }, __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 9\n    }\n  }, \"Using CKEditor 5 build in React\"), __jsx(CKEditor, {\n    editor: ClassicEditor,\n    data: \"<p>Hello from CKEditor 5!</p>\",\n    onInit: editor => {\n      // You can store the \"editor\" and use when it is needed.\n      console.log('Editor is ready to use!', editor);\n    },\n    onChange: (event, editor) => {\n      const data = editor.getData();\n      setContent(data);\n      console.log({\n        event,\n        editor,\n        data\n      });\n    },\n    onBlur: (event, editor) => {\n      console.log('Blur.', editor);\n    },\n    onFocus: (event, editor) => {\n      console.log('Focus.', editor);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 9\n    }\n  }), __jsx(Button, {\n    onClick: abc,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }\n  }, \"\\uBC97\\uC740\"));\n};\n\nexport default Editor;","map":{"version":3,"sources":["D:/git Repository/PersonalProject_001/frontend/pages/CKEditor.js"],"names":["useState","useCallback","useRef","Button","Input","Alert","CKEditor","ClassicEditor","Editor","content","setContent","abc","alert","editor","console","log","event","data","getData"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,WAAnB,EAAgCC,MAAhC,QAA8C,OAA9C;AACA,SAAQC,MAAR,EAAgBC,KAAhB,EAAuBC,KAAvB,QAAmC,MAAnC;AACA,OAAOC,QAAP,MAAqB,2BAArB;AACA,OAAOC,aAAP,MAA0B,mCAA1B;;AAGA,MAAMC,MAAM,GAAG,MAAI;AAEf,QAAM;AAAA,OAACC,OAAD;AAAA,OAASC;AAAT,MAAuBV,QAAQ,CAAC,EAAD,CAArC;;AAEA,QAAMW,GAAG,GAAG,MAAI;AACZC,IAAAA,KAAK,CAACH,OAAD,CAAL;AACH,GAFD;;AAIA,SACI;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCADA,EAEA,MAAC,QAAD;AACI,IAAA,MAAM,EAAGF,aADb;AAEI,IAAA,IAAI,EAAC,+BAFT;AAGI,IAAA,MAAM,EAAGM,MAAM,IAAI;AACf;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAa,yBAAb,EAAwCF,MAAxC;AACH,KANL;AAOI,IAAA,QAAQ,EAAG,CAAEG,KAAF,EAASH,MAAT,KAAqB;AAC5B,YAAMI,IAAI,GAAGJ,MAAM,CAACK,OAAP,EAAb;AACAR,MAAAA,UAAU,CAACO,IAAD,CAAV;AACAH,MAAAA,OAAO,CAACC,GAAR,CAAa;AAAEC,QAAAA,KAAF;AAASH,QAAAA,MAAT;AAAiBI,QAAAA;AAAjB,OAAb;AACH,KAXL;AAYI,IAAA,MAAM,EAAG,CAAED,KAAF,EAASH,MAAT,KAAqB;AAC1BC,MAAAA,OAAO,CAACC,GAAR,CAAa,OAAb,EAAsBF,MAAtB;AACH,KAdL;AAeI,IAAA,OAAO,EAAG,CAAEG,KAAF,EAASH,MAAT,KAAqB;AAC3BC,MAAAA,OAAO,CAACC,GAAR,CAAa,QAAb,EAAuBF,MAAvB;AACH,KAjBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFA,EAqBA,MAAC,MAAD;AAAQ,IAAA,OAAO,EAAEF,GAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBArBA,CADJ;AA4BH,CApCD;;AAuCA,eAAeH,MAAf","sourcesContent":["import { useState, useCallback, useRef } from 'react';\r\nimport {Button, Input, Alert} from 'antd'\r\nimport CKEditor from '@ckeditor/ckeditor5-react';\r\nimport ClassicEditor from '@ckeditor/ckeditor5-build-classic';\r\n\r\n\r\nconst Editor = ()=>{\r\n\r\n    const [content,setContent] = useState(''); \r\n\r\n    const abc = ()=>{\r\n        alert(content); \r\n    }\r\n\r\n    return(\r\n        <div className=\"demo-editor\">\r\n        <h2>Using CKEditor 5 build in React</h2>\r\n        <CKEditor\r\n            editor={ ClassicEditor }\r\n            data=\"<p>Hello from CKEditor 5!</p>\"\r\n            onInit={ editor => {\r\n                // You can store the \"editor\" and use when it is needed.\r\n                console.log( 'Editor is ready to use!', editor );\r\n            } }\r\n            onChange={ ( event, editor ) => {\r\n                const data = editor.getData();\r\n                setContent(data); \r\n                console.log( { event, editor, data } );\r\n            } }\r\n            onBlur={ ( event, editor ) => {\r\n                console.log( 'Blur.', editor );\r\n            } }\r\n            onFocus={ ( event, editor ) => {\r\n                console.log( 'Focus.', editor );\r\n            } }\r\n        />\r\n        <Button onClick={abc}>벗은</Button>\r\n        </div>\r\n       \r\n\r\n    )\r\n\r\n} \r\n\r\n\r\nexport default Editor; "]},"metadata":{},"sourceType":"module"}