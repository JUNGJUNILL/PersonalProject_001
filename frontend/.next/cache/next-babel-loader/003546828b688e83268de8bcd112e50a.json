{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport axios from 'axios';\nimport { all, fork, takeLatest, takeEvery, put, delay, call } from 'redux-saga/effects';\nimport { MAINPOSTS_1001_LIST_REQUEST, MAINPOSTS_1001_LIST_SUCCESS, MAINPOSTS_1001_LIST_FAILURE, MAINPOSTS_1001_DETAIL_INFO_REQUEST, MAINPOSTS_1001_DETAIL_INFO_SUCCESS, MAINPOSTS_1001_DETAIL_INFO_FAILURE, MAINPOSTS_1001_COMMENTS_REQUEST, MAINPOSTS_1001_COMMENTS_SUCCESS, MAINPOSTS_1001_COMMENTS_FAILURE, MAINPOSTS_1001_COMMENTINSERT_REQUEST, MAINPOSTS_1001_COMMENTINSERT_SUCCESS, MAINPOSTS_1001_COMMENTINSERT_FAILURE, MAINPOSTS_1001_COMMENTLIKE_REQUEST, MAINPOSTS_1001_COMMENTLIKE_SUCCESS, MAINPOSTS_1001_COMMENTLIKE_FAILURE, MAINPOSTS_1001_COMMENTBYCOMMENT_REQUEST, MAINPOSTS_1001_COMMENTBYCOMMENT_SUCCESS, MAINPOSTS_1001_COMMENTBYCOMMENT_FAILURE, MAINPOSTS_1001_COMMENTBYCOMMENTINSERT_REQUEST, MAINPOSTS_1001_COMMENTBYCOMMENTINSERT_SUCCESS, MAINPOSTS_1001_COMMENTBYCOMMENTINSERT_FAILURE, MAINPOSTS_1001_COMMENTBYCOMMENTLIKE_REQUEST, MAINPOSTS_1001_COMMENTBYCOMMENTLIKE_SUCCESS, MAINPOSTS_1001_COMMENTBYCOMMENTLIKE_FAILURE } from '../reducers/mainPosts_1001'; //mainPost_1001 리스트 \n//-----------------------------------------------------------------------------------\n\nfunction APImainPosts_1001List(data) {\n  return axios.post('/mainPosts_1001', {\n    data\n  }, {\n    withCredentials: true\n  });\n}\n\nfunction* sagaMainPosts_1001List(action) {\n  try {\n    const result = yield call(APImainPosts_1001List, action.data);\n    yield put({\n      type: MAINPOSTS_1001_LIST_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e);\n    alert('error', e);\n    yield put({\n      type: MAINPOSTS_1001_LIST_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchMainPosts_1001() {\n  yield takeLatest(MAINPOSTS_1001_LIST_REQUEST, sagaMainPosts_1001List);\n} //-----------------------------------------------------------------------------------\n//mainPost_1001 상세정보 \n//-----------------------------------------------------------------------------------\n\n\nfunction APImainPosts_1001Detail(data) {\n  return axios.post('/mainPosts_1001/mainPosts_1001Detail', {\n    data\n  }, {\n    withCredentials: true\n  });\n}\n\nfunction* sagaMainPosts_1001Detail(action) {\n  try {\n    const result = yield call(APImainPosts_1001Detail, action.data);\n    yield put({\n      type: MAINPOSTS_1001_DETAIL_INFO_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e);\n    alert('error', e);\n    yield put({\n      type: MAINPOSTS_1001_DETAIL_INFO_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchMainPosts_1001Detail() {\n  yield takeLatest(MAINPOSTS_1001_DETAIL_INFO_REQUEST, sagaMainPosts_1001Detail);\n} //-----------------------------------------------------------------------------------\n//mainPost_1001 상세 정보 댓글 리스트\n//-----------------------------------------------------------------------------------\n\n\nfunction APImainPosts_1001CommentList(data) {\n  return axios.post('/mainPosts_1001/mainPosts_1001Comments', {\n    data\n  }, {\n    withCredentials: true\n  });\n}\n\nfunction* sagaMainPosts_1001CommentList(action) {\n  try {\n    const result = yield call(APImainPosts_1001CommentList, action.data);\n    yield put({\n      type: MAINPOSTS_1001_COMMENTS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e);\n    alert('error', e);\n    yield put({\n      type: MAINPOSTS_1001_COMMENTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchMainPosts_1001CommentList() {\n  yield takeLatest(MAINPOSTS_1001_COMMENTS_REQUEST, sagaMainPosts_1001CommentList);\n} //-----------------------------------------------------------------------------------\n//mainPost_1001 상세 정보 대댓글 리스트\n//-----------------------------------------------------------------------------------\n\n\nfunction APImainPosts_1001CommentByCommentList(data) {\n  return axios.post('/mainPosts_1001/mainPosts_1001CommentByComments', {\n    data\n  }, {\n    withCredentials: true\n  });\n}\n\nfunction* sagaMainPosts_1001CommentByCommentList(action) {\n  try {\n    const result = yield call(APImainPosts_1001CommentByCommentList, action.data);\n    yield put({\n      type: MAINPOSTS_1001_COMMENTBYCOMMENT_SUCCESS,\n      data: {\n        array: result.data,\n        param: action.data\n      }\n    });\n  } catch (e) {\n    console.error(e);\n    alert('error', e);\n    yield put({\n      type: MAINPOSTS_1001_COMMENTBYCOMMENT_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchMainPosts_1001CommentByCommentList() {\n  yield takeLatest(MAINPOSTS_1001_COMMENTBYCOMMENT_REQUEST, sagaMainPosts_1001CommentByCommentList);\n} //-----------------------------------------------------------------------------------\n//mainPost_1001 댓글 입력\n//-----------------------------------------------------------------------------------\n\n\nfunction APImainPosts_1001CommentInsert(data) {\n  return axios.post('/mainPosts_1001/mainPosts_1001CommentInsert', {\n    data\n  }, {\n    withCredentials: true\n  });\n}\n\nfunction* sagaMainPosts_1001CommentInsert(action) {\n  try {\n    const result = yield call(APImainPosts_1001CommentInsert, action.data);\n    const array = [];\n    result.data.map((v, i) => {\n      result.data[0].kk = 'addComment';\n      array.push(v);\n    });\n    yield put({\n      type: MAINPOSTS_1001_COMMENTINSERT_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e);\n    alert('error', e);\n    yield put({\n      type: MAINPOSTS_1001_COMMENTINSERT_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchMainPosts_1001CommentInsert() {\n  yield takeLatest(MAINPOSTS_1001_COMMENTINSERT_REQUEST, sagaMainPosts_1001CommentInsert);\n} //-----------------------------------------------------------------------------------\n//mainPost_1001 대댓글 입력\n//-----------------------------------------------------------------------------------\n\n\nfunction APImainPosts_1001CommentByCommentInsert(data) {\n  return axios.post('/mainPosts_1001/mainPosts_1001CommentByCommentInsert', {\n    data\n  }, {\n    withCredentials: true\n  });\n}\n\nfunction* sagaMainPosts_1001CommentByCommentInsert(action) {\n  try {\n    const result = yield call(APImainPosts_1001CommentByCommentInsert, action.data);\n    yield put({\n      type: MAINPOSTS_1001_COMMENTBYCOMMENTINSERT_SUCCESS,\n      data: {\n        array: result.data,\n        param: action.data\n      }\n    });\n  } catch (e) {\n    console.error(e);\n    alert('error', e);\n    yield put({\n      type: MAINPOSTS_1001_COMMENTBYCOMMENTINSERT_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchMainPosts_1001CommentByCommentInsert() {\n  yield takeLatest(MAINPOSTS_1001_COMMENTBYCOMMENTINSERT_REQUEST, sagaMainPosts_1001CommentByCommentInsert);\n} //-----------------------------------------------------------------------------------\n//mainPost_1001 댓글 LIKE / DISLIKE \n//-----------------------------------------------------------------------------------\n\n\nfunction APImainPosts_1001CommentLike(data) {\n  return axios.post('/mainPosts_1001/mainPosts_1001CommentLike', {\n    data\n  }, {\n    withCredentials: true\n  });\n}\n\nfunction* sagaMainPosts_1001CommentLike(action) {\n  try {\n    const result = yield call(APImainPosts_1001CommentLike, action.data);\n    action.data.mainPosts_1001Comments.map((v, i) => {\n      if (v.commentId === action.data.commentid) {\n        action.data.mainPosts_1001Comments[i] = _objectSpread(_objectSpread({}, action.data.mainPosts_1001Comments[i]), {}, {\n          clickedComponent: action.data.commentid,\n          flag: 'Y',\n          likeDislikeflag: action.data.flag\n        });\n      }\n    });\n    yield put({\n      type: MAINPOSTS_1001_COMMENTLIKE_SUCCESS,\n      //이런식으로도 리듀서에 데이터를 보낼 수 있다. \n      //data:{array : action.data.mainPosts_1001Comments, values :action.data.commentid },\n      data: action.data.mainPosts_1001Comments\n    });\n  } catch (e) {\n    console.error(e);\n    alert('error', e);\n    yield put({\n      type: MAINPOSTS_1001_COMMENTLIKE_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchMainPosts_1001CommentLike() {\n  yield takeLatest(MAINPOSTS_1001_COMMENTLIKE_REQUEST, sagaMainPosts_1001CommentLike);\n} //-----------------------------------------------------------------------------------\n//mainPost_1001 대댓글 LIKE / DISLIKE \n//-----------------------------------------------------------------------------------\n\n\nfunction APImainPosts_1001CommentByCommentsLike(data) {\n  return axios.post('/mainPosts_1001/mainPosts_1001CommentByCommentsLike', {\n    data\n  }, {\n    withCredentials: true\n  });\n}\n\nfunction* sagaMainPosts_1001CommentByCommentsLike(action) {\n  try {\n    const result = yield call(APImainPosts_1001CommentByCommentsLike, action.data);\n    console.log('mainPosts_1001CommentByComments=>', action.data.mainPosts_1001CommentByComments);\n    yield put({\n      type: MAINPOSTS_1001_COMMENTBYCOMMENTLIKE_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e);\n    alert('error', e);\n    yield put({\n      type: MAINPOSTS_1001_COMMENTBYCOMMENTLIKE_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchMainPosts_1001CommentByCommentsLike() {\n  yield takeLatest(MAINPOSTS_1001_COMMENTBYCOMMENTLIKE_REQUEST, sagaMainPosts_1001CommentByCommentsLike);\n} //-----------------------------------------------------------------------------------\n\n\nexport default function* mainPosts_1001Saga() {\n  yield all([fork(watchMainPosts_1001), fork(watchMainPosts_1001Detail), fork(watchMainPosts_1001CommentList), fork(watchMainPosts_1001CommentInsert), fork(watchMainPosts_1001CommentLike), fork(watchMainPosts_1001CommentByCommentList), fork(watchMainPosts_1001CommentByCommentInsert), fork(watchMainPosts_1001CommentByCommentsLike)]);\n}","map":{"version":3,"sources":["D:/git Repository/PersonalProject_001/frontend/sagas/mainPosts_1001Saga.js"],"names":["axios","all","fork","takeLatest","takeEvery","put","delay","call","MAINPOSTS_1001_LIST_REQUEST","MAINPOSTS_1001_LIST_SUCCESS","MAINPOSTS_1001_LIST_FAILURE","MAINPOSTS_1001_DETAIL_INFO_REQUEST","MAINPOSTS_1001_DETAIL_INFO_SUCCESS","MAINPOSTS_1001_DETAIL_INFO_FAILURE","MAINPOSTS_1001_COMMENTS_REQUEST","MAINPOSTS_1001_COMMENTS_SUCCESS","MAINPOSTS_1001_COMMENTS_FAILURE","MAINPOSTS_1001_COMMENTINSERT_REQUEST","MAINPOSTS_1001_COMMENTINSERT_SUCCESS","MAINPOSTS_1001_COMMENTINSERT_FAILURE","MAINPOSTS_1001_COMMENTLIKE_REQUEST","MAINPOSTS_1001_COMMENTLIKE_SUCCESS","MAINPOSTS_1001_COMMENTLIKE_FAILURE","MAINPOSTS_1001_COMMENTBYCOMMENT_REQUEST","MAINPOSTS_1001_COMMENTBYCOMMENT_SUCCESS","MAINPOSTS_1001_COMMENTBYCOMMENT_FAILURE","MAINPOSTS_1001_COMMENTBYCOMMENTINSERT_REQUEST","MAINPOSTS_1001_COMMENTBYCOMMENTINSERT_SUCCESS","MAINPOSTS_1001_COMMENTBYCOMMENTINSERT_FAILURE","MAINPOSTS_1001_COMMENTBYCOMMENTLIKE_REQUEST","MAINPOSTS_1001_COMMENTBYCOMMENTLIKE_SUCCESS","MAINPOSTS_1001_COMMENTBYCOMMENTLIKE_FAILURE","APImainPosts_1001List","data","post","withCredentials","sagaMainPosts_1001List","action","result","type","e","console","error","alert","watchMainPosts_1001","APImainPosts_1001Detail","sagaMainPosts_1001Detail","watchMainPosts_1001Detail","APImainPosts_1001CommentList","sagaMainPosts_1001CommentList","watchMainPosts_1001CommentList","APImainPosts_1001CommentByCommentList","sagaMainPosts_1001CommentByCommentList","array","param","watchMainPosts_1001CommentByCommentList","APImainPosts_1001CommentInsert","sagaMainPosts_1001CommentInsert","map","v","i","kk","push","watchMainPosts_1001CommentInsert","APImainPosts_1001CommentByCommentInsert","sagaMainPosts_1001CommentByCommentInsert","watchMainPosts_1001CommentByCommentInsert","APImainPosts_1001CommentLike","sagaMainPosts_1001CommentLike","mainPosts_1001Comments","commentId","commentid","clickedComponent","flag","likeDislikeflag","watchMainPosts_1001CommentLike","APImainPosts_1001CommentByCommentsLike","sagaMainPosts_1001CommentByCommentsLike","log","mainPosts_1001CommentByComments","watchMainPosts_1001CommentByCommentsLike","mainPosts_1001Saga"],"mappings":"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","sourcesContent":["import axios from 'axios'\r\nimport {all,fork,takeLatest,takeEvery ,put, delay,call} from 'redux-saga/effects'; \r\nimport \r\n    {\r\n        MAINPOSTS_1001_LIST_REQUEST,\r\n        MAINPOSTS_1001_LIST_SUCCESS,\r\n        MAINPOSTS_1001_LIST_FAILURE,    \r\n\r\n        MAINPOSTS_1001_DETAIL_INFO_REQUEST,\r\n        MAINPOSTS_1001_DETAIL_INFO_SUCCESS,\r\n        MAINPOSTS_1001_DETAIL_INFO_FAILURE,\r\n\r\n        MAINPOSTS_1001_COMMENTS_REQUEST, \r\n        MAINPOSTS_1001_COMMENTS_SUCCESS, \r\n        MAINPOSTS_1001_COMMENTS_FAILURE, \r\n\r\n        MAINPOSTS_1001_COMMENTINSERT_REQUEST,\r\n        MAINPOSTS_1001_COMMENTINSERT_SUCCESS,\r\n        MAINPOSTS_1001_COMMENTINSERT_FAILURE, \r\n\r\n        MAINPOSTS_1001_COMMENTLIKE_REQUEST,\r\n        MAINPOSTS_1001_COMMENTLIKE_SUCCESS,\r\n        MAINPOSTS_1001_COMMENTLIKE_FAILURE,\r\n        \r\n        MAINPOSTS_1001_COMMENTBYCOMMENT_REQUEST,\r\n        MAINPOSTS_1001_COMMENTBYCOMMENT_SUCCESS,\r\n        MAINPOSTS_1001_COMMENTBYCOMMENT_FAILURE,\r\n\r\n        MAINPOSTS_1001_COMMENTBYCOMMENTINSERT_REQUEST,\r\n        MAINPOSTS_1001_COMMENTBYCOMMENTINSERT_SUCCESS,\r\n        MAINPOSTS_1001_COMMENTBYCOMMENTINSERT_FAILURE, \r\n\r\n        MAINPOSTS_1001_COMMENTBYCOMMENTLIKE_REQUEST,\r\n        MAINPOSTS_1001_COMMENTBYCOMMENTLIKE_SUCCESS,\r\n        MAINPOSTS_1001_COMMENTBYCOMMENTLIKE_FAILURE,\r\n\r\n    } \r\nfrom '../reducers/mainPosts_1001'; \r\n\r\n\r\n\r\n//mainPost_1001 리스트 \r\n//-----------------------------------------------------------------------------------\r\nfunction APImainPosts_1001List(data){\r\n    return axios.post('/mainPosts_1001',{data},{withCredentials:true})\r\n}\r\n\r\nfunction* sagaMainPosts_1001List(action){\r\n\r\n    try{\r\n      const result = yield call(APImainPosts_1001List,action.data);  \r\n\r\n      yield  put({\r\n            type:MAINPOSTS_1001_LIST_SUCCESS, \r\n            data:result.data,\r\n        });\r\n\r\n    }catch(e){\r\n\r\n        console.error(e); \r\n        alert('error', e); \r\n        yield put({\r\n            type:MAINPOSTS_1001_LIST_FAILURE, \r\n            error: e, \r\n        }); \r\n    }\r\n}\r\n\r\nfunction* watchMainPosts_1001(){\r\n    yield takeLatest(MAINPOSTS_1001_LIST_REQUEST,sagaMainPosts_1001List); \r\n}\r\n//-----------------------------------------------------------------------------------\r\n\r\n\r\n\r\n\r\n//mainPost_1001 상세정보 \r\n//-----------------------------------------------------------------------------------\r\nfunction APImainPosts_1001Detail(data){\r\n    return axios.post('/mainPosts_1001/mainPosts_1001Detail',{data},{withCredentials:true})\r\n}\r\n\r\nfunction* sagaMainPosts_1001Detail(action){\r\n\r\n    try{\r\n      const result = yield call(APImainPosts_1001Detail,action.data); \r\n      yield  put({\r\n            type:MAINPOSTS_1001_DETAIL_INFO_SUCCESS, \r\n            data:result.data,\r\n        });\r\n\r\n    }catch(e){\r\n\r\n        console.error(e); \r\n        alert('error', e); \r\n        yield put({\r\n            type:MAINPOSTS_1001_DETAIL_INFO_FAILURE, \r\n            error: e, \r\n        }); \r\n    }\r\n}\r\n\r\nfunction* watchMainPosts_1001Detail(){\r\n    yield takeLatest(MAINPOSTS_1001_DETAIL_INFO_REQUEST,sagaMainPosts_1001Detail); \r\n}\r\n//-----------------------------------------------------------------------------------\r\n\r\n\r\n\r\n//mainPost_1001 상세 정보 댓글 리스트\r\n//-----------------------------------------------------------------------------------\r\nfunction APImainPosts_1001CommentList(data){\r\n    return axios.post('/mainPosts_1001/mainPosts_1001Comments',{data},{withCredentials:true})\r\n}\r\n\r\n\r\nfunction* sagaMainPosts_1001CommentList(action){\r\n\r\n    try{\r\n      const result = yield call(APImainPosts_1001CommentList,action.data); \r\n      yield  put({\r\n            type:MAINPOSTS_1001_COMMENTS_SUCCESS, \r\n            data:result.data,\r\n        });\r\n\r\n    }catch(e){\r\n\r\n        console.error(e); \r\n        alert('error', e); \r\n        yield put({\r\n            type:MAINPOSTS_1001_COMMENTS_FAILURE, \r\n            error: e, \r\n        }); \r\n    }\r\n}\r\n\r\n\r\nfunction* watchMainPosts_1001CommentList(){\r\n    yield takeLatest(MAINPOSTS_1001_COMMENTS_REQUEST,sagaMainPosts_1001CommentList); \r\n}\r\n//-----------------------------------------------------------------------------------\r\n\r\n\r\n//mainPost_1001 상세 정보 대댓글 리스트\r\n//-----------------------------------------------------------------------------------\r\n\r\nfunction APImainPosts_1001CommentByCommentList(data){\r\n    return axios.post('/mainPosts_1001/mainPosts_1001CommentByComments',{data},{withCredentials:true})\r\n}\r\n\r\n\r\nfunction* sagaMainPosts_1001CommentByCommentList(action){\r\n\r\n    try{\r\n      const result = yield call(APImainPosts_1001CommentByCommentList,action.data); \r\n      yield  put({\r\n            type:MAINPOSTS_1001_COMMENTBYCOMMENT_SUCCESS, \r\n            data:{array:result.data, param:action.data},\r\n        });\r\n\r\n    }catch(e){\r\n\r\n        console.error(e); \r\n        alert('error', e); \r\n        yield put({\r\n            type:MAINPOSTS_1001_COMMENTBYCOMMENT_FAILURE, \r\n            error: e, \r\n        }); \r\n    }\r\n}\r\n\r\n\r\nfunction* watchMainPosts_1001CommentByCommentList(){\r\n    yield takeLatest(MAINPOSTS_1001_COMMENTBYCOMMENT_REQUEST,sagaMainPosts_1001CommentByCommentList); \r\n}\r\n//-----------------------------------------------------------------------------------\r\n\r\n\r\n\r\n\r\n\r\n\r\n//mainPost_1001 댓글 입력\r\n//-----------------------------------------------------------------------------------\r\nfunction APImainPosts_1001CommentInsert(data){\r\n    return axios.post('/mainPosts_1001/mainPosts_1001CommentInsert',{data},{withCredentials:true})\r\n}\r\n\r\n\r\nfunction* sagaMainPosts_1001CommentInsert(action){\r\n\r\n    try{\r\n      const result = yield call(APImainPosts_1001CommentInsert,action.data); \r\n      const array=[]; \r\n      result.data.map((v,i)=>{\r\n        result.data[0].kk='addComment'; \r\n        array.push(v); \r\n      }); \r\n      \r\n\r\n      yield  put({\r\n            type:MAINPOSTS_1001_COMMENTINSERT_SUCCESS, \r\n            data:result.data,\r\n        });\r\n\r\n    }catch(e){\r\n\r\n        console.error(e); \r\n        alert('error', e); \r\n        yield put({\r\n            type:MAINPOSTS_1001_COMMENTINSERT_FAILURE, \r\n            error: e, \r\n        }); \r\n    }\r\n}\r\n\r\n\r\nfunction* watchMainPosts_1001CommentInsert(){\r\n    yield takeLatest(MAINPOSTS_1001_COMMENTINSERT_REQUEST,sagaMainPosts_1001CommentInsert); \r\n}\r\n//-----------------------------------------------------------------------------------\r\n\r\n//mainPost_1001 대댓글 입력\r\n//-----------------------------------------------------------------------------------\r\nfunction APImainPosts_1001CommentByCommentInsert(data){\r\n    return axios.post('/mainPosts_1001/mainPosts_1001CommentByCommentInsert',{data},{withCredentials:true})\r\n}\r\n\r\n\r\nfunction* sagaMainPosts_1001CommentByCommentInsert(action){\r\n\r\n    try{\r\n      const result = yield call(APImainPosts_1001CommentByCommentInsert,action.data); \r\n\r\n      yield  put({\r\n            type:MAINPOSTS_1001_COMMENTBYCOMMENTINSERT_SUCCESS,\r\n            data:{array:result.data, param:action.data},\r\n        });\r\n\r\n    }catch(e){\r\n\r\n        console.error(e); \r\n        alert('error', e); \r\n        yield put({\r\n            \r\n            type:MAINPOSTS_1001_COMMENTBYCOMMENTINSERT_FAILURE, \r\n            error: e, \r\n        }); \r\n    }\r\n}\r\n\r\n\r\nfunction* watchMainPosts_1001CommentByCommentInsert(){\r\n    yield takeLatest(MAINPOSTS_1001_COMMENTBYCOMMENTINSERT_REQUEST,sagaMainPosts_1001CommentByCommentInsert); \r\n}\r\n//-----------------------------------------------------------------------------------\r\n\r\n\r\n\r\n\r\n//mainPost_1001 댓글 LIKE / DISLIKE \r\n//-----------------------------------------------------------------------------------\r\nfunction APImainPosts_1001CommentLike(data){\r\n    return axios.post('/mainPosts_1001/mainPosts_1001CommentLike',{data},{withCredentials:true})\r\n}\r\n\r\n\r\nfunction* sagaMainPosts_1001CommentLike(action){\r\n\r\n    try{\r\n      const result = yield call(APImainPosts_1001CommentLike,action.data); \r\n     \r\n        action.data.mainPosts_1001Comments.map((v,i)=>{\r\n            if(v.commentId === action.data.commentid){\r\n                action.data.mainPosts_1001Comments[i] = {...action.data.mainPosts_1001Comments[i], \r\n                                                            clickedComponent:action.data.commentid,\r\n                                                            flag:'Y', \r\n                                                            likeDislikeflag:action.data.flag}\r\n            }\r\n        }); \r\n        \r\n      yield  put({\r\n            type:MAINPOSTS_1001_COMMENTLIKE_SUCCESS, \r\n            //이런식으로도 리듀서에 데이터를 보낼 수 있다. \r\n            //data:{array : action.data.mainPosts_1001Comments, values :action.data.commentid },\r\n            data:action.data.mainPosts_1001Comments,\r\n        });\r\n\r\n    }catch(e){\r\n\r\n        console.error(e); \r\n        alert('error', e); \r\n        yield put({\r\n            type:MAINPOSTS_1001_COMMENTLIKE_FAILURE, \r\n            error: e, \r\n        }); \r\n    }\r\n}\r\n\r\n\r\nfunction* watchMainPosts_1001CommentLike(){\r\n    yield takeLatest(MAINPOSTS_1001_COMMENTLIKE_REQUEST,sagaMainPosts_1001CommentLike); \r\n}\r\n//-----------------------------------------------------------------------------------\r\n\r\n\r\n\r\n//mainPost_1001 대댓글 LIKE / DISLIKE \r\n//-----------------------------------------------------------------------------------\r\nfunction APImainPosts_1001CommentByCommentsLike(data){\r\n    return axios.post('/mainPosts_1001/mainPosts_1001CommentByCommentsLike',{data},{withCredentials:true})\r\n}\r\n\r\n\r\nfunction* sagaMainPosts_1001CommentByCommentsLike(action){\r\n\r\n    try{\r\n      const result = yield call(APImainPosts_1001CommentByCommentsLike,action.data); \r\n     console.log('mainPosts_1001CommentByComments=>',action.data.mainPosts_1001CommentByComments); \r\n        \r\n      yield  put({\r\n            type:MAINPOSTS_1001_COMMENTBYCOMMENTLIKE_SUCCESS, \r\n            data:result.data\r\n        });\r\n\r\n    }catch(e){\r\n\r\n        console.error(e); \r\n        alert('error', e); \r\n        yield put({\r\n            type:MAINPOSTS_1001_COMMENTBYCOMMENTLIKE_FAILURE, \r\n            error: e, \r\n        }); \r\n    }\r\n}\r\n\r\n\r\nfunction* watchMainPosts_1001CommentByCommentsLike(){\r\n    yield takeLatest(MAINPOSTS_1001_COMMENTBYCOMMENTLIKE_REQUEST,sagaMainPosts_1001CommentByCommentsLike); \r\n}\r\n//-----------------------------------------------------------------------------------\r\n\r\n\r\n\r\n\r\nexport default function* mainPosts_1001Saga(){\r\n\r\n    yield all([\r\n        fork(watchMainPosts_1001), \r\n        fork(watchMainPosts_1001Detail), \r\n        fork(watchMainPosts_1001CommentList), \r\n        fork(watchMainPosts_1001CommentInsert), \r\n        fork(watchMainPosts_1001CommentLike), \r\n        fork(watchMainPosts_1001CommentByCommentList), \r\n        fork(watchMainPosts_1001CommentByCommentInsert), \r\n        fork(watchMainPosts_1001CommentByCommentsLike), \r\n     ])\r\n}"]},"metadata":{},"sourceType":"module"}