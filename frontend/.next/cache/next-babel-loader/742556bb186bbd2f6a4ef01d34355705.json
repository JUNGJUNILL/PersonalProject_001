{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(sagaJoin),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchJoin),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(authSag);\n\nimport axios from 'axios';\nimport { all, fork, takeLatest, takeEvery, put, delay, call } from 'redux-saga/effects';\nimport { JOIN_REQUEST, JOIN_SUCCESS, JOIN_FAILURE } from '../reducers/auth';\n\nfunction APIJoin(data) {\n  return axios.post('/auth', {\n    data: data\n  }, {\n    withCredentials: true\n  });\n}\n\n_c = APIJoin;\n\nfunction sagaJoin(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function sagaJoin$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(APIJoin, action.data);\n\n        case 3:\n          result = _context.sent;\n          _context.next = 6;\n          return put({\n            type: JOIN_SUCCESS,\n            data: result\n          });\n\n        case 6:\n          _context.next = 13;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0);\n          _context.next = 13;\n          return {\n            put: {\n              type: JOIN_FAILURE,\n              error: _context.t0\n            }\n          };\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\n\nfunction watchJoin() {\n  return _regeneratorRuntime.wrap(function watchJoin$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(JOIN_REQUEST, sagaJoin);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nexport default function authSag() {\n  return _regeneratorRuntime.wrap(function authSag$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([fork(watchJoin)]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"APIJoin\");","map":{"version":3,"sources":["C:/git Repository/PersonalProject_001/frontend/sagas/authSaga.js"],"names":["sagaJoin","watchJoin","authSag","axios","all","fork","takeLatest","takeEvery","put","delay","call","JOIN_REQUEST","JOIN_SUCCESS","JOIN_FAILURE","APIJoin","data","post","withCredentials","action","result","type","console","error"],"mappings":";;oDAgBUA,Q;qDAsBAC,S;qDAKeC,O;;AA3CzB,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAQC,GAAR,EAAYC,IAAZ,EAAiBC,UAAjB,EAA4BC,SAA5B,EAAuCC,GAAvC,EAA4CC,KAA5C,EAAkDC,IAAlD,QAA6D,oBAA7D;AACA,SACKC,YADL,EAEKC,YAFL,EAGKC,YAHL,QAKK,kBALL;;AAQA,SAASC,OAAT,CAAiBC,IAAjB,EAAsB;AAElB,SAAOZ,KAAK,CAACa,IAAN,CAAW,OAAX,EAAmB;AAACD,IAAAA,IAAI,EAAJA;AAAD,GAAnB,EAA0B;AAACE,IAAAA,eAAe,EAAC;AAAjB,GAA1B,CAAP;AAEH;;KAJQH,O;;AAMT,SAAUd,QAAV,CAAmBkB,MAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIuB,iBAAMR,IAAI,CAACI,OAAD,EAASI,MAAM,CAACH,IAAhB,CAAV;;AAJvB;AAIcI,UAAAA,MAJd;AAAA;AAKQ,iBAAMX,GAAG,CAAC;AACNY,YAAAA,IAAI,EAACR,YADC;AAENG,YAAAA,IAAI,EAAEI;AAFA,WAAD,CAAT;;AALR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAYQE,UAAAA,OAAO,CAACC,KAAR;AAZR;AAcQ,iBAAM;AAACd,YAAAA,GAAG,EAAC;AACPY,cAAAA,IAAI,EAACP,YADE;AAEPS,cAAAA,KAAK;AAFE;AAAL,WAAN;;AAdR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAsBA,SAAUrB,SAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMK,UAAU,CAACK,YAAD,EAAcX,QAAd,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKA,eAAe,SAAUE,OAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAGX,iBAAME,GAAG,CAAC,CACNC,IAAI,CAACJ,SAAD,CADE,CAAD,CAAT;;AAHW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import axios from 'axios'\r\nimport {all,fork,takeLatest,takeEvery ,put, delay,call} from 'redux-saga/effects'; \r\nimport \r\n    {JOIN_REQUEST,\r\n     JOIN_SUCCESS,\r\n     JOIN_FAILURE\r\n    } \r\nfrom '../reducers/auth'; \r\n\r\n\r\nfunction APIJoin(data){\r\n\r\n    return axios.post('/auth',{data},{withCredentials:true}); \r\n\r\n}\r\n\r\nfunction* sagaJoin(action){\r\n    \r\n    try{\r\n\r\n        const result = yield call(APIJoin,action.data); \r\n        yield put({\r\n            type:JOIN_SUCCESS,\r\n            data: result,\r\n        }); \r\n\r\n    }catch(e){\r\n\r\n        console.error(e); \r\n\r\n        yield({put:{\r\n            type:JOIN_FAILURE,\r\n            error:e, \r\n        }});\r\n    }\r\n\r\n}\r\n\r\nfunction* watchJoin(){\r\n    yield takeLatest(JOIN_REQUEST,sagaJoin)\r\n}\r\n\r\n\r\nexport default function* authSag(){\r\n\r\n\r\n    yield all([\r\n        fork(watchJoin), \r\n        \r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}