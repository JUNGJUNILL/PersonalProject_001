{"ast":null,"code":"var _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nvar MyUploadAdapter = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function MyUploadAdapter(loader) {\n    _classCallCheck(this, MyUploadAdapter);\n\n    // The file loader instance to use during the upload.\n    this.loader = loader;\n  } // Starts the upload process.\n\n\n  _createClass(MyUploadAdapter, [{\n    key: \"upload\",\n    value: function upload() {\n      var _this = this;\n\n      return this.loader.file.then(function (file) {\n        return new Promise(function (resolve, reject) {\n          _this._initRequest();\n\n          _this._initListeners(resolve, reject, file);\n\n          _this._sendRequest(file);\n        });\n      });\n    } // Aborts the upload process.\n\n  }, {\n    key: \"abort\",\n    value: function abort() {\n      if (this.xhr) {\n        this.xhr.abort();\n      }\n    } // Initializes the XMLHttpRequest object using the URL passed to the constructor.\n\n  }, {\n    key: \"_initRequest\",\n    value: function _initRequest() {\n      var xhr = this.xhr = new XMLHttpRequest(); // Note that your request may look different. It is up to you and your editor\n      // integration to choose the right communication channel. This example uses\n      // a POST request with JSON as a data structure but your configuration\n      // could be different.\n\n      xhr.open('POST', 'http://example.com/image/upload/path', true);\n      xhr.responseType = 'json';\n    } // Initializes XMLHttpRequest listeners.\n\n  }, {\n    key: \"_initListeners\",\n    value: function _initListeners(resolve, reject, file) {\n      var xhr = this.xhr;\n      var loader = this.loader;\n      var genericErrorText = \"Couldn't upload file: \".concat(file.name, \".\");\n      xhr.addEventListener('error', function () {\n        return reject(genericErrorText);\n      });\n      xhr.addEventListener('abort', function () {\n        return reject();\n      });\n      xhr.addEventListener('load', function () {\n        var response = xhr.response; // This example assumes the XHR server's \"response\" object will come with\n        // an \"error\" which has its own \"message\" that can be passed to reject()\n        // in the upload promise.\n        //\n        // Your integration may handle upload errors in a different way so make sure\n        // it is done properly. The reject() function must be called when the upload fails.\n\n        if (!response || response.error) {\n          return reject(response && response.error ? response.error.message : genericErrorText);\n        } // If the upload is successful, resolve the upload promise with an object containing\n        // at least the \"default\" URL, pointing to the image on the server.\n        // This URL will be used to display the image in the content. Learn more in the\n        // UploadAdapter#upload documentation.\n\n\n        resolve({\n          \"default\": response.url\n        });\n      }); // Upload progress when it is supported. The file loader has the #uploadTotal and #uploaded\n      // properties which are used e.g. to display the upload progress bar in the editor\n      // user interface.\n\n      if (xhr.upload) {\n        xhr.upload.addEventListener('progress', function (evt) {\n          if (evt.lengthComputable) {\n            loader.uploadTotal = evt.total;\n            loader.uploaded = evt.loaded;\n          }\n        });\n      }\n    } // Prepares the data and sends the request.\n\n  }, {\n    key: \"_sendRequest\",\n    value: function _sendRequest(file) {\n      // Prepare the form data.\n      var data = new FormData();\n      data.append('upload', file); // Important note: This is the right place to implement security mechanisms\n      // like authentication and CSRF protection. For instance, you can use\n      // XMLHttpRequest.setRequestHeader() to set the request headers containing\n      // the CSRF token generated earlier by your application.\n      // Send the request.\n\n      this.xhr.send(data);\n    }\n  }]);\n\n  return MyUploadAdapter;\n}(); // ...\n\n\nfunction MyCustomUploadAdapterPlugin(editor) {\n  editor.plugins.get('FileRepository').createUploadAdapter = function (loader) {\n    // Configure the URL to the upload script in your back-end here!\n    return new MyUploadAdapter(loader);\n  };\n} // ...\n\n\n_c = MyCustomUploadAdapterPlugin;\nClassicEditor.create(document.querySelector('#editor'), {\n  extraPlugins: [MyCustomUploadAdapterPlugin] // ...\n\n})[\"catch\"](function (error) {\n  console.log(error);\n});\n\nvar _c;\n\n$RefreshReg$(_c, \"MyCustomUploadAdapterPlugin\");","map":{"version":3,"sources":["D:/git Repository/PersonalProject_001/frontend/pages/CKEditor.js"],"names":["MyUploadAdapter","loader","file","then","Promise","resolve","reject","_initRequest","_initListeners","_sendRequest","xhr","abort","XMLHttpRequest","open","responseType","genericErrorText","name","addEventListener","response","error","message","url","upload","evt","lengthComputable","uploadTotal","total","uploaded","loaded","data","FormData","append","send","MyCustomUploadAdapterPlugin","editor","plugins","get","createUploadAdapter","ClassicEditor","create","document","querySelector","extraPlugins","console","log"],"mappings":"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","sourcesContent":["class MyUploadAdapter {\r\n    constructor( loader ) {\r\n        // The file loader instance to use during the upload.\r\n        this.loader = loader;\r\n    }\r\n\r\n    // Starts the upload process.\r\n    upload() {\r\n        return this.loader.file\r\n            .then( file => new Promise( ( resolve, reject ) => {\r\n                this._initRequest();\r\n                this._initListeners( resolve, reject, file );\r\n                this._sendRequest( file );\r\n            } ) );\r\n    }\r\n\r\n    // Aborts the upload process.\r\n    abort() {\r\n        if ( this.xhr ) {\r\n            this.xhr.abort();\r\n        }\r\n    }\r\n\r\n    // Initializes the XMLHttpRequest object using the URL passed to the constructor.\r\n    _initRequest() {\r\n        const xhr = this.xhr = new XMLHttpRequest();\r\n\r\n        // Note that your request may look different. It is up to you and your editor\r\n        // integration to choose the right communication channel. This example uses\r\n        // a POST request with JSON as a data structure but your configuration\r\n        // could be different.\r\n        xhr.open( 'POST', 'http://example.com/image/upload/path', true );\r\n        xhr.responseType = 'json';\r\n    }\r\n\r\n    // Initializes XMLHttpRequest listeners.\r\n    _initListeners( resolve, reject, file ) {\r\n        const xhr = this.xhr;\r\n        const loader = this.loader;\r\n        const genericErrorText = `Couldn't upload file: ${ file.name }.`;\r\n\r\n        xhr.addEventListener( 'error', () => reject( genericErrorText ) );\r\n        xhr.addEventListener( 'abort', () => reject() );\r\n        xhr.addEventListener( 'load', () => {\r\n            const response = xhr.response;\r\n\r\n            // This example assumes the XHR server's \"response\" object will come with\r\n            // an \"error\" which has its own \"message\" that can be passed to reject()\r\n            // in the upload promise.\r\n            //\r\n            // Your integration may handle upload errors in a different way so make sure\r\n            // it is done properly. The reject() function must be called when the upload fails.\r\n            if ( !response || response.error ) {\r\n                return reject( response && response.error ? response.error.message : genericErrorText );\r\n            }\r\n\r\n            // If the upload is successful, resolve the upload promise with an object containing\r\n            // at least the \"default\" URL, pointing to the image on the server.\r\n            // This URL will be used to display the image in the content. Learn more in the\r\n            // UploadAdapter#upload documentation.\r\n            resolve( {\r\n                default: response.url\r\n            } );\r\n        } );\r\n\r\n        // Upload progress when it is supported. The file loader has the #uploadTotal and #uploaded\r\n        // properties which are used e.g. to display the upload progress bar in the editor\r\n        // user interface.\r\n        if ( xhr.upload ) {\r\n            xhr.upload.addEventListener( 'progress', evt => {\r\n                if ( evt.lengthComputable ) {\r\n                    loader.uploadTotal = evt.total;\r\n                    loader.uploaded = evt.loaded;\r\n                }\r\n            } );\r\n        }\r\n    }\r\n\r\n    // Prepares the data and sends the request.\r\n    _sendRequest( file ) {\r\n        // Prepare the form data.\r\n        const data = new FormData();\r\n\r\n        data.append( 'upload', file );\r\n\r\n        // Important note: This is the right place to implement security mechanisms\r\n        // like authentication and CSRF protection. For instance, you can use\r\n        // XMLHttpRequest.setRequestHeader() to set the request headers containing\r\n        // the CSRF token generated earlier by your application.\r\n\r\n        // Send the request.\r\n        this.xhr.send( data );\r\n    }\r\n}\r\n\r\n// ...\r\n\r\nfunction MyCustomUploadAdapterPlugin( editor ) {\r\n    editor.plugins.get( 'FileRepository' ).createUploadAdapter = ( loader ) => {\r\n        // Configure the URL to the upload script in your back-end here!\r\n        return new MyUploadAdapter( loader );\r\n    };\r\n}\r\n\r\n// ...\r\n\r\nClassicEditor\r\n    .create( document.querySelector( '#editor' ), {\r\n        extraPlugins: [ MyCustomUploadAdapterPlugin ],\r\n\r\n        // ...\r\n    } )\r\n    .catch( error => {\r\n        console.log( error );\r\n    } );"]},"metadata":{},"sourceType":"script"}