{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"D:\\\\git Repository\\\\PersonalProject_001\\\\frontend\\\\pages\\\\mainPosts_1001.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { Button } from 'antd';\nimport Router, { useRouter } from 'next/router';\nimport Link from 'next/link';\nimport Pagenation from '../utilComponent/Pagenation';\nimport { DislikeTwoTone, LikeTwoTone, EyeOutlined, UserOutlined, FieldTimeOutlined, FolderTwoTone } from '@ant-design/icons';\nimport { MAINPOSTS_1001_LIST_REQUEST, MAINPOSTS_1001_DETAIL_INFO_REQUEST } from '../reducers/mainPosts_1001';\nimport { LOAD_USER_REQUEST } from '../reducers/auth';\nimport { useDispatch, useSelector } from 'react-redux';\nimport isEmpty from '../utilComponent/isEmpty';\nimport custumDateFormat from '../utilComponent/custumDateFormat';\n\nvar mainPosts_1001 = function mainPosts_1001(_ref) {\n  _s();\n\n  var pages = _ref.pages,\n      group = _ref.group;\n  var dispatch = useDispatch();\n  var router = useRouter();\n\n  var _useSelector = useSelector(function (state) {\n    return state.mainPosts_1001;\n  }),\n      mainPosts_1001 = _useSelector.mainPosts_1001,\n      mainPosts_1001Info = _useSelector.mainPosts_1001Info;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.auth;\n  }),\n      userInfo = _useSelector2.userInfo;\n  /*-------------------------------------------페이징 처리 로직 start-------------------------------------------------------*/\n\n\n  var _useState = useState(0),\n      nowPage = _useState[0],\n      setNowPage = _useState[1]; //현재 페이지\n\n\n  var _useState2 = useState(2),\n      postsPerPage = _useState2[0]; //한 페이지당 list 수 \n\n\n  var _useState3 = useState(5),\n      groupPage = _useState3[0],\n      setGroupPage = _useState3[1]; //페이징 그룹 당 수  1~5 , 6~10 , 11~15 ... 5의 배수만 입력가능 \n\n\n  var _useState4 = useState([]),\n      nowGroupPageArray = _useState4[0],\n      setNowGroupPageArray = _useState4[1]; //현재 페이징 그룹 배열\n\n\n  var pagenate = useCallback(function (pageNumber, groupPageArray) {\n    setNowPage(pageNumber);\n    nowGroupPageArray.length = 0;\n    setNowGroupPageArray(nowGroupPageArray.concat(groupPageArray));\n    var indexOfLastPost = pageNumber * postsPerPage;\n    var indexOfFirstPost = indexOfLastPost - postsPerPage;\n    dispatch({\n      type: MAINPOSTS_1001_LIST_REQUEST,\n      data: {\n        postFlag: '1001',\n        currentPage: indexOfFirstPost,\n        maxPage: postsPerPage\n      }\n    });\n  }, [nowPage, nowGroupPageArray]); //01.페이지 첫 로드시.. \n  //02.상세 정보 본 후 뒤로 가기 눌렀을 경우 \n  //03.페이지 이동 후 뒤로가기 눌렀을 경우\n\n  useEffect(function () {\n    //초기에 groupPage 만큼 배열을 생생해 주어야 한다. \n    var pageArray = Array.from({\n      length: groupPage\n    }, function (v, i) {\n      return i;\n    }); //groupPage 페이지 그룹 변경 시 로직 (5에서 ▶ 눌렀을 때)\n\n    if (group % groupPage === 0) {\n      pageArray.length = 0;\n\n      for (var i = group; i < group + groupPage; i++) {\n        pageArray.push(i);\n      }\n    }\n\n    pagenate(parseInt(pages), pageArray);\n  }, [pages]);\n  /*-------------------------------------------페이징 처리 로직   end-------------------------------------------------------*/\n  //게시글 상세 페이지 \n\n  var gotoDetail = useCallback(function (postId, userNickName, postFlag) {\n    dispatch({\n      type: MAINPOSTS_1001_DETAIL_INFO_REQUEST,\n      data: {\n        postId: postId,\n        nickName: userNickName,\n        postFlag: postFlag\n      }\n    });\n    console.log('mainPosts_1001Info===>', mainPosts_1001Info);\n    router.push({\n      pathname: '/detailPage copy',\n      query: {\n        postId: postId,\n        nickName: userNickName,\n        postFlag: postFlag,\n        mainPosts_1001Info: JSON.stringify(mainPosts_1001Info)\n      }\n    });\n  }, [mainPosts_1001Info.length]); //게시글 쓰기\n\n  var gotoEdit = useCallback(function () {\n    router.push('/CKEditor');\n  }, []);\n  return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: \"divTable\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }\n  }, mainPosts_1001.map(function (v, i) {\n    return __jsx(\"div\", {\n      className: \"divTableRow\",\n      onClick: function onClick() {\n        return gotoDetail(v.postId, v.userNickName, '1001', nowPage);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 16\n      }\n    }, __jsx(\"div\", {\n      className: \"divTableCell\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 19\n      }\n    }, __jsx(\"div\", {\n      className: \"divImageCell\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 49\n      }\n    }, __jsx(\"img\", {\n      src: \"https://dimg.donga.com/wps/NEWS/IMAGE/2019/11/24/98510015.1.jpg\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 79\n      }\n    }))), __jsx(\"div\", {\n      className: \"divTableCell\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 19\n      }\n    }, __jsx(Link, {\n      href: {\n        pathname: '/detailPage',\n        query: {\n          postId: v.postId,\n          nickName: v.userNickName,\n          postFlag: '1001'\n        }\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 50\n      }\n    }, __jsx(\"a\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 155\n      }\n    }, isEmpty(v.title), \" [\", v.commentCount, \"]\")), __jsx(\"br\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 206\n      }\n    }), __jsx(LikeTwoTone, {\n      twoToneColor: \"#1ba640\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 19\n      }\n    }), \" : \", v.good, \" \", __jsx(DislikeTwoTone, {\n      twoToneColor: \"#1ba640\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 68\n      }\n    }), \" : \", v.bad, \"  \", __jsx(EyeOutlined, {\n      color: \"red\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 120\n      }\n    }), \" : \", v.hit, __jsx(\"br\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 156\n      }\n    }), __jsx(UserOutlined, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 19\n      }\n    }), \" \", isEmpty(v.userNickName), \"   \", __jsx(FieldTimeOutlined, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 64\n      }\n    }), \" \", custumDateFormat(v.createdDate), __jsx(\"br\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 119\n      }\n    })));\n  })), userInfo && __jsx(Button, {\n    type: \"primary\",\n    onClick: gotoEdit,\n    style: {\n      marginTop: \"1%\",\n      display: \"block\",\n      \"float\": \"right\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 21\n    }\n  }, \"\\uAE00\\uC4F0\\uAE30\"), __jsx(Pagenation, {\n    pagenate: pagenate,\n    dataLength: mainPosts_1001.length,\n    postsPerPage: postsPerPage,\n    nowPage: nowPage,\n    groupPage: groupPage,\n    groupPageArray: nowGroupPageArray,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }\n  }));\n};\n\n_s(mainPosts_1001, \"ZAfJ99bmhMmsDccMmF7oB97bKkE=\", false, function () {\n  return [useDispatch, useRouter, useSelector, useSelector];\n});\n\nmainPosts_1001.getInitialProps = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(context) {\n    var pages, group;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            pages = context.query.nowPage;\n            group = parseInt(context.query.group);\n            return _context.abrupt(\"return\", {\n              pages: pages,\n              group: group\n            });\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nexport default mainPosts_1001;","map":{"version":3,"sources":["D:/git Repository/PersonalProject_001/frontend/pages/mainPosts_1001.js"],"names":["React","useState","useEffect","useCallback","Button","Router","useRouter","Link","Pagenation","DislikeTwoTone","LikeTwoTone","EyeOutlined","UserOutlined","FieldTimeOutlined","FolderTwoTone","MAINPOSTS_1001_LIST_REQUEST","MAINPOSTS_1001_DETAIL_INFO_REQUEST","LOAD_USER_REQUEST","useDispatch","useSelector","isEmpty","custumDateFormat","mainPosts_1001","pages","group","dispatch","router","state","mainPosts_1001Info","auth","userInfo","nowPage","setNowPage","postsPerPage","groupPage","setGroupPage","nowGroupPageArray","setNowGroupPageArray","pagenate","pageNumber","groupPageArray","length","concat","indexOfLastPost","indexOfFirstPost","type","data","postFlag","currentPage","maxPage","pageArray","Array","from","v","i","push","parseInt","gotoDetail","postId","userNickName","nickName","console","log","pathname","query","JSON","stringify","gotoEdit","map","title","commentCount","good","bad","hit","createdDate","marginTop","display","getInitialProps","context"],"mappings":"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","sourcesContent":["\r\nimport React , {useState,useEffect,useCallback}from 'react'\r\nimport {Button} from 'antd'\r\nimport Router ,{ useRouter } from 'next/router';\r\nimport Link from 'next/link'\r\nimport Pagenation from '../utilComponent/Pagenation'\r\nimport {DislikeTwoTone,LikeTwoTone ,EyeOutlined, UserOutlined, FieldTimeOutlined, FolderTwoTone} from '@ant-design/icons'\r\nimport \r\n    {MAINPOSTS_1001_LIST_REQUEST,\r\n     MAINPOSTS_1001_DETAIL_INFO_REQUEST\r\n    } \r\nfrom '../reducers/mainPosts_1001'; \r\n\r\n\r\nimport \r\n    {LOAD_USER_REQUEST,\r\n    } \r\nfrom '../reducers/auth'; \r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport isEmpty from '../utilComponent/isEmpty';\r\nimport custumDateFormat from  '../utilComponent/custumDateFormat';\r\n\r\n\r\n\r\n\r\nconst mainPosts_1001 = ({pages,group})=>{\r\n\r\n  const dispatch         = useDispatch(); \r\n  const router           = useRouter(); \r\n  const {mainPosts_1001,mainPosts_1001Info} = useSelector((state)=>state.mainPosts_1001); \r\n  const {userInfo}       = useSelector((state)=>state.auth);\r\n\r\n\r\n  /*-------------------------------------------페이징 처리 로직 start-------------------------------------------------------*/\r\n  const [nowPage,setNowPage] = useState(0);                       //현재 페이지\r\n  const [postsPerPage] = useState(2);                             //한 페이지당 list 수 \r\n  const [groupPage , setGroupPage] = useState(5);                 //페이징 그룹 당 수  1~5 , 6~10 , 11~15 ... 5의 배수만 입력가능 \r\n  const [nowGroupPageArray,setNowGroupPageArray] =useState([]);   //현재 페이징 그룹 배열\r\n  \r\n\r\n  const pagenate =useCallback((pageNumber, groupPageArray)=>{\r\n\r\n    setNowPage(pageNumber); \r\n\r\n    nowGroupPageArray.length=0; \r\n\r\n    setNowGroupPageArray(nowGroupPageArray.concat(groupPageArray));\r\n\r\n    const indexOfLastPost = pageNumber * postsPerPage;   \r\n    const indexOfFirstPost = indexOfLastPost - postsPerPage;  \r\n\r\n     dispatch({\r\n        type:MAINPOSTS_1001_LIST_REQUEST, \r\n        data:{postFlag:'1001',\r\n              currentPage:indexOfFirstPost,\r\n              maxPage:postsPerPage\r\n       }, \r\n    });\r\n\r\n},[nowPage,nowGroupPageArray]); \r\n\r\n      \r\n  //01.페이지 첫 로드시.. \r\n  //02.상세 정보 본 후 뒤로 가기 눌렀을 경우 \r\n  //03.페이지 이동 후 뒤로가기 눌렀을 경우\r\n  useEffect(()=>{\r\n\r\n      //초기에 groupPage 만큼 배열을 생생해 주어야 한다. \r\n      let pageArray =Array.from({length: groupPage}, (v, i) => i);\r\n\r\n\r\n      //groupPage 페이지 그룹 변경 시 로직 (5에서 ▶ 눌렀을 때)\r\n      if((group % groupPage === 0 )){\r\n              pageArray.length=0; \r\n\r\n                for(let i=group; i<group+groupPage; i++){\r\n                  pageArray.push(i); \r\n\r\n                }\r\n           }\r\n\r\n          pagenate(parseInt(pages),pageArray);\r\n      \r\n  },[pages]); \r\n\r\n  /*-------------------------------------------페이징 처리 로직   end-------------------------------------------------------*/\r\n\r\n\r\n  //게시글 상세 페이지 \r\n  const gotoDetail = useCallback((postId,userNickName,postFlag)=>{\r\n      dispatch({\r\n        type:MAINPOSTS_1001_DETAIL_INFO_REQUEST, \r\n        data:{\r\n          postId,\r\n          nickName:userNickName,\r\n          postFlag,\r\n        }\r\n     });\r\n     console.log('mainPosts_1001Info===>',mainPosts_1001Info);\r\n    router.push({pathname:'/detailPage copy',\r\n                 query:{postId,nickName:userNickName,postFlag,mainPosts_1001Info:JSON.stringify(mainPosts_1001Info)},\r\n              }); \r\n  },[mainPosts_1001Info.length]); \r\n\r\n\r\n  //게시글 쓰기\r\n  const gotoEdit = useCallback(()=>{\r\n\r\n    router.push('/CKEditor'); \r\n  },[]); \r\n  \r\n\r\n   return (\r\n    <div>\r\n\r\n      <div className=\"divTable\">\r\n            {mainPosts_1001.map((v,i)=>(\r\n               <div className='divTableRow' onClick={()=>gotoDetail(v.postId,v.userNickName,'1001',nowPage)}>\r\n                  <div className='divTableCell'><div className=\"divImageCell\"><img src='https://dimg.donga.com/wps/NEWS/IMAGE/2019/11/24/98510015.1.jpg' /></div></div>\r\n                  <div className=\"divTableCell\" ><Link href={{pathname:'/detailPage' , query:{postId:v.postId,nickName:v.userNickName,postFlag:'1001'}}} ><a>{isEmpty(v.title)} [{v.commentCount}]</a></Link><br/>\r\n                  <LikeTwoTone twoToneColor=\"#1ba640\"/> : {v.good} <DislikeTwoTone twoToneColor=\"#1ba640\"/> : {v.bad}  <EyeOutlined color=\"red\"/> : {v.hit}<br/>\r\n                  <UserOutlined /> {isEmpty(v.userNickName)}   <FieldTimeOutlined /> {custumDateFormat(v.createdDate)}<br />\r\n                  </div>\r\n              </div>\r\n            ))}\r\n      </div>\r\n\r\n\r\n      {userInfo &&  <Button type=\"primary\" onClick={gotoEdit} style={{marginTop:\"1%\",display:\"block\",float:\"right\"}}>글쓰기</Button>}\r\n  \r\n      <Pagenation pagenate={pagenate} dataLength={mainPosts_1001.length} postsPerPage={postsPerPage} nowPage={nowPage} groupPage={groupPage} groupPageArray={nowGroupPageArray} />\r\n\r\n    </div>\r\n    );\r\n}; \r\n\r\nmainPosts_1001.getInitialProps = async (context) =>{\r\n\r\n  const pages = context.query.nowPage; \r\n  const group  =parseInt(context.query.group); \r\n  return {pages, group}; \r\n\r\n}\r\n\r\nexport default mainPosts_1001; "]},"metadata":{},"sourceType":"module"}