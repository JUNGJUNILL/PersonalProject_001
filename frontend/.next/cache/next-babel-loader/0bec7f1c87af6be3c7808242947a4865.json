{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"D:\\\\git Repository\\\\PersonalProject_001\\\\frontend\\\\components\\\\mainPosts_1001\\\\mainPosts_1001_comments.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useCallback, useEffect, useState, createRef, memo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport custumDateFormat from '../../utilComponent/custumDateFormat';\nimport Comment1001ByComments from './mainPosts_1001_commentByComments';\nimport CommentTextArea from './mainPosts_1001_textArea';\nimport { DislikeTwoTone, LikeTwoTone } from '@ant-design/icons';\nimport { MAINPOSTS_1001_COMMENTBYCOMMENTINSERT_REQUEST } from '../../reducers/mainPosts_1001';\nimport { Badge } from 'antd';\n\nvar Comments1001 = function Comments1001(_ref) {\n  _s();\n\n  var postFlag = _ref.postFlag,\n      nickName = _ref.nickName,\n      postId = _ref.postId,\n      userInfo = _ref.userInfo,\n      commentId = _ref.commentId,\n      comment = _ref.comment,\n      who = _ref.who,\n      flag = _ref.flag,\n      good = _ref.good,\n      bad = _ref.bad,\n      createdDate = _ref.createdDate,\n      likeBtn = _ref.likeBtn,\n      clickedComponent = _ref.clickedComponent,\n      likeDislikeflag = _ref.likeDislikeflag,\n      byCommentCount = _ref.byCommentCount,\n      commentByCommentList = _ref.commentByCommentList,\n      mainPosts_1001CommentByComments = _ref.mainPosts_1001CommentByComments,\n      unfoldList = _ref.unfoldList;\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(function (state) {\n    return state.mainPosts_1001;\n  }),\n      clickCommentId = _useSelector.clickCommentId,\n      commentByCommentCount = _useSelector.commentByCommentCount,\n      commentByCommentInsertCommentId = _useSelector.commentByCommentInsertCommentId;\n\n  var _useState = useState(byCommentCount),\n      byCommentCountState = _useState[0],\n      setByCommentCountState = _useState[1];\n\n  var ref = createRef();\n  var blank_pattern = /^\\s+|\\s+&/g; //대댓글 입력 \n\n  var insertComment = useCallback(function (postFlag, postId, nickName, comment) {\n    if (comment.length === 0 || comment.replace(blank_pattern, '') === \"\") {\n      alert('댓글을 입력해 주세요!');\n\n      if (ref.current) {\n        ref.current.focusInput();\n      }\n\n      return;\n    }\n\n    if (comment.length === 300) {\n      alert('300자 이상 입력 할 수 없습니다.');\n      return;\n    } //대댓글 입력\n\n\n    dispatch({\n      type: MAINPOSTS_1001_COMMENTBYCOMMENTINSERT_REQUEST,\n      data: {\n        postFlag: postFlag,\n        nickName: nickName,\n        postId: postId,\n        commentId: commentId,\n        who: userInfo,\n        comment: comment\n      }\n    });\n    setByCommentCountState(commentByCommentCount); //인풋 초기화, 포커스 \n\n    if (ref.current) {\n      ref.current.clearInput();\n      ref.current.focusInput();\n    }\n  }, [mainPosts_1001CommentByComments, ref, commentByCommentInsertCommentId, commentByCommentCount]);\n  return __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: \"divTableRow\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 17\n    }\n  }, __jsx(\"div\", {\n    className: \"divTableCell\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 21\n    }\n  }, __jsx(\"b\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 21\n    }\n  }, who), \" \\xA0 \", __jsx(\"small\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 41\n    }\n  }, custumDateFormat(createdDate)), __jsx(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 87\n    }\n  }), comment, __jsx(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 30\n    }\n  }), \"byCommentCount=\".concat(byCommentCountState), __jsx(\"a\", {\n    onClick: function onClick() {\n      return commentByCommentList(postFlag, nickName, postId, commentId, byCommentCount);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 21\n    }\n  }, byCommentCountState === 0 ? \"\\uB313\\uAE00\\uB2EC\\uAE30\" : \"\\uB313\\uAE00[\".concat(commentByCommentInsertCommentId === commentId ? commentByCommentCount : byCommentCount, \"]\")), \" \", commentId, __jsx(\"div\", {\n    style: {\n      marginTop: \"1%\",\n      display: \"block\",\n      \"float\": \"right\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 25\n    }\n  }, __jsx(LikeTwoTone, {\n    onClick: function onClick() {\n      return likeBtn(commentId, flag, 'good');\n    },\n    twoToneColor: clickedComponent && likeDislikeflag === 'good' ? \"#ff0000\" : \"#1ba640\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 29\n    }\n  }), clickedComponent && likeDislikeflag === 'good' ? parseInt(good) + 1 : good, \"\\xA0\\xA0\\xA0\\xA0\", __jsx(DislikeTwoTone, {\n    onClick: function onClick() {\n      return likeBtn(commentId, flag, 'bad');\n    },\n    twoToneColor: clickedComponent && likeDislikeflag === 'bad' ? \"#ff0000\" : \"#1ba640\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 29\n    }\n  }), clickedComponent && likeDislikeflag === 'bad' ? parseInt(bad) + 1 : bad, \"\\xA0\\xA0\\xA0\\xA0\", __jsx(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 29\n    }\n  })))), unfoldList === 'unfold' && clickCommentId === commentId && mainPosts_1001CommentByComments && mainPosts_1001CommentByComments.map(function (v, i) {\n    return __jsx(Comment1001ByComments, {\n      key: i,\n      postFlag: postFlag,\n      nickName: nickName,\n      postId: postId,\n      userInfo: userInfo,\n      commentId: commentId,\n      byCommentId: v.byCommentId,\n      comment: v.comment,\n      who: v.who,\n      good: v.good,\n      bad: v.bad,\n      createdDate: v.createdDate,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 21\n      }\n    });\n  }), unfoldList === 'unfold' && clickCommentId === commentId && byCommentCount >= 0 && __jsx(CommentTextArea, {\n    postFlag: postFlag,\n    nickName: nickName,\n    postId: postId,\n    userInfo: userInfo,\n    insertComment: insertComment,\n    unfoldList: unfoldList,\n    ref: ref,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 21\n    }\n  }));\n};\n\n_s(Comments1001, \"yVcMesx7cBBX/Dij5XaOtujfBrI=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = Comments1001;\nexport default _c2 = memo(Comments1001);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Comments1001\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["D:/git Repository/PersonalProject_001/frontend/components/mainPosts_1001/mainPosts_1001_comments.js"],"names":["React","useCallback","useEffect","useState","createRef","memo","useDispatch","useSelector","custumDateFormat","Comment1001ByComments","CommentTextArea","DislikeTwoTone","LikeTwoTone","MAINPOSTS_1001_COMMENTBYCOMMENTINSERT_REQUEST","Badge","Comments1001","postFlag","nickName","postId","userInfo","commentId","comment","who","flag","good","bad","createdDate","likeBtn","clickedComponent","likeDislikeflag","byCommentCount","commentByCommentList","mainPosts_1001CommentByComments","unfoldList","dispatch","state","mainPosts_1001","clickCommentId","commentByCommentCount","commentByCommentInsertCommentId","byCommentCountState","setByCommentCountState","ref","blank_pattern","insertComment","length","replace","alert","current","focusInput","type","data","clearInput","marginTop","display","parseInt","map","v","i","byCommentId"],"mappings":"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","sourcesContent":["import React, { useCallback,useEffect, useState, createRef, memo } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport custumDateFormat from  '../../utilComponent/custumDateFormat';\r\n\r\nimport Comment1001ByComments from './mainPosts_1001_commentByComments'\r\nimport CommentTextArea       from './mainPosts_1001_textArea'\r\nimport {DislikeTwoTone,LikeTwoTone} from '@ant-design/icons'\r\nimport \r\n    {\r\n        MAINPOSTS_1001_COMMENTBYCOMMENTINSERT_REQUEST,\r\n    } \r\nfrom '../../reducers/mainPosts_1001'; \r\nimport { Badge } from 'antd';\r\n\r\nconst Comments1001 = ({\r\n                      postFlag,\r\n                      nickName,\r\n                      postId,\r\n                      userInfo,\r\n\r\n                      commentId,\r\n                      comment,\r\n                      who,\r\n                      flag,\r\n                      \r\n                      good,\r\n                      bad,\r\n                      createdDate,\r\n\r\n                      likeBtn,\r\n\r\n                      clickedComponent,\r\n                      likeDislikeflag,\r\n                      byCommentCount,\r\n                      commentByCommentList,\r\n                      mainPosts_1001CommentByComments,\r\n                      unfoldList,\r\n\r\n                    })=>{\r\n                \r\n                        \r\n        const dispatch = useDispatch();\r\n        const {clickCommentId,\r\n               commentByCommentCount,\r\n               commentByCommentInsertCommentId} = useSelector((state)=>state.mainPosts_1001); \r\n        const [byCommentCountState, setByCommentCountState] = useState(byCommentCount); \r\n        const ref = createRef(); \r\n        const blank_pattern = /^\\s+|\\s+&/g;  \r\n        \r\n    //대댓글 입력 \r\n  const insertComment = useCallback((postFlag,postId,nickName ,comment)=>{\r\n\r\n        if(comment.length === 0 || comment.replace(blank_pattern,'')===\"\"){\r\n \r\n            alert('댓글을 입력해 주세요!'); \r\n            if(ref.current){\r\n                ref.current.focusInput(); \r\n            }\r\n            return; \r\n\r\n        }\r\n\r\n        if(comment.length === 300){\r\n            alert('300자 이상 입력 할 수 없습니다.'); \r\n            return; \r\n        }\r\n      \r\n        //대댓글 입력\r\n        dispatch({\r\n            type:MAINPOSTS_1001_COMMENTBYCOMMENTINSERT_REQUEST, \r\n            data:{\r\n                postFlag,\r\n                nickName,\r\n                postId,\r\n                commentId,\r\n                who:userInfo,\r\n                comment,   \r\n            }\r\n        }); \r\n        setByCommentCountState(commentByCommentCount); \r\n\r\n        //인풋 초기화, 포커스 \r\n        if(ref.current){\r\n                ref.current.clearInput(); \r\n                ref.current.focusInput(); \r\n        }\r\n\r\n      },[mainPosts_1001CommentByComments,ref,commentByCommentInsertCommentId,commentByCommentCount]);\r\n\r\n    return (\r\n        <>\r\n                <div  className='divTableRow' >\r\n                    <div  className=\"divTableCell\">        \r\n                    <b>{who}</b> &nbsp; <small>{custumDateFormat(createdDate)}</small><br/>\r\n                    {comment}<br />{`byCommentCount=${byCommentCountState}` }\r\n                    <a onClick={()=>commentByCommentList(postFlag,nickName,postId,commentId,byCommentCount)}>{ byCommentCountState === 0 ? `댓글달기` : `댓글[${commentByCommentInsertCommentId===commentId ? commentByCommentCount : byCommentCount}]` }</a> {commentId}          \r\n                        <div  style={{marginTop:\"1%\",display:\"block\",float:\"right\"}}>\r\n                            <LikeTwoTone onClick={()=>likeBtn(commentId,flag,'good')} twoToneColor={clickedComponent && likeDislikeflag==='good' ? \"#ff0000\" : \"#1ba640\"}/>{clickedComponent && likeDislikeflag==='good' ? parseInt(good)+1:good}\r\n                            &nbsp;&nbsp;&nbsp;&nbsp;\r\n                            <DislikeTwoTone onClick={()=>likeBtn(commentId,flag,'bad')} twoToneColor={clickedComponent && likeDislikeflag==='bad' ? \"#ff0000\" : \"#1ba640\"} />{clickedComponent && likeDislikeflag==='bad' ? parseInt(bad)+1:bad}\r\n                            &nbsp;&nbsp;&nbsp;&nbsp;\r\n                            <br />\r\n                        </div> \r\n                    </div>\r\n                </div>  \r\n\r\n                {/*대댓글 리스트*/}\r\n                {unfoldList ==='unfold' && clickCommentId === commentId && mainPosts_1001CommentByComments && mainPosts_1001CommentByComments.map((v,i)=>(\r\n                    <Comment1001ByComments                  \r\n                            key={i}\r\n                            postFlag={postFlag}\r\n                            nickName={nickName}\r\n                            postId={postId}\r\n                            userInfo={userInfo}\r\n                            commentId={commentId}\r\n\r\n                            byCommentId={v.byCommentId}\r\n                            comment={v.comment}\r\n                            who={v.who}\r\n\r\n                            good={v.good}\r\n                            bad={v.bad}\r\n                            createdDate={v.createdDate}\r\n                    />\r\n                    \r\n                ))}\r\n                {/*대댓글 입력 창*/}\r\n               {unfoldList ==='unfold' && clickCommentId === commentId && byCommentCount >= 0 && \r\n                    <CommentTextArea   \r\n                            postFlag={postFlag} \r\n                            nickName={nickName} \r\n                            postId={postId} \r\n                            userInfo={userInfo}\r\n                            insertComment={insertComment}\r\n                            unfoldList={unfoldList}   \r\n                            \r\n                            ref={ref}           \r\n                            />\r\n                }\r\n        </>   \r\n\r\n\r\n                \r\n    )\r\n\r\n}\r\n\r\nexport default memo(Comments1001); "]},"metadata":{},"sourceType":"module"}