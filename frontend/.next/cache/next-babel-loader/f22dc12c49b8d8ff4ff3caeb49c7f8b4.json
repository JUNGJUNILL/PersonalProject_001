{"ast":null,"code":"var _jsxFileName = \"D:\\\\git Repository\\\\PersonalProject_001\\\\frontend\\\\components\\\\mainPosts_1001\\\\mainPosts_1001_comments copy.js\";\nvar __jsx = React.createElement;\nimport React, { useCallback, useEffect, useState, createRef, memo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport custumDateFormat from '../../utilComponent/custumDateFormat';\nimport Comment1001ByComments from './mainPosts_1001_commentByComments';\nimport CommentTextArea from './mainPosts_1001_textArea';\nimport { DislikeTwoTone, LikeTwoTone } from '@ant-design/icons';\nimport { MAINPOSTS_1001_COMMENTBYCOMMENTINSERT_REQUEST } from '../../reducers/mainPosts_1001';\nimport { Badge } from 'antd';\n\nconst Comments1001 = ({\n  commentList\n}) => {\n  console.log('댓글 commentList', commentList);\n  const dispatch = useDispatch();\n  const {\n    clickCommentId\n  } = useSelector(state => state.mainPosts_1001);\n  const ref = createRef();\n  const blank_pattern = /^\\s+|\\s+&/g;\n  const {\n    0: array,\n    1: setArray\n  } = useState([]);\n  useEffect(() => {\n    setArray([...commentList]);\n  }, [commentList]); //대댓글 입력 \n\n  const insertComment = useCallback((postFlag, postId, nickName, comment) => {\n    if (comment.length === 0 || comment.replace(blank_pattern, '') === \"\") {\n      alert('댓글을 입력해 주세요!');\n      ref.current.focus();\n      return;\n    }\n\n    dispatch({\n      type: MAINPOSTS_1001_COMMENTBYCOMMENTINSERT_REQUEST,\n      data: {\n        postFlag,\n        nickName,\n        postId,\n        commentId,\n        who: userInfo,\n        comment\n      }\n    });\n  }, [mainPosts_1001CommentByComments]);\n  return __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: \"divTableRow\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 17\n    }\n  }, __jsx(\"div\", {\n    className: \"divTableCell\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 21\n    }\n  }, __jsx(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 21\n    }\n  }, who), \" \\xA0 \", __jsx(\"small\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 41\n    }\n  }, custumDateFormat(createdDate)), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 87\n    }\n  }), comment, __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 30\n    }\n  }), __jsx(\"a\", {\n    onClick: () => commentByCommentList(postFlag, nickName, postId, commentId, byCommentCount),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 21\n    }\n  }, byCommentCount === 0 ? `댓글달기` : `댓글[${byCommentCount}]`), \" \", commentId, __jsx(\"div\", {\n    style: {\n      marginTop: \"1%\",\n      display: \"block\",\n      float: \"right\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 25\n    }\n  }, __jsx(LikeTwoTone, {\n    onClick: () => likeBtn(commentId, flag, 'good'),\n    twoToneColor: clickedComponent && likeDislikeflag === 'good' ? \"#ff0000\" : \"#1ba640\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 29\n    }\n  }), clickedComponent && likeDislikeflag === 'good' ? parseInt(good) + 1 : good, \"\\xA0\\xA0\\xA0\\xA0\", __jsx(DislikeTwoTone, {\n    onClick: () => likeBtn(commentId, flag, 'bad'),\n    twoToneColor: clickedComponent && likeDislikeflag === 'bad' ? \"#ff0000\" : \"#1ba640\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 29\n    }\n  }), clickedComponent && likeDislikeflag === 'bad' ? parseInt(bad) + 1 : bad, \"\\xA0\\xA0\\xA0\\xA0\", __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 29\n    }\n  })))));\n};\n\nexport default memo(Comments1001);","map":{"version":3,"sources":["D:/git Repository/PersonalProject_001/frontend/components/mainPosts_1001/mainPosts_1001_comments copy.js"],"names":["React","useCallback","useEffect","useState","createRef","memo","useDispatch","useSelector","custumDateFormat","Comment1001ByComments","CommentTextArea","DislikeTwoTone","LikeTwoTone","MAINPOSTS_1001_COMMENTBYCOMMENTINSERT_REQUEST","Badge","Comments1001","commentList","console","log","dispatch","clickCommentId","state","mainPosts_1001","ref","blank_pattern","array","setArray","insertComment","postFlag","postId","nickName","comment","length","replace","alert","current","focus","type","data","commentId","who","userInfo","mainPosts_1001CommentByComments","createdDate","commentByCommentList","byCommentCount","marginTop","display","float","likeBtn","flag","clickedComponent","likeDislikeflag","parseInt","good","bad"],"mappings":"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","sourcesContent":["import React, { useCallback,useEffect, useState, createRef, memo } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport custumDateFormat from  '../../utilComponent/custumDateFormat';\r\n\r\nimport Comment1001ByComments from './mainPosts_1001_commentByComments'\r\nimport CommentTextArea       from './mainPosts_1001_textArea'\r\nimport {DislikeTwoTone,LikeTwoTone} from '@ant-design/icons'\r\nimport \r\n    {\r\n        MAINPOSTS_1001_COMMENTBYCOMMENTINSERT_REQUEST,\r\n    } \r\nfrom '../../reducers/mainPosts_1001'; \r\nimport { Badge } from 'antd';\r\n\r\nconst Comments1001 = ({commentList})=>{\r\n                \r\n                        console.log('댓글 commentList',commentList);\r\n                        \r\n        const dispatch = useDispatch();\r\n        const {clickCommentId} = useSelector((state)=>state.mainPosts_1001); \r\n        const ref = createRef(); \r\n        const blank_pattern = /^\\s+|\\s+&/g;  \r\n\r\n        const [array , setArray] = useState([]); \r\n        useEffect(()=>{\r\n            setArray([...commentList]); \r\n        },[commentList])\r\n        \r\n    //대댓글 입력 \r\n  const insertComment = useCallback((postFlag,postId,nickName ,comment)=>{\r\n   \r\n    if(comment.length === 0 || comment.replace(blank_pattern,'')===\"\"){\r\n      \r\n         \r\n        alert('댓글을 입력해 주세요!'); \r\n        ref.current.focus();  \r\n        return; \r\n        }\r\n\r\n\r\n        dispatch({\r\n            type:MAINPOSTS_1001_COMMENTBYCOMMENTINSERT_REQUEST, \r\n            data:{\r\n                postFlag,\r\n                nickName,\r\n                postId,\r\n                commentId,\r\n                who:userInfo,\r\n                comment,   \r\n            }\r\n        })\r\n      },[mainPosts_1001CommentByComments]);\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n                <div  className='divTableRow' >\r\n                    <div  className=\"divTableCell\">\r\n                   \r\n                    <b>{who}</b> &nbsp; <small>{custumDateFormat(createdDate)}</small><br/>\r\n                    {comment}<br />\r\n                    <a onClick={()=>commentByCommentList(postFlag,nickName,postId,commentId,byCommentCount)}>{byCommentCount === 0 ? `댓글달기` : `댓글[${byCommentCount}]` }</a> {commentId}\r\n                   \r\n                        <div  style={{marginTop:\"1%\",display:\"block\",float:\"right\"}}>\r\n                            <LikeTwoTone onClick={()=>likeBtn(commentId,flag,'good')} twoToneColor={clickedComponent && likeDislikeflag==='good' ? \"#ff0000\" : \"#1ba640\"}/>{clickedComponent && likeDislikeflag==='good' ? parseInt(good)+1:good}\r\n                            &nbsp;&nbsp;&nbsp;&nbsp;\r\n                            <DislikeTwoTone onClick={()=>likeBtn(commentId,flag,'bad')} twoToneColor={clickedComponent && likeDislikeflag==='bad' ? \"#ff0000\" : \"#1ba640\"} />{clickedComponent && likeDislikeflag==='bad' ? parseInt(bad)+1:bad}\r\n                            &nbsp;&nbsp;&nbsp;&nbsp;\r\n                            <br />\r\n                        </div> \r\n                    </div>\r\n                </div>  \r\n        </>   \r\n\r\n\r\n                \r\n    )\r\n\r\n}\r\n\r\nexport default memo(Comments1001); "]},"metadata":{},"sourceType":"module"}