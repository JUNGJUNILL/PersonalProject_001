{"ast":null,"code":"var _jsxFileName = \"D:\\\\git Repository\\\\PersonalProject_001\\\\frontend\\\\pages\\\\myEdit.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Editor } from 'react-draft-wysiwyg';\nimport { EditorState, convertToRaw } from 'draft-js';\nimport { useState, useCallback, useRef } from 'react';\nimport { Button, Input } from 'antd';\nimport draftToHtml from 'draftjs-to-html';\nimport htmlToDraft from 'html-to-draftjs';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { EMP_INSERT_REQUEST, UPLOAD_IMAGES_REQUEST } from '../reducers/emp';\n\nconst Myeditor = () => {\n  const dispatch = useDispatch();\n  const {\n    0: editorState,\n    1: setEditorState\n  } = useState(EditorState.createEmpty());\n  const {\n    0: content,\n    1: setContent\n  } = useState('');\n  const {\n    0: mainPostTitle,\n    1: setMainPostTitle\n  } = useState('');\n  const {\n    userInfo\n  } = useSelector(state => state.auth);\n  const {\n    imagePaths\n  } = useSelector(state => state.emp);\n  const imageInput = useRef(); //제출\n\n  const editContent = useCallback(() => {\n    if (!mainPostTitle || !mainPostTitle.trim()) {\n      alert('제목을 입력해 주세요.');\n      return;\n    }\n\n    if (!content || !content.trim()) {\n      alert('게시글을 입력 해 주세요.');\n      return;\n    }\n\n    dispatch({\n      type: EMP_INSERT_REQUEST,\n      data: {\n        content: content,\n        title: mainPostTitle,\n        nickName: userInfo\n      }\n    });\n  }, [content]); //게시글 제목 입력 \n\n  const mainPostTitleChange = useCallback(e => {\n    setMainPostTitle(e.target.value);\n  }, [mainPostTitle]); //이미지 업로드 창 \n\n  const onChangeImages = useCallback(e => {\n    const imageFormData = new FormData();\n    Array.prototype.forEach.call(e.target.files, f => {\n      imageFormData.append('image', f);\n    });\n    dispatch({\n      type: UPLOAD_IMAGES_REQUEST,\n      data: imageFormData\n    });\n  }, []); //이미지 업로드 클릭 \n\n  const onClickImageUpload = useCallback(() => {\n    imageInput.current.click();\n  }, [imageInput.current]); //본문 입력\n\n  const onEditorStateChange = useCallback(editState => {\n    setEditorState(editState);\n    setContent(draftToHtml(convertToRaw(editorState.getCurrentContent())));\n  }, [editorState]);\n  return __jsx(React.Fragment, null, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 5\n    }\n  }, imagePaths && imagePaths.map((v, i) => {\n    return __jsx(\"div\", {\n      key: v,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 13\n      }\n    }, __jsx(\"img\", {\n      src: `http://localhost:3095/${v}`,\n      style: {\n        width: '20%',\n        height: '20%'\n      },\n      alt: v,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 14\n      }\n    }));\n  })), __jsx(\"input\", {\n    type: \"file\",\n    multiple: true,\n    ref: imageInput,\n    onChange: onChangeImages,\n    hidden: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 10\n    }\n  }), __jsx(Button, {\n    onClick: onClickImageUpload,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 10\n    }\n  }, \"\\uC774\\uBBF8\\uC9C0 \\uC5C5\\uB85C\\uB4DC\"), __jsx(Input, {\n    name: \"mainPostTitle\",\n    value: mainPostTitle,\n    onChange: mainPostTitleChange,\n    placeholder: \"\\uC81C\\uBAA9\\uC744 \\uC785\\uB825 \\uD574 \\uC8FC\\uC138\\uC694.\",\n    size: \"25\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 10\n    }\n  }), __jsx(Editor, {\n    editState: editorState,\n    wrapperClassName: \"demo-wrapper\",\n    editorClassName: \"demo-editor\",\n    localization: {\n      locale: 'ko'\n    },\n    onEditorStateChange: onEditorStateChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 10\n    }\n  }), __jsx(Button, {\n    onClick: editContent,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }\n  }, \"\\uC791\\uC131\"));\n};\n\nexport default Myeditor;","map":{"version":3,"sources":["D:/git Repository/PersonalProject_001/frontend/pages/myEdit.js"],"names":["Editor","EditorState","convertToRaw","useState","useCallback","useRef","Button","Input","draftToHtml","htmlToDraft","useDispatch","useSelector","EMP_INSERT_REQUEST","UPLOAD_IMAGES_REQUEST","Myeditor","dispatch","editorState","setEditorState","createEmpty","content","setContent","mainPostTitle","setMainPostTitle","userInfo","state","auth","imagePaths","emp","imageInput","editContent","trim","alert","type","data","title","nickName","mainPostTitleChange","e","target","value","onChangeImages","imageFormData","FormData","Array","prototype","forEach","call","files","f","append","onClickImageUpload","current","click","onEditorStateChange","editState","getCurrentContent","map","v","i","width","height","locale"],"mappings":"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","sourcesContent":["import {Editor} from 'react-draft-wysiwyg'\r\nimport { EditorState,convertToRaw } from 'draft-js';\r\nimport { useState, useCallback, useRef } from 'react';\r\nimport {Button, Input} from 'antd'\r\nimport draftToHtml from 'draftjs-to-html';\r\nimport htmlToDraft from 'html-to-draftjs';\r\n\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport \r\n    {EMP_INSERT_REQUEST, \r\n     UPLOAD_IMAGES_REQUEST,\r\n    } \r\nfrom '../reducers/emp'; \r\n\r\n\r\n\r\nconst Myeditor = () =>{\r\n\r\n    const dispatch = useDispatch(); \r\n    const [editorState, setEditorState] = useState(EditorState.createEmpty());\r\n\r\n    const [content , setContent] = useState(''); \r\n    const [mainPostTitle , setMainPostTitle] = useState(''); \r\n    const {userInfo} = useSelector((state)=>state.auth);\r\n    const {imagePaths} = useSelector((state)=>state.emp); \r\n    \r\n    const imageInput = useRef(); \r\n\r\n    //제출\r\n    const editContent = useCallback(()=>{\r\n\r\n        if(!mainPostTitle || !mainPostTitle.trim()){\r\n            alert('제목을 입력해 주세요.'); \r\n            return; \r\n        }\r\n\r\n        if(!content || !content.trim()){\r\n            alert('게시글을 입력 해 주세요.'); \r\n            return; \r\n        }\r\n\r\n        dispatch({  \r\n            type:EMP_INSERT_REQUEST, \r\n            data:{\r\n                content : content, \r\n                title   : mainPostTitle, \r\n                nickName : userInfo, \r\n            }\r\n            \r\n        });\r\n\r\n    },[content]); \r\n\r\n\r\n    //게시글 제목 입력 \r\n    const mainPostTitleChange = useCallback((e)=>{\r\n\r\n        setMainPostTitle(e.target.value); \r\n\r\n    },[mainPostTitle])\r\n\r\n\r\n\r\n    //이미지 업로드 창 \r\n    const onChangeImages = useCallback((e)=>{\r\n        \r\n        const imageFormData = new FormData(); \r\n        Array.prototype.forEach.call(e.target.files ,(f)=>{\r\n            imageFormData.append('image',f); \r\n        });\r\n        \r\n        dispatch({\r\n                type:UPLOAD_IMAGES_REQUEST,\r\n                data:imageFormData,             \r\n        }); \r\n\r\n    },[]); \r\n\r\n\r\n\r\n    //이미지 업로드 클릭 \r\n    const onClickImageUpload = useCallback(() =>{\r\n        imageInput.current.click(); \r\n\r\n    },[imageInput.current])\r\n\r\n\r\n\r\n\r\n   //본문 입력\r\n   const onEditorStateChange = useCallback((editState)=>{\r\n\r\n    setEditorState(editState); \r\n    setContent(draftToHtml(convertToRaw(editorState.getCurrentContent()))); \r\n\r\n   },[editorState]);\r\n\r\n    return (    \r\n    <>\r\n    <div>\r\n    {imagePaths && imagePaths.map((v,i)=>{\r\n        return (\r\n\r\n            <div key={v} >\r\n             <img src={`http://localhost:3095/${v}`} style={{width:'20%',height:'20%' }} alt={v} />\r\n            </div>\r\n        )\r\n    })}\r\n    </div>\r\n         <input type=\"file\" multiple ref={imageInput} onChange={onChangeImages} hidden />\r\n         <Button onClick={onClickImageUpload}>이미지 업로드</Button>\r\n         <Input name=\"mainPostTitle\" value={mainPostTitle} onChange={mainPostTitleChange} placeholder=\"제목을 입력 해 주세요.\" size=\"25\"/>\r\n         <Editor\r\n            editState={editorState}\r\n            wrapperClassName=\"demo-wrapper\"\r\n            editorClassName=\"demo-editor\"\r\n           localization={{\r\n               locale:'ko', \r\n           }}\r\n    \r\n\r\n           onEditorStateChange={onEditorStateChange}\r\n           \r\n            />\r\n            <Button onClick={editContent}>작성</Button>\r\n\r\n    </>\r\n        )\r\n}\r\n\r\nexport default Myeditor; "]},"metadata":{},"sourceType":"module"}