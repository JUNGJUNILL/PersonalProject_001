{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar _this = this,\n    _jsxFileName = \"D:\\\\git Repository\\\\PersonalProject_001\\\\frontend\\\\pages\\\\detailPage.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useCallback, useEffect, useState, createRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Home from '../components/mainPosts_1001/mainPosts_1001';\nimport Comments1001 from '../components/mainPosts_1001/mainPosts_1001_comments';\nimport CommentTextArea from '../components/mainPosts_1001/mainPosts_1001_textArea';\nimport { MAINPOSTS_1001_DETAIL_INFO_REQUEST, MAINPOSTS_1001_COMMENTS_REQUEST, MAINPOSTS_1001_COMMENTINSERT_REQUEST, MAINPOSTS_1001_COMMENTLIKE_REQUEST, MAINPOSTS_1001_COMMENTBYCOMMENT_REQUEST, MAINPOSTS_1001_MAINPOSTLIKE_REQUEST } from '../reducers/mainPosts_1001';\nimport { DislikeTwoTone, LikeTwoTone, UserOutlined, FieldTimeOutlined } from '@ant-design/icons';\nimport { Button } from 'antd';\nimport custumDateFormat from '../utilComponent/custumDateFormat';\n\nvar detailPage = function detailPage(_ref) {\n  _s();\n\n  var nickName = _ref.nickName,\n      postFlag = _ref.postFlag,\n      postId = _ref.postId;\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(function (state) {\n    return state.mainPosts_1001;\n  }),\n      mainPosts_1001Info = _useSelector.mainPosts_1001Info,\n      mainPosts_1001Comments = _useSelector.mainPosts_1001Comments,\n      mainPosts_1001CommentByComments = _useSelector.mainPosts_1001CommentByComments;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.auth;\n  }),\n      userInfo = _useSelector2.userInfo;\n\n  var ref = createRef();\n  var blank_pattern = /^\\s+|\\s+&/g;\n\n  var _useState = useState('fold'),\n      unfoldList = _useState[0],\n      setUnfoldList = _useState[1];\n\n  useEffect(function () {\n    //댓글 리스트 \n    dispatch({\n      type: MAINPOSTS_1001_COMMENTS_REQUEST,\n      data: {\n        postId: postId,\n        nickName: nickName,\n        postFlag: postFlag,\n        who: userInfo\n      }\n    }); //상세 정보 \n\n    dispatch({\n      type: MAINPOSTS_1001_DETAIL_INFO_REQUEST,\n      data: {\n        postId: postId,\n        nickName: nickName,\n        postFlag: postFlag,\n        who: userInfo\n      }\n    });\n  }, []); //게시글 좋아요, 실어요 버튼\n\n  var postLikeBtn = useCallback(function (likeFlag) {\n    if (!userInfo) {\n      alert('로그인이 필요한 서비스 입니다.');\n      return;\n    }\n\n    if (mainPosts_1001Info[0].flag === 'Y') {\n      alert('이미 좋아요! 싫어요! 했습니다.');\n      return;\n    } //게시글 좋아요!\n\n\n    dispatch({\n      type: MAINPOSTS_1001_MAINPOSTLIKE_REQUEST,\n      data: {\n        postId: postId,\n        nickName: nickName,\n        postFlag: postFlag,\n        who: userInfo,\n        flag: likeFlag,\n        mainPosts_1001Info: _toConsumableArray(mainPosts_1001Info)\n      }\n    });\n  }, [mainPosts_1001Info]); //댓글 좋아요, 싫어요 버튼 \n\n  var likeBtn = useCallback(function (commentid, flag, likeDislike) {\n    if (!userInfo) {\n      alert('로그인이 필요한 서비스 입니다.');\n      return;\n    }\n\n    if (flag === \"Y\") {\n      alert('이미 좋아요! 싫어요! 했습니다.');\n      return;\n    } else {\n      //댓글 좋아요!\n      dispatch({\n        type: MAINPOSTS_1001_COMMENTLIKE_REQUEST,\n        data: {\n          commentid: commentid,\n          postFlag: postFlag,\n          postId: postId,\n          flag: likeDislike,\n          who: userInfo,\n          nickName: nickName,\n          mainPosts_1001Comments: _toConsumableArray(mainPosts_1001Comments)\n        }\n      });\n    }\n\n    alert(\"\".concat(likeDislike));\n  }, [mainPosts_1001Comments]); //댓글 입력 \n\n  var insertComment = useCallback(function (postFlag, postId, nickName, comment) {\n    if (comment.length === 0 || comment.replace(blank_pattern, '') === \"\") {\n      alert('댓글을 입력해 주세요!');\n\n      if (ref.current) {\n        ref.current.focusInput();\n      }\n\n      return;\n    }\n\n    if (comment.length === 300) {\n      alert('300자 이상 입력 할 수 없습니다.');\n      return;\n    } //댓글 입력\n\n\n    dispatch({\n      type: MAINPOSTS_1001_COMMENTINSERT_REQUEST,\n      data: {\n        postId: postId,\n        postFlag: postFlag,\n        nickName: nickName,\n        who: userInfo,\n        comment: comment\n      }\n    });\n    setUnfoldList('fold'); //인풋 초기화, 포커스 \n\n    if (ref.current) {\n      ref.current.clearInput();\n      ref.current.focusInput();\n    }\n  }, [mainPosts_1001Comments, ref]); //대댓글 리스트 \n\n  var commentByCommentList = useCallback(function (postFlag, nickName, postId, commentId, clickCommentId, unfoldList) {\n    if (unfoldList === 'unfold' && commentId === clickCommentId) {\n      setUnfoldList('fold');\n    } else {\n      setUnfoldList('unfold');\n    }\n\n    dispatch({\n      type: MAINPOSTS_1001_COMMENTBYCOMMENT_REQUEST,\n      data: {\n        postFlag: postFlag,\n        nickName: nickName,\n        postId: postId,\n        commentId: commentId,\n        who: userInfo\n      }\n    });\n  }, [mainPosts_1001CommentByComments, unfoldList]);\n  return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: \"divTable\",\n    style: {\n      marginTop: '3%'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    className: \"divTableRowTh\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 13\n    }\n  }, __jsx(\"div\", {\n    className: \"divTableCellTh\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 17\n    }\n  }, mainPosts_1001Info[0].title, \" [\", mainPosts_1001Comments.length, \"]\", mainPosts_1001Info[0].flag)), __jsx(\"div\", {\n    className: \"divTableRow\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 12\n    }\n  }, __jsx(\"div\", {\n    className: \"divTableCell\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 17\n    }\n  }, __jsx(UserOutlined, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 19\n    }\n  }), \"  \", mainPosts_1001Info[0].userNickName, __jsx(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 73\n    }\n  }), __jsx(FieldTimeOutlined, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 19\n    }\n  }), \"  \", custumDateFormat(mainPosts_1001Info[0].createdDate), __jsx(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 95\n    }\n  }), __jsx(LikeTwoTone, {\n    twoToneColor: \"#1ba640\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 19\n    }\n  }), \" : \", mainPosts_1001Info[0].good, \" \", __jsx(DislikeTwoTone, {\n    twoToneColor: \"#1ba640\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 88\n    }\n  }), \" : \", mainPosts_1001Info[0].bad))), __jsx(\"div\", {\n    style: {\n      width: \"100%\",\n      height: \"auto\",\n      border: \"1px solid\",\n      borderColor: \"#8cc49c\",\n      marginTop: \"1%\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 7\n    }\n  }, \"\\uAD11\\uACE0\\uC785\\uB2C8\\uB2E4.\"), __jsx(\"div\", {\n    style: {\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      marginTop: \"1%\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 6\n    }\n  }, __jsx(\"div\", {\n    dangerouslySetInnerHTML: {\n      __html: mainPosts_1001Info[0].content\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 9\n    }\n  })), __jsx(\"div\", {\n    style: {\n      width: \"100%\",\n      height: \"auto\",\n      border: \"1px solid\",\n      borderColor: \"#8cc49c\",\n      marginTop: \"1%\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 5\n    }\n  }, \"\\uAD11\\uACE0\\uC785\\uB2C8\\uB2E4.\"), __jsx(\"div\", {\n    className: \"divTable\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: \"divTableRowTh\",\n    style: {\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 7\n    }\n  }, __jsx(Button, {\n    onClick: function onClick() {\n      return postLikeBtn('good');\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 11\n    }\n  }, __jsx(LikeTwoTone, {\n    twoToneColor: \"#1ba640\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 53\n    }\n  })), \"\\xA0\\xA0\\xA0\\xA0\", __jsx(Button, {\n    onClick: function onClick() {\n      return postLikeBtn('bad');\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 124\n    }\n  }, __jsx(DislikeTwoTone, {\n    twoToneColor: \"#1ba640\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 165\n    }\n  })))), __jsx(CommentTextArea, {\n    postFlag: postFlag,\n    nickName: nickName,\n    postId: postId,\n    userInfo: userInfo,\n    insertComment: insertComment,\n    ref: ref,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 4\n    }\n  }), __jsx(\"div\", {\n    className: \"divTable\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 5\n    }\n  }, mainPosts_1001Comments && mainPosts_1001Comments.map(function (v, i) {\n    return __jsx(Comments1001, {\n      key: i,\n      postFlag: postFlag,\n      nickName: nickName,\n      postId: postId,\n      userInfo: userInfo,\n      commentId: v.commentId,\n      comment: v.comment,\n      who: v.who,\n      flag: v.flag,\n      good: v.good,\n      bad: v.bad,\n      createdDate: v.createdDate,\n      likeBtn: likeBtn,\n      clickedComponent: v.clickedComponent,\n      likeDislikeflag: v.likeDislikeflag,\n      byCommentCount: v.byCommentCount,\n      commentByCommentList: commentByCommentList,\n      mainPosts_1001CommentByComments: mainPosts_1001CommentByComments[0] && mainPosts_1001CommentByComments[0].commentId === v.commentId ? mainPosts_1001CommentByComments : '',\n      unfoldList: unfoldList,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 9\n      }\n    });\n  })));\n};\n\n_s(detailPage, \"ePNCNE3auzKMvRJxsCgRT1VM1to=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\ndetailPage.getInitialProps = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(context) {\n    var postId, nickName, postFlag;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            postId = context.query.postId;\n            nickName = context.query.nickName;\n            postFlag = context.query.postFlag;\n            return _context.abrupt(\"return\", {\n              nickName: nickName,\n              postFlag: postFlag,\n              postId: postId\n            });\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nexport default detailPage;","map":{"version":3,"sources":["D:/git Repository/PersonalProject_001/frontend/pages/detailPage.js"],"names":["React","useCallback","useEffect","useState","createRef","useDispatch","useSelector","Home","Comments1001","CommentTextArea","MAINPOSTS_1001_DETAIL_INFO_REQUEST","MAINPOSTS_1001_COMMENTS_REQUEST","MAINPOSTS_1001_COMMENTINSERT_REQUEST","MAINPOSTS_1001_COMMENTLIKE_REQUEST","MAINPOSTS_1001_COMMENTBYCOMMENT_REQUEST","MAINPOSTS_1001_MAINPOSTLIKE_REQUEST","DislikeTwoTone","LikeTwoTone","UserOutlined","FieldTimeOutlined","Button","custumDateFormat","detailPage","nickName","postFlag","postId","dispatch","state","mainPosts_1001","mainPosts_1001Info","mainPosts_1001Comments","mainPosts_1001CommentByComments","auth","userInfo","ref","blank_pattern","unfoldList","setUnfoldList","type","data","who","postLikeBtn","likeFlag","alert","flag","likeBtn","commentid","likeDislike","insertComment","comment","length","replace","current","focusInput","clearInput","commentByCommentList","commentId","clickCommentId","marginTop","title","userNickName","createdDate","good","bad","width","height","border","borderColor","display","justifyContent","alignItems","__html","content","map","v","i","clickedComponent","likeDislikeflag","byCommentCount","getInitialProps","context","query"],"mappings":"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","sourcesContent":["import React, { useCallback,useEffect, useState, createRef } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport Home from '../components/mainPosts_1001/mainPosts_1001'\r\nimport Comments1001 from '../components/mainPosts_1001/mainPosts_1001_comments'\r\nimport CommentTextArea from '../components/mainPosts_1001/mainPosts_1001_textArea'\r\nimport \r\n    {MAINPOSTS_1001_DETAIL_INFO_REQUEST,\r\n     MAINPOSTS_1001_COMMENTS_REQUEST, \r\n     MAINPOSTS_1001_COMMENTINSERT_REQUEST,\r\n     MAINPOSTS_1001_COMMENTLIKE_REQUEST,\r\n     MAINPOSTS_1001_COMMENTBYCOMMENT_REQUEST,\r\n     MAINPOSTS_1001_MAINPOSTLIKE_REQUEST\r\n    } \r\nfrom '../reducers/mainPosts_1001'; \r\n\r\nimport {DislikeTwoTone,LikeTwoTone , UserOutlined, FieldTimeOutlined} from '@ant-design/icons'\r\nimport {Button} from 'antd'\r\nimport custumDateFormat from  '../utilComponent/custumDateFormat';\r\n\r\n\r\n\r\nconst detailPage  = ({nickName,postFlag,postId}) =>{\r\n\r\n  const dispatch = useDispatch(); \r\n  const {mainPosts_1001Info , \r\n         mainPosts_1001Comments,\r\n         mainPosts_1001CommentByComments\r\n        } = useSelector((state)=>state.mainPosts_1001); \r\n\r\n  const {userInfo}      = useSelector((state)=>state.auth);\r\n  const ref = createRef(); \r\n  const blank_pattern = /^\\s+|\\s+&/g;  \r\n  const [unfoldList,setUnfoldList] = useState('fold'); \r\n\r\n  useEffect(()=>{\r\n    \r\n    //댓글 리스트 \r\n    dispatch({\r\n      type:MAINPOSTS_1001_COMMENTS_REQUEST, \r\n      data:{\r\n        postId,\r\n        nickName,\r\n        postFlag,\r\n        who:userInfo, \r\n      }\r\n    }); \r\n\r\n    //상세 정보 \r\n    dispatch({\r\n          type:MAINPOSTS_1001_DETAIL_INFO_REQUEST, \r\n          data:{\r\n            postId,\r\n            nickName,\r\n            postFlag,\r\n            who:userInfo,\r\n          }\r\n    });\r\n\r\n  },[]);\r\n\r\n  //게시글 좋아요, 실어요 버튼\r\n  const postLikeBtn = useCallback((likeFlag)=>{\r\n\r\n    if(!userInfo){\r\n      alert('로그인이 필요한 서비스 입니다.'); \r\n      return;\r\n    }\r\n\r\n    if(mainPosts_1001Info[0].flag==='Y'){\r\n      \r\n      alert('이미 좋아요! 싫어요! 했습니다.');       \r\n      return; \r\n    \r\n    }\r\n\r\n    //게시글 좋아요!\r\n    dispatch({\r\n            type:MAINPOSTS_1001_MAINPOSTLIKE_REQUEST,\r\n            data:{\r\n              postId,\r\n              nickName,\r\n              postFlag,\r\n              who: userInfo, \r\n              flag:likeFlag, \r\n              mainPosts_1001Info:[...mainPosts_1001Info], \r\n            }\r\n    }); \r\n  \r\n\r\n  },[mainPosts_1001Info])\r\n\r\n\r\n  //댓글 좋아요, 싫어요 버튼 \r\n  const likeBtn =useCallback((commentid,flag,likeDislike)=>{\r\n      if(!userInfo){\r\n        alert('로그인이 필요한 서비스 입니다.'); \r\n        return;\r\n      }\r\n\r\n      if(flag===\"Y\"){\r\n        \r\n        alert('이미 좋아요! 싫어요! 했습니다.'); \r\n        return; \r\n  \r\n      }else{\r\n\r\n        //댓글 좋아요!\r\n        dispatch({\r\n          type:MAINPOSTS_1001_COMMENTLIKE_REQUEST, \r\n          data:{\r\n            commentid,\r\n            postFlag,\r\n            postId,\r\n            flag: likeDislike ,\r\n            who: userInfo,\r\n            nickName,\r\n            mainPosts_1001Comments:[...mainPosts_1001Comments],\r\n          }\r\n      }); \r\n\r\n    }\r\n\r\n     alert(`${likeDislike}`); \r\n    \r\n    },[mainPosts_1001Comments]); \r\n\r\n\r\n  //댓글 입력 \r\n  const insertComment = useCallback((postFlag,postId,nickName ,comment)=>{\r\n    if(comment.length === 0 || comment.replace(blank_pattern,'')===\"\"){\r\n      \r\n         \r\n        alert('댓글을 입력해 주세요!'); \r\n        if(ref.current){\r\n          ref.current.focusInput(); \r\n        } \r\n        return; \r\n        }\r\n    \r\n        if(comment.length === 300){\r\n          alert('300자 이상 입력 할 수 없습니다.'); \r\n          return; \r\n        }\r\n\r\n        \r\n        \r\n          //댓글 입력\r\n          dispatch({\r\n            type:MAINPOSTS_1001_COMMENTINSERT_REQUEST, \r\n            data:{\r\n              postId,\r\n              postFlag,\r\n              nickName ,\r\n              who:userInfo, \r\n              comment,\r\n            }\r\n        });\r\n\r\n        setUnfoldList('fold'); \r\n\r\n\r\n         //인풋 초기화, 포커스 \r\n        if(ref.current){\r\n          ref.current.clearInput(); \r\n          ref.current.focusInput(); \r\n        }\r\n\r\n\r\n      },[mainPosts_1001Comments,ref]);\r\n\r\n\r\n\r\n      //대댓글 리스트 \r\n      const commentByCommentList =useCallback((postFlag,nickName,postId,commentId,clickCommentId,unfoldList)=>{\r\n               \r\n                if(unfoldList==='unfold' && commentId === clickCommentId){\r\n                  setUnfoldList('fold'); \r\n                }else{\r\n                  setUnfoldList('unfold'); \r\n                }\r\n\r\n                dispatch({\r\n                    type:MAINPOSTS_1001_COMMENTBYCOMMENT_REQUEST,\r\n                    data:{\r\n                        postFlag,\r\n                        nickName,\r\n                        postId,\r\n                        commentId,\r\n                        who:userInfo,\r\n                    }\r\n                });      \r\n\r\n              \r\n               \r\n      },[mainPosts_1001CommentByComments,unfoldList]); \r\n\r\n\r\n\r\n    return (\r\n      \r\n    <div >\r\n    {/*상세 페이지 타이틀--------------------------------------------------------------------------------*/}\r\n      <div className='divTable' style={{marginTop:'3%'}}>\r\n            <div className='divTableRowTh'>\r\n                <div className='divTableCellTh'>{mainPosts_1001Info[0].title} [{mainPosts_1001Comments.length}]{mainPosts_1001Info[0].flag}</div>\r\n           </div>\r\n           <div className='divTableRow'>\r\n                <div className='divTableCell'>\r\n                  <UserOutlined />  {mainPosts_1001Info[0].userNickName}<br />\r\n                  <FieldTimeOutlined />  {custumDateFormat(mainPosts_1001Info[0].createdDate)}<br />\r\n                  <LikeTwoTone twoToneColor=\"#1ba640\"/> : {mainPosts_1001Info[0].good} <DislikeTwoTone  twoToneColor=\"#1ba640\"/> : {mainPosts_1001Info[0].bad} \r\n                </div>\r\n           </div>\r\n      </div>\r\n    {/*상세 페이지 타이틀--------------------------------------------------------------------------------*/}\r\n\r\n      <div style={{width:\"100%\",height:\"auto\", border:\"1px solid\", borderColor:\"#8cc49c\",marginTop:\"1%\"}}>\r\n         광고입니다.\r\n      </div>\r\n   \r\n\r\n\r\n\r\n\r\n\r\n    {/*상세 페이지 컨텐츠--------------------------------------------------------------------------------*/}\r\n     <div style={{display:\"flex\",justifyContent:\"center\",alignItems:\"center\",marginTop:\"1%\"}}>\r\n        <div dangerouslySetInnerHTML={{__html:mainPosts_1001Info[0].content}}/>\r\n     </div> \r\n    {/*상세 페이지 컨텐츠--------------------------------------------------------------------------------*/}   \r\n    \r\n\r\n\r\n\r\n\r\n    <div style={{width:\"100%\",height:\"auto\", border:\"1px solid\", borderColor:\"#8cc49c\",marginTop:\"1%\"}}>\r\n      광고입니다.\r\n    </div>\r\n\r\n\r\n\r\n\r\n\r\n    {/*좋아요 싫어요 버튼--------------------------------------------------------------------------------*/}\r\n    <div className='divTable'>\r\n      <div className='divTableRowTh' style={{display:\"flex\",justifyContent:\"center\",alignItems:\"center\"}}>\r\n          <Button onClick={()=>postLikeBtn('good')}><LikeTwoTone  twoToneColor=\"#1ba640\"/></Button>&nbsp;&nbsp;&nbsp;&nbsp;<Button onClick={()=>postLikeBtn('bad')}><DislikeTwoTone twoToneColor=\"#1ba640\"/></Button>\r\n      </div>\r\n    </div>\r\n    {/*좋아요 싫어요 버튼--------------------------------------------------------------------------------*/}\r\n\r\n\r\n\r\n\r\n\r\n    {/*댓글 입력--------------------------------------------------------------------------------*/}\r\n   <CommentTextArea   \r\n            postFlag={postFlag} \r\n            nickName={nickName} \r\n            postId={postId} \r\n            userInfo={userInfo}\r\n            insertComment={insertComment}\r\n            ref={ref}\r\n   />\r\n    {/*댓글 입력--------------------------------------------------------------------------------*/}\r\n\r\n\r\n\r\n\r\n    {/*댓글 리스트--------------------------------------------------------------------------------*/}\r\n\r\n    <div className=\"divTable\">\r\n      {mainPosts_1001Comments && mainPosts_1001Comments.map((v,i)=>\r\n\r\n        <Comments1001 \r\n              key={i} \r\n              postFlag={postFlag} \r\n              nickName={nickName} \r\n              postId={postId} \r\n              userInfo={userInfo}\r\n    \r\n              commentId={v.commentId} \r\n              comment={v.comment} \r\n              who={v.who} \r\n              flag={v.flag} \r\n\r\n              good={v.good}\r\n              bad={v.bad}      \r\n              createdDate={v.createdDate} \r\n    \r\n              likeBtn={likeBtn}\r\n\r\n              clickedComponent={v.clickedComponent}\r\n              likeDislikeflag={v.likeDislikeflag}\r\n              \r\n              byCommentCount={v.byCommentCount}\r\n              commentByCommentList={commentByCommentList}\r\n              mainPosts_1001CommentByComments={mainPosts_1001CommentByComments[0] && mainPosts_1001CommentByComments[0].commentId === v.commentId ? mainPosts_1001CommentByComments : ''}\r\n              unfoldList={unfoldList}\r\n\r\n              />\r\n      )\r\n    \r\n    }\r\n    </div>\r\n    {/*댓글 리스트--------------------------------------------------------------------------------*/}\r\n\r\n    </div>\r\n        )\r\n}\r\n\r\n\r\ndetailPage.getInitialProps = async (context) =>{\r\n\r\n  const postId   = context.query.postId; \r\n  const nickName = context.query.nickName; \r\n  const postFlag = context.query.postFlag; \r\n  return {nickName,postFlag,postId}; \r\n}\r\nexport default detailPage; "]},"metadata":{},"sourceType":"module"}