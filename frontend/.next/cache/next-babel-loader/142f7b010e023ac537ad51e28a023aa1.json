{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(sagaMainPosts_1001List),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchMainPosts_1001),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(sagaMainPosts_1001Detail),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchMainPosts_1001Detail),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(sagaMainPosts_1001CommentList),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(watchMainPosts_1001CommentList),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(sagaMainPosts_1001CommentByCommentList),\n    _marked8 = /*#__PURE__*/_regeneratorRuntime.mark(watchMainPosts_1001CommentByCommentList),\n    _marked9 = /*#__PURE__*/_regeneratorRuntime.mark(sagaMainPosts_1001CommentInsert),\n    _marked10 = /*#__PURE__*/_regeneratorRuntime.mark(watchMainPosts_1001CommentInsert),\n    _marked11 = /*#__PURE__*/_regeneratorRuntime.mark(sagaMainPosts_1001CommentByCommentInsert),\n    _marked12 = /*#__PURE__*/_regeneratorRuntime.mark(watchMainPosts_1001CommentByCommentInsert),\n    _marked13 = /*#__PURE__*/_regeneratorRuntime.mark(sagaMainPosts_1001CommentLike),\n    _marked14 = /*#__PURE__*/_regeneratorRuntime.mark(watchMainPosts_1001CommentLike),\n    _marked15 = /*#__PURE__*/_regeneratorRuntime.mark(mainPosts_1001Saga);\n\nimport axios from 'axios';\nimport { all, fork, takeLatest, takeEvery, put, delay, call } from 'redux-saga/effects';\nimport { MAINPOSTS_1001_LIST_REQUEST, MAINPOSTS_1001_LIST_SUCCESS, MAINPOSTS_1001_LIST_FAILURE, MAINPOSTS_1001_DETAIL_INFO_REQUEST, MAINPOSTS_1001_DETAIL_INFO_SUCCESS, MAINPOSTS_1001_DETAIL_INFO_FAILURE, MAINPOSTS_1001_COMMENTS_REQUEST, MAINPOSTS_1001_COMMENTS_SUCCESS, MAINPOSTS_1001_COMMENTS_FAILURE, MAINPOSTS_1001_COMMENTINSERT_REQUEST, MAINPOSTS_1001_COMMENTINSERT_SUCCESS, MAINPOSTS_1001_COMMENTINSERT_FAILURE, MAINPOSTS_1001_COMMENTLIKE_REQUEST, MAINPOSTS_1001_COMMENTLIKE_SUCCESS, MAINPOSTS_1001_COMMENTLIKE_FAILURE, MAINPOSTS_1001_COMMENTBYCOMMENT_REQUEST, MAINPOSTS_1001_COMMENTBYCOMMENT_SUCCESS, MAINPOSTS_1001_COMMENTBYCOMMENT_FAILURE, MAINPOSTS_1001_COMMENTBYCOMMENTINSERT_REQUEST, MAINPOSTS_1001_COMMENTBYCOMMENTINSERT_SUCCESS, MAINPOSTS_1001_COMMENTBYCOMMENTINSERT_FAILURE } from '../reducers/mainPosts_1001'; //mainPost_1001 리스트 \n//-----------------------------------------------------------------------------------\n\nfunction APImainPosts_1001List(data) {\n  return axios.post('/mainPosts_1001', {\n    data: data\n  }, {\n    withCredentials: true\n  });\n}\n\n_c = APImainPosts_1001List;\n\nfunction sagaMainPosts_1001List(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function sagaMainPosts_1001List$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(APImainPosts_1001List, action.data);\n\n        case 3:\n          result = _context.sent;\n          _context.next = 6;\n          return put({\n            type: MAINPOSTS_1001_LIST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context.next = 14;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0);\n          alert('error', _context.t0);\n          _context.next = 14;\n          return put({\n            type: MAINPOSTS_1001_LIST_FAILURE,\n            error: _context.t0\n          });\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\n\nfunction watchMainPosts_1001() {\n  return _regeneratorRuntime.wrap(function watchMainPosts_1001$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(MAINPOSTS_1001_LIST_REQUEST, sagaMainPosts_1001List);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n} //-----------------------------------------------------------------------------------\n//mainPost_1001 상세정보 \n//-----------------------------------------------------------------------------------\n\n\nfunction APImainPosts_1001Detail(data) {\n  return axios.post('/mainPosts_1001/mainPosts_1001Detail', {\n    data: data\n  }, {\n    withCredentials: true\n  });\n}\n\n_c2 = APImainPosts_1001Detail;\n\nfunction sagaMainPosts_1001Detail(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function sagaMainPosts_1001Detail$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(APImainPosts_1001Detail, action.data);\n\n        case 3:\n          result = _context3.sent;\n          _context3.next = 6;\n          return put({\n            type: MAINPOSTS_1001_DETAIL_INFO_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context3.next = 14;\n          break;\n\n        case 8:\n          _context3.prev = 8;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.error(_context3.t0);\n          alert('error', _context3.t0);\n          _context3.next = 14;\n          return put({\n            type: MAINPOSTS_1001_DETAIL_INFO_FAILURE,\n            error: _context3.t0\n          });\n\n        case 14:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 8]]);\n}\n\nfunction watchMainPosts_1001Detail() {\n  return _regeneratorRuntime.wrap(function watchMainPosts_1001Detail$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(MAINPOSTS_1001_DETAIL_INFO_REQUEST, sagaMainPosts_1001Detail);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n} //-----------------------------------------------------------------------------------\n//mainPost_1001 상세 정보 댓글 리스트\n//-----------------------------------------------------------------------------------\n\n\nfunction APImainPosts_1001CommentList(data) {\n  return axios.post('/mainPosts_1001/mainPosts_1001Comments', {\n    data: data\n  }, {\n    withCredentials: true\n  });\n}\n\n_c3 = APImainPosts_1001CommentList;\n\nfunction sagaMainPosts_1001CommentList(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function sagaMainPosts_1001CommentList$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return call(APImainPosts_1001CommentList, action.data);\n\n        case 3:\n          result = _context5.sent;\n          _context5.next = 6;\n          return put({\n            type: MAINPOSTS_1001_COMMENTS_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context5.next = 14;\n          break;\n\n        case 8:\n          _context5.prev = 8;\n          _context5.t0 = _context5[\"catch\"](0);\n          console.error(_context5.t0);\n          alert('error', _context5.t0);\n          _context5.next = 14;\n          return put({\n            type: MAINPOSTS_1001_COMMENTS_FAILURE,\n            error: _context5.t0\n          });\n\n        case 14:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[0, 8]]);\n}\n\nfunction watchMainPosts_1001CommentList() {\n  return _regeneratorRuntime.wrap(function watchMainPosts_1001CommentList$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeLatest(MAINPOSTS_1001_COMMENTS_REQUEST, sagaMainPosts_1001CommentList);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n} //-----------------------------------------------------------------------------------\n//mainPost_1001 상세 정보 대댓글 리스트\n//-----------------------------------------------------------------------------------\n\n\nfunction APImainPosts_1001CommentByCommentList(data) {\n  return axios.post('/mainPosts_1001/mainPosts_1001CommentByComments', {\n    data: data\n  }, {\n    withCredentials: true\n  });\n}\n\n_c4 = APImainPosts_1001CommentByCommentList;\n\nfunction sagaMainPosts_1001CommentByCommentList(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function sagaMainPosts_1001CommentByCommentList$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.prev = 0;\n          _context7.next = 3;\n          return call(APImainPosts_1001CommentByCommentList, action.data);\n\n        case 3:\n          result = _context7.sent;\n          _context7.next = 6;\n          return put({\n            type: MAINPOSTS_1001_COMMENTBYCOMMENT_REQUEST,\n            data: action.data\n          });\n\n        case 6:\n          _context7.next = 8;\n          return put({\n            type: MAINPOSTS_1001_COMMENTBYCOMMENT_SUCCESS,\n            data: result.data\n          });\n\n        case 8:\n          _context7.next = 16;\n          break;\n\n        case 10:\n          _context7.prev = 10;\n          _context7.t0 = _context7[\"catch\"](0);\n          console.error(_context7.t0);\n          alert('error', _context7.t0);\n          _context7.next = 16;\n          return put({\n            type: MAINPOSTS_1001_COMMENTBYCOMMENT_FAILURE,\n            error: _context7.t0\n          });\n\n        case 16:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7, null, [[0, 10]]);\n}\n\nfunction watchMainPosts_1001CommentByCommentList() {\n  return _regeneratorRuntime.wrap(function watchMainPosts_1001CommentByCommentList$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return takeLatest(MAINPOSTS_1001_COMMENTBYCOMMENT_REQUEST, sagaMainPosts_1001CommentByCommentList);\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8);\n} //-----------------------------------------------------------------------------------\n//mainPost_1001 댓글 입력\n//-----------------------------------------------------------------------------------\n\n\nfunction APImainPosts_1001CommentInsert(data) {\n  return axios.post('/mainPosts_1001/mainPosts_1001CommentInsert', {\n    data: data\n  }, {\n    withCredentials: true\n  });\n}\n\n_c5 = APImainPosts_1001CommentInsert;\n\nfunction sagaMainPosts_1001CommentInsert(action) {\n  var result, array;\n  return _regeneratorRuntime.wrap(function sagaMainPosts_1001CommentInsert$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.prev = 0;\n          _context9.next = 3;\n          return call(APImainPosts_1001CommentInsert, action.data);\n\n        case 3:\n          result = _context9.sent;\n          array = [];\n          result.data.map(function (v, i) {\n            result.data[0].kk = 'addComment';\n            array.push(v);\n          });\n          _context9.next = 8;\n          return put({\n            type: MAINPOSTS_1001_COMMENTINSERT_SUCCESS,\n            data: result.data\n          });\n\n        case 8:\n          _context9.next = 16;\n          break;\n\n        case 10:\n          _context9.prev = 10;\n          _context9.t0 = _context9[\"catch\"](0);\n          console.error(_context9.t0);\n          alert('error', _context9.t0);\n          _context9.next = 16;\n          return put({\n            type: MAINPOSTS_1001_COMMENTINSERT_FAILURE,\n            error: _context9.t0\n          });\n\n        case 16:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9, null, [[0, 10]]);\n}\n\nfunction watchMainPosts_1001CommentInsert() {\n  return _regeneratorRuntime.wrap(function watchMainPosts_1001CommentInsert$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          _context10.next = 2;\n          return takeLatest(MAINPOSTS_1001_COMMENTINSERT_REQUEST, sagaMainPosts_1001CommentInsert);\n\n        case 2:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, _marked10);\n} //-----------------------------------------------------------------------------------\n//mainPost_1001 대댓글 입력\n//-----------------------------------------------------------------------------------\n\n\nfunction APImainPosts_1001CommentByCommentInsert(data) {\n  return axios.post('/mainPosts_1001/mainPosts_1001CommentByCommentInsert', {\n    data: data\n  }, {\n    withCredentials: true\n  });\n}\n\n_c6 = APImainPosts_1001CommentByCommentInsert;\n\nfunction sagaMainPosts_1001CommentByCommentInsert(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function sagaMainPosts_1001CommentByCommentInsert$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          _context11.prev = 0;\n          _context11.next = 3;\n          return call(APImainPosts_1001CommentByCommentInsert, action.data);\n\n        case 3:\n          result = _context11.sent;\n          _context11.next = 6;\n          return put({\n            type: MAINPOSTS_1001_COMMENTBYCOMMENTINSERT_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context11.next = 14;\n          break;\n\n        case 8:\n          _context11.prev = 8;\n          _context11.t0 = _context11[\"catch\"](0);\n          console.error(_context11.t0);\n          alert('error', _context11.t0);\n          _context11.next = 14;\n          return put({\n            type: MAINPOSTS_1001_COMMENTBYCOMMENTINSERT_FAILURE,\n            error: _context11.t0\n          });\n\n        case 14:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, _marked11, null, [[0, 8]]);\n}\n\nfunction watchMainPosts_1001CommentByCommentInsert() {\n  return _regeneratorRuntime.wrap(function watchMainPosts_1001CommentByCommentInsert$(_context12) {\n    while (1) {\n      switch (_context12.prev = _context12.next) {\n        case 0:\n          _context12.next = 2;\n          return takeLatest(MAINPOSTS_1001_COMMENTBYCOMMENTINSERT_REQUEST, sagaMainPosts_1001CommentByCommentInsert);\n\n        case 2:\n        case \"end\":\n          return _context12.stop();\n      }\n    }\n  }, _marked12);\n} //-----------------------------------------------------------------------------------\n//mainPost_1001 댓글 LIKE / DISLIKE \n//-----------------------------------------------------------------------------------\n\n\nfunction APImainPosts_1001CommentLike(data) {\n  return axios.post('/mainPosts_1001/mainPosts_1001CommentLike', {\n    data: data\n  }, {\n    withCredentials: true\n  });\n}\n\n_c7 = APImainPosts_1001CommentLike;\n\nfunction sagaMainPosts_1001CommentLike(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function sagaMainPosts_1001CommentLike$(_context13) {\n    while (1) {\n      switch (_context13.prev = _context13.next) {\n        case 0:\n          _context13.prev = 0;\n          _context13.next = 3;\n          return call(APImainPosts_1001CommentLike, action.data);\n\n        case 3:\n          result = _context13.sent;\n          action.data.mainPosts_1001Comments.map(function (v, i) {\n            if (v.commentId === action.data.commentid) {\n              action.data.mainPosts_1001Comments[i] = _objectSpread(_objectSpread({}, action.data.mainPosts_1001Comments[i]), {}, {\n                clickedComponent: action.data.commentid,\n                flag: 'Y',\n                likeDislikeflag: action.data.flag\n              });\n            }\n          });\n          _context13.next = 7;\n          return put({\n            type: MAINPOSTS_1001_COMMENTLIKE_SUCCESS,\n            //이런식으로도 리듀서에 데이터를 보낼 수 있다. \n            //data:{array : action.data.mainPosts_1001Comments, values :action.data.commentid },\n            data: action.data.mainPosts_1001Comments\n          });\n\n        case 7:\n          _context13.next = 15;\n          break;\n\n        case 9:\n          _context13.prev = 9;\n          _context13.t0 = _context13[\"catch\"](0);\n          console.error(_context13.t0);\n          alert('error', _context13.t0);\n          _context13.next = 15;\n          return put({\n            type: MAINPOSTS_1001_COMMENTLIKE_FAILURE,\n            error: _context13.t0\n          });\n\n        case 15:\n        case \"end\":\n          return _context13.stop();\n      }\n    }\n  }, _marked13, null, [[0, 9]]);\n}\n\nfunction watchMainPosts_1001CommentLike() {\n  return _regeneratorRuntime.wrap(function watchMainPosts_1001CommentLike$(_context14) {\n    while (1) {\n      switch (_context14.prev = _context14.next) {\n        case 0:\n          _context14.next = 2;\n          return takeLatest(MAINPOSTS_1001_COMMENTLIKE_REQUEST, sagaMainPosts_1001CommentLike);\n\n        case 2:\n        case \"end\":\n          return _context14.stop();\n      }\n    }\n  }, _marked14);\n} //-----------------------------------------------------------------------------------\n\n\nexport default function mainPosts_1001Saga() {\n  return _regeneratorRuntime.wrap(function mainPosts_1001Saga$(_context15) {\n    while (1) {\n      switch (_context15.prev = _context15.next) {\n        case 0:\n          _context15.next = 2;\n          return all([fork(watchMainPosts_1001), fork(watchMainPosts_1001Detail), fork(watchMainPosts_1001CommentList), fork(watchMainPosts_1001CommentInsert), fork(watchMainPosts_1001CommentLike), fork(watchMainPosts_1001CommentByCommentList), fork(watchMainPosts_1001CommentByCommentInsert)]);\n\n        case 2:\n        case \"end\":\n          return _context15.stop();\n      }\n    }\n  }, _marked15);\n}\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7;\n\n$RefreshReg$(_c, \"APImainPosts_1001List\");\n$RefreshReg$(_c2, \"APImainPosts_1001Detail\");\n$RefreshReg$(_c3, \"APImainPosts_1001CommentList\");\n$RefreshReg$(_c4, \"APImainPosts_1001CommentByCommentList\");\n$RefreshReg$(_c5, \"APImainPosts_1001CommentInsert\");\n$RefreshReg$(_c6, \"APImainPosts_1001CommentByCommentInsert\");\n$RefreshReg$(_c7, \"APImainPosts_1001CommentLike\");","map":{"version":3,"sources":["D:/git Repository/PersonalProject_001/frontend/sagas/mainPosts_1001Saga.js"],"names":["sagaMainPosts_1001List","watchMainPosts_1001","sagaMainPosts_1001Detail","watchMainPosts_1001Detail","sagaMainPosts_1001CommentList","watchMainPosts_1001CommentList","sagaMainPosts_1001CommentByCommentList","watchMainPosts_1001CommentByCommentList","sagaMainPosts_1001CommentInsert","watchMainPosts_1001CommentInsert","sagaMainPosts_1001CommentByCommentInsert","watchMainPosts_1001CommentByCommentInsert","sagaMainPosts_1001CommentLike","watchMainPosts_1001CommentLike","mainPosts_1001Saga","axios","all","fork","takeLatest","takeEvery","put","delay","call","MAINPOSTS_1001_LIST_REQUEST","MAINPOSTS_1001_LIST_SUCCESS","MAINPOSTS_1001_LIST_FAILURE","MAINPOSTS_1001_DETAIL_INFO_REQUEST","MAINPOSTS_1001_DETAIL_INFO_SUCCESS","MAINPOSTS_1001_DETAIL_INFO_FAILURE","MAINPOSTS_1001_COMMENTS_REQUEST","MAINPOSTS_1001_COMMENTS_SUCCESS","MAINPOSTS_1001_COMMENTS_FAILURE","MAINPOSTS_1001_COMMENTINSERT_REQUEST","MAINPOSTS_1001_COMMENTINSERT_SUCCESS","MAINPOSTS_1001_COMMENTINSERT_FAILURE","MAINPOSTS_1001_COMMENTLIKE_REQUEST","MAINPOSTS_1001_COMMENTLIKE_SUCCESS","MAINPOSTS_1001_COMMENTLIKE_FAILURE","MAINPOSTS_1001_COMMENTBYCOMMENT_REQUEST","MAINPOSTS_1001_COMMENTBYCOMMENT_SUCCESS","MAINPOSTS_1001_COMMENTBYCOMMENT_FAILURE","MAINPOSTS_1001_COMMENTBYCOMMENTINSERT_REQUEST","MAINPOSTS_1001_COMMENTBYCOMMENTINSERT_SUCCESS","MAINPOSTS_1001_COMMENTBYCOMMENTINSERT_FAILURE","APImainPosts_1001List","data","post","withCredentials","action","result","type","console","error","alert","APImainPosts_1001Detail","APImainPosts_1001CommentList","APImainPosts_1001CommentByCommentList","APImainPosts_1001CommentInsert","array","map","v","i","kk","push","APImainPosts_1001CommentByCommentInsert","APImainPosts_1001CommentLike","mainPosts_1001Comments","commentId","commentid","clickedComponent","flag","likeDislikeflag"],"mappings":"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","sourcesContent":["import axios from 'axios'\r\nimport {all,fork,takeLatest,takeEvery ,put, delay,call} from 'redux-saga/effects'; \r\nimport \r\n    {\r\n        MAINPOSTS_1001_LIST_REQUEST,\r\n        MAINPOSTS_1001_LIST_SUCCESS,\r\n        MAINPOSTS_1001_LIST_FAILURE,    \r\n\r\n        MAINPOSTS_1001_DETAIL_INFO_REQUEST,\r\n        MAINPOSTS_1001_DETAIL_INFO_SUCCESS,\r\n        MAINPOSTS_1001_DETAIL_INFO_FAILURE,\r\n\r\n        MAINPOSTS_1001_COMMENTS_REQUEST, \r\n        MAINPOSTS_1001_COMMENTS_SUCCESS, \r\n        MAINPOSTS_1001_COMMENTS_FAILURE, \r\n\r\n        MAINPOSTS_1001_COMMENTINSERT_REQUEST,\r\n        MAINPOSTS_1001_COMMENTINSERT_SUCCESS,\r\n        MAINPOSTS_1001_COMMENTINSERT_FAILURE, \r\n\r\n        MAINPOSTS_1001_COMMENTLIKE_REQUEST,\r\n        MAINPOSTS_1001_COMMENTLIKE_SUCCESS,\r\n        MAINPOSTS_1001_COMMENTLIKE_FAILURE,\r\n        \r\n        MAINPOSTS_1001_COMMENTBYCOMMENT_REQUEST,\r\n        MAINPOSTS_1001_COMMENTBYCOMMENT_SUCCESS,\r\n        MAINPOSTS_1001_COMMENTBYCOMMENT_FAILURE,\r\n\r\n        MAINPOSTS_1001_COMMENTBYCOMMENTINSERT_REQUEST,\r\n        MAINPOSTS_1001_COMMENTBYCOMMENTINSERT_SUCCESS,\r\n        MAINPOSTS_1001_COMMENTBYCOMMENTINSERT_FAILURE\r\n\r\n    } \r\nfrom '../reducers/mainPosts_1001'; \r\n\r\n\r\n\r\n//mainPost_1001 리스트 \r\n//-----------------------------------------------------------------------------------\r\nfunction APImainPosts_1001List(data){\r\n    return axios.post('/mainPosts_1001',{data},{withCredentials:true})\r\n}\r\n\r\nfunction* sagaMainPosts_1001List(action){\r\n\r\n    try{\r\n      const result = yield call(APImainPosts_1001List,action.data);  \r\n\r\n      yield  put({\r\n            type:MAINPOSTS_1001_LIST_SUCCESS, \r\n            data:result.data,\r\n        });\r\n\r\n    }catch(e){\r\n\r\n        console.error(e); \r\n        alert('error', e); \r\n        yield put({\r\n            type:MAINPOSTS_1001_LIST_FAILURE, \r\n            error: e, \r\n        }); \r\n    }\r\n}\r\n\r\nfunction* watchMainPosts_1001(){\r\n    yield takeLatest(MAINPOSTS_1001_LIST_REQUEST,sagaMainPosts_1001List); \r\n}\r\n//-----------------------------------------------------------------------------------\r\n\r\n\r\n\r\n\r\n//mainPost_1001 상세정보 \r\n//-----------------------------------------------------------------------------------\r\nfunction APImainPosts_1001Detail(data){\r\n    return axios.post('/mainPosts_1001/mainPosts_1001Detail',{data},{withCredentials:true})\r\n}\r\n\r\nfunction* sagaMainPosts_1001Detail(action){\r\n\r\n    try{\r\n      const result = yield call(APImainPosts_1001Detail,action.data); \r\n      yield  put({\r\n            type:MAINPOSTS_1001_DETAIL_INFO_SUCCESS, \r\n            data:result.data,\r\n        });\r\n\r\n    }catch(e){\r\n\r\n        console.error(e); \r\n        alert('error', e); \r\n        yield put({\r\n            type:MAINPOSTS_1001_DETAIL_INFO_FAILURE, \r\n            error: e, \r\n        }); \r\n    }\r\n}\r\n\r\nfunction* watchMainPosts_1001Detail(){\r\n    yield takeLatest(MAINPOSTS_1001_DETAIL_INFO_REQUEST,sagaMainPosts_1001Detail); \r\n}\r\n//-----------------------------------------------------------------------------------\r\n\r\n\r\n\r\n//mainPost_1001 상세 정보 댓글 리스트\r\n//-----------------------------------------------------------------------------------\r\nfunction APImainPosts_1001CommentList(data){\r\n    return axios.post('/mainPosts_1001/mainPosts_1001Comments',{data},{withCredentials:true})\r\n}\r\n\r\n\r\nfunction* sagaMainPosts_1001CommentList(action){\r\n\r\n    try{\r\n      const result = yield call(APImainPosts_1001CommentList,action.data); \r\n      yield  put({\r\n            type:MAINPOSTS_1001_COMMENTS_SUCCESS, \r\n            data:result.data,\r\n        });\r\n\r\n    }catch(e){\r\n\r\n        console.error(e); \r\n        alert('error', e); \r\n        yield put({\r\n            type:MAINPOSTS_1001_COMMENTS_FAILURE, \r\n            error: e, \r\n        }); \r\n    }\r\n}\r\n\r\n\r\nfunction* watchMainPosts_1001CommentList(){\r\n    yield takeLatest(MAINPOSTS_1001_COMMENTS_REQUEST,sagaMainPosts_1001CommentList); \r\n}\r\n//-----------------------------------------------------------------------------------\r\n\r\n\r\n//mainPost_1001 상세 정보 대댓글 리스트\r\n//-----------------------------------------------------------------------------------\r\n\r\nfunction APImainPosts_1001CommentByCommentList(data){\r\n    return axios.post('/mainPosts_1001/mainPosts_1001CommentByComments',{data},{withCredentials:true})\r\n}\r\n\r\n\r\nfunction* sagaMainPosts_1001CommentByCommentList(action){\r\n\r\n    try{\r\n      const result = yield call(APImainPosts_1001CommentByCommentList,action.data); \r\n\r\n      yield put({\r\n        type:MAINPOSTS_1001_COMMENTBYCOMMENT_REQUEST, \r\n        data:action.data,\r\n      })\r\n      yield  put({\r\n            type:MAINPOSTS_1001_COMMENTBYCOMMENT_SUCCESS, \r\n            data:result.data,\r\n        });\r\n\r\n    }catch(e){\r\n\r\n        console.error(e); \r\n        alert('error', e); \r\n        yield put({\r\n            type:MAINPOSTS_1001_COMMENTBYCOMMENT_FAILURE, \r\n            error: e, \r\n        }); \r\n    }\r\n}\r\n\r\n\r\nfunction* watchMainPosts_1001CommentByCommentList(){\r\n    yield takeLatest(MAINPOSTS_1001_COMMENTBYCOMMENT_REQUEST,sagaMainPosts_1001CommentByCommentList); \r\n}\r\n//-----------------------------------------------------------------------------------\r\n\r\n\r\n\r\n\r\n\r\n\r\n//mainPost_1001 댓글 입력\r\n//-----------------------------------------------------------------------------------\r\nfunction APImainPosts_1001CommentInsert(data){\r\n    return axios.post('/mainPosts_1001/mainPosts_1001CommentInsert',{data},{withCredentials:true})\r\n}\r\n\r\n\r\nfunction* sagaMainPosts_1001CommentInsert(action){\r\n\r\n    try{\r\n      const result = yield call(APImainPosts_1001CommentInsert,action.data); \r\n      const array=[]; \r\n      result.data.map((v,i)=>{\r\n        result.data[0].kk='addComment'; \r\n        array.push(v); \r\n      }); \r\n      \r\n\r\n      yield  put({\r\n            type:MAINPOSTS_1001_COMMENTINSERT_SUCCESS, \r\n            data:result.data,\r\n        });\r\n\r\n    }catch(e){\r\n\r\n        console.error(e); \r\n        alert('error', e); \r\n        yield put({\r\n            type:MAINPOSTS_1001_COMMENTINSERT_FAILURE, \r\n            error: e, \r\n        }); \r\n    }\r\n}\r\n\r\n\r\nfunction* watchMainPosts_1001CommentInsert(){\r\n    yield takeLatest(MAINPOSTS_1001_COMMENTINSERT_REQUEST,sagaMainPosts_1001CommentInsert); \r\n}\r\n//-----------------------------------------------------------------------------------\r\n\r\n//mainPost_1001 대댓글 입력\r\n//-----------------------------------------------------------------------------------\r\nfunction APImainPosts_1001CommentByCommentInsert(data){\r\n    return axios.post('/mainPosts_1001/mainPosts_1001CommentByCommentInsert',{data},{withCredentials:true})\r\n}\r\n\r\n\r\nfunction* sagaMainPosts_1001CommentByCommentInsert(action){\r\n\r\n    try{\r\n      const result = yield call(APImainPosts_1001CommentByCommentInsert,action.data); \r\n\r\n      yield  put({\r\n            type:MAINPOSTS_1001_COMMENTBYCOMMENTINSERT_SUCCESS,\r\n            data:result.data,\r\n        });\r\n\r\n    }catch(e){\r\n\r\n        console.error(e); \r\n        alert('error', e); \r\n        yield put({\r\n            type:MAINPOSTS_1001_COMMENTBYCOMMENTINSERT_FAILURE, \r\n            error: e, \r\n        }); \r\n    }\r\n}\r\n\r\n\r\nfunction* watchMainPosts_1001CommentByCommentInsert(){\r\n    yield takeLatest(MAINPOSTS_1001_COMMENTBYCOMMENTINSERT_REQUEST,sagaMainPosts_1001CommentByCommentInsert); \r\n}\r\n//-----------------------------------------------------------------------------------\r\n\r\n\r\n\r\n\r\n//mainPost_1001 댓글 LIKE / DISLIKE \r\n//-----------------------------------------------------------------------------------\r\nfunction APImainPosts_1001CommentLike(data){\r\n    return axios.post('/mainPosts_1001/mainPosts_1001CommentLike',{data},{withCredentials:true})\r\n}\r\n\r\n\r\nfunction* sagaMainPosts_1001CommentLike(action){\r\n\r\n    try{\r\n      const result = yield call(APImainPosts_1001CommentLike,action.data); \r\n     \r\n        action.data.mainPosts_1001Comments.map((v,i)=>{\r\n            if(v.commentId === action.data.commentid){\r\n                action.data.mainPosts_1001Comments[i] = {...action.data.mainPosts_1001Comments[i], \r\n                                                            clickedComponent:action.data.commentid,\r\n                                                            flag:'Y', \r\n                                                            likeDislikeflag:action.data.flag}\r\n            }\r\n        }); \r\n        \r\n      yield  put({\r\n            type:MAINPOSTS_1001_COMMENTLIKE_SUCCESS, \r\n            //이런식으로도 리듀서에 데이터를 보낼 수 있다. \r\n            //data:{array : action.data.mainPosts_1001Comments, values :action.data.commentid },\r\n            data:action.data.mainPosts_1001Comments,\r\n        });\r\n\r\n    }catch(e){\r\n\r\n        console.error(e); \r\n        alert('error', e); \r\n        yield put({\r\n            type:MAINPOSTS_1001_COMMENTLIKE_FAILURE, \r\n            error: e, \r\n        }); \r\n    }\r\n}\r\n\r\n\r\nfunction* watchMainPosts_1001CommentLike(){\r\n    yield takeLatest(MAINPOSTS_1001_COMMENTLIKE_REQUEST,sagaMainPosts_1001CommentLike); \r\n}\r\n//-----------------------------------------------------------------------------------\r\n\r\n\r\n\r\n\r\n\r\nexport default function* mainPosts_1001Saga(){\r\n\r\n    yield all([\r\n        fork(watchMainPosts_1001), \r\n        fork(watchMainPosts_1001Detail), \r\n        fork(watchMainPosts_1001CommentList), \r\n        fork(watchMainPosts_1001CommentInsert), \r\n        fork(watchMainPosts_1001CommentLike), \r\n        fork(watchMainPosts_1001CommentByCommentList), \r\n        fork(watchMainPosts_1001CommentByCommentInsert), \r\n     ])\r\n}"]},"metadata":{},"sourceType":"module"}