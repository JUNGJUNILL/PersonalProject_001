{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport produce from 'immer';\nexport var initialState = {\n  number: 0\n};\nexport var COUNT_PLUS_REQUEST = 'COUNT_PLUS_REQUEST'; // count 1을 증가시킬 액션 타입이다.\n\nexport var COUNT_PLUS_SUCCESS = 'COUNT_PLUS_SUCCESS';\nexport var COUNT_PLUS_FAILURE = 'COUNT_PLUS_FAILURE';\nexport var COUNT_MINUS_REQUEST = 'COUNT_MINUS_REQUEST'; // count 1을 증가시킬 액션 타입이다.\n\nexport var COUNT_MINUS_SUCCESS = 'COUNT_MINUS_SUCCESS';\nexport var COUNT_MINUS_FAILURE = 'COUNT_MINUS_FAILURE'; // export const countMinusAction = () =>({\n//     type:COUNT_MINUS,\n// });\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  return produce(state, function (draft) {\n    switch (action.type) {\n      case COUNT_PLUS_REQUEST:\n        {\n          break;\n        }\n\n      case COUNT_PLUS_SUCCESS:\n        {\n          console.log('draft', draft);\n          draft.number = state.number + action.data;\n          break;\n        }\n\n      case COUNT_MINUS_SUCCESS:\n        return _objectSpread(_objectSpread({}, state), {}, {\n          number: state.number - action.data\n        });\n\n      default:\n        return _objectSpread({}, state);\n    }\n  });\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/git Repository/PersonalProject_001/frontend/reducers/count.js"],"names":["produce","initialState","number","COUNT_PLUS_REQUEST","COUNT_PLUS_SUCCESS","COUNT_PLUS_FAILURE","COUNT_MINUS_REQUEST","COUNT_MINUS_SUCCESS","COUNT_MINUS_FAILURE","reducer","state","action","draft","type","console","log","data"],"mappings":";;;;;;AAAA,OAAOA,OAAP,MAAoB,OAApB;AAGA,OAAO,IAAMC,YAAY,GAAG;AAEpBC,EAAAA,MAAM,EAAG;AAFW,CAArB;AAKP,OAAO,IAAMC,kBAAkB,GAAG,oBAA3B,C,CAAiD;;AACxD,OAAO,IAAMC,kBAAkB,GAAG,oBAA3B;AACP,OAAO,IAAMC,kBAAkB,GAAG,oBAA3B;AAKP,OAAO,IAAMC,mBAAmB,GAAG,qBAA5B,C,CAAmD;;AAC1D,OAAO,IAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,IAAMC,mBAAmB,GAAG,qBAA5B,C,CAIP;AACA;AACA;;AAIA,IAAMC,OAAO,GAAG,SAAVA,OAAU,GAAiC;AAAA,MAAhCC,KAAgC,uEAAxBT,YAAwB;AAAA,MAAVU,MAAU;AAE7C,SAAOX,OAAO,CAACU,KAAD,EAAO,UAACE,KAAD,EAAS;AAK1B,YAAQD,MAAM,CAACE,IAAf;AAEI,WAAKV,kBAAL;AAAyB;AACrB;AACH;;AAED,WAAKC,kBAAL;AAAyB;AACrBU,UAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAsBH,KAAtB;AACAA,UAAAA,KAAK,CAACV,MAAN,GAAeQ,KAAK,CAACR,MAAN,GAAeS,MAAM,CAACK,IAArC;AACA;AAEH;;AAED,WAAKT,mBAAL;AACI,+CACOG,KADP;AAEIR,UAAAA,MAAM,EAAGQ,KAAK,CAACR,MAAN,GAAcS,MAAM,CAACK;AAFlC;;AAIJ;AACI,iCACON,KADP;AAnBR;AAwBH,GA7Ba,CAAd;AA+BH,CAjCD;;AAmCA,eAAeD,OAAf","sourcesContent":["import produce from 'immer'\r\n\r\n\r\nexport const initialState = {\r\n\r\n        number : 0,\r\n} \r\n\r\nexport const COUNT_PLUS_REQUEST = 'COUNT_PLUS_REQUEST'; // count 1을 증가시킬 액션 타입이다.\r\nexport const COUNT_PLUS_SUCCESS = 'COUNT_PLUS_SUCCESS'; \r\nexport const COUNT_PLUS_FAILURE = 'COUNT_PLUS_FAILURE'; \r\n\r\n\r\n\r\n\r\nexport const COUNT_MINUS_REQUEST = 'COUNT_MINUS_REQUEST'; // count 1을 증가시킬 액션 타입이다.\r\nexport const COUNT_MINUS_SUCCESS = 'COUNT_MINUS_SUCCESS'; \r\nexport const COUNT_MINUS_FAILURE = 'COUNT_MINUS_FAILURE'; \r\n\r\n\r\n\r\n// export const countMinusAction = () =>({\r\n//     type:COUNT_MINUS,\r\n// });\r\n\r\n\r\n\r\nconst reducer = (state = initialState, action) =>{\r\n\r\n    return produce(state,(draft)=>{\r\n\r\n\r\n    \r\n\r\n        switch (action.type) {\r\n            \r\n            case COUNT_PLUS_REQUEST: {\r\n                break; \r\n            }\r\n\r\n            case COUNT_PLUS_SUCCESS: {\r\n                console.log('draft' , draft); \r\n                draft.number = state.number + action.data;\r\n                break; \r\n                \r\n            }\r\n                \r\n            case COUNT_MINUS_SUCCESS:\r\n                return {\r\n                    ...state, \r\n                    number : state.number -action.data, \r\n                }\r\n            default :\r\n                return {\r\n                    ...state\r\n                }; \r\n        }\r\n\r\n    })\r\n\r\n}; \r\n\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}