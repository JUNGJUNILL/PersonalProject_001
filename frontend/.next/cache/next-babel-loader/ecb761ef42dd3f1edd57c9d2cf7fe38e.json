{"ast":null,"code":"var _jsxFileName = \"D:\\\\git Repository\\\\PersonalProject_001\\\\frontend\\\\pages\\\\mainPosts_1001.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { Button } from 'antd';\nimport Router, { useRouter } from 'next/router';\nimport Link from 'next/link';\nimport Pagenation from '../utilComponent/Pagenation';\nimport { DislikeTwoTone, LikeTwoTone, EyeOutlined, UserOutlined, FieldTimeOutlined, FolderTwoTone } from '@ant-design/icons';\nimport { MAINPOSTS_1001_LIST_REQUEST } from '../reducers/mainPosts_1001';\nimport { LOAD_USER_REQUEST } from '../reducers/auth';\nimport { useDispatch, useSelector } from 'react-redux';\nimport isEmpty from '../utilComponent/isEmpty';\nimport custumDateFormat from '../utilComponent/custumDateFormat';\n\nconst mainPosts_1001 = ({\n  pages,\n  group\n}) => {\n  const dispatch = useDispatch();\n  const router = useRouter();\n  const {\n    mainPosts_1001\n  } = useSelector(state => state.mainPosts_1001);\n  const {\n    userInfo\n  } = useSelector(state => state.auth);\n  /*-------------------------------------------페이징 처리 로직 start-------------------------------------------------------*/\n\n  const {\n    0: nowPage,\n    1: setNowPage\n  } = useState(0); //현재 페이지\n\n  const {\n    0: postsPerPage\n  } = useState(2); //한 페이지당 list 수 \n\n  const {\n    0: groupPage,\n    1: setGroupPage\n  } = useState(5); //페이징 그룹 당 수  1~5 , 6~10 , 11~15 ... 5의 배수만 입력가능 \n\n  const {\n    0: nowGroupPageArray,\n    1: setNowGroupPageArray\n  } = useState([]); //현재 페이징 그룹 배열\n\n  const pagenate = useCallback((pageNumber, groupPageArray) => {\n    setNowPage(pageNumber);\n    nowGroupPageArray.length = 0;\n    setNowGroupPageArray(nowGroupPageArray.concat(groupPageArray));\n    const indexOfLastPost = pageNumber * postsPerPage;\n    const indexOfFirstPost = indexOfLastPost - postsPerPage;\n    dispatch({\n      type: MAINPOSTS_1001_LIST_REQUEST,\n      data: {\n        postFlag: '1001',\n        currentPage: indexOfFirstPost,\n        maxPage: postsPerPage\n      }\n    });\n  }, [nowPage, nowGroupPageArray]); //01.페이지 첫 로드시.. \n  //02.상세 정보 본 후 뒤로 가기 눌렀을 경우 \n  //03.페이지 이동 후 뒤로가기 눌렀을 경우\n\n  useEffect(() => {\n    //초기에 groupPage 만큼 배열을 생생해 주어야 한다. \n    let pageArray = Array.from({\n      length: groupPage\n    }, (v, i) => i); //groupPage 페이지 그룹 변경 시 로직 (5에서 ▶ 눌렀을 때)\n\n    if (group % groupPage === 0) {\n      pageArray.length = 0;\n\n      for (let i = group; i < group + groupPage; i++) {\n        pageArray.push(i);\n      }\n    }\n\n    pagenate(parseInt(pages), pageArray);\n  }, [pages]);\n  /*-------------------------------------------페이징 처리 로직   end-------------------------------------------------------*/\n  //게시글 상세 페이지 \n\n  const gotoDetail = useCallback((postId, userNickName, postFlag) => {\n    router.push({\n      pathname: '/detailPage',\n      query: {\n        postId,\n        nickName: userNickName,\n        postFlag\n      }\n    });\n  }, []); //게시글 쓰기\n\n  const gotoEdit = useCallback(() => {\n    router.push('/CKEditor');\n  }, []);\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: \"divTable\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }\n  }, mainPosts_1001.map((v, i) => __jsx(\"div\", {\n    className: \"divTableRow\",\n    onClick: () => gotoDetail(v.postId, v.userNickName, '1001', nowPage),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 16\n    }\n  }, __jsx(\"div\", {\n    className: \"divTableCell\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 19\n    }\n  }, __jsx(\"div\", {\n    className: \"divImageCell\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 49\n    }\n  }, __jsx(\"img\", {\n    src: \"https://dimg.donga.com/wps/NEWS/IMAGE/2019/11/24/98510015.1.jpg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 79\n    }\n  }))), __jsx(\"div\", {\n    className: \"divTableCell\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 19\n    }\n  }, __jsx(Link, {\n    href: {\n      pathname: '/detailPage',\n      query: {\n        postId: v.postId,\n        nickName: v.userNickName,\n        postFlag: '1001'\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 50\n    }\n  }, __jsx(\"a\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 155\n    }\n  }, isEmpty(v.title))), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 187\n    }\n  }), __jsx(LikeTwoTone, {\n    twoToneColor: \"#1ba640\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 19\n    }\n  }), \" : \", v.good, \" \", __jsx(DislikeTwoTone, {\n    twoToneColor: \"#1ba640\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 68\n    }\n  }), \" : \", v.bad, \"  \", __jsx(EyeOutlined, {\n    color: \"red\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 120\n    }\n  }), \" : \", v.hit, __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 156\n    }\n  }), __jsx(UserOutlined, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 19\n    }\n  }), \" \", isEmpty(v.userNickName), \"   \", __jsx(FieldTimeOutlined, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 64\n    }\n  }), \" \", custumDateFormat(v.createdDate), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 119\n    }\n  }))))), __jsx(\"div\", {\n    className: \"divTable\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    className: \"divTableRowTh\",\n    style: {\n      display: \"flex\",\n      justifyContent: \"right\",\n      alignItems: \"right\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }\n  }, userInfo && __jsx(Button, {\n    type: \"primary\",\n    onClick: gotoEdit,\n    style: {\n      marginTop: \"1%\",\n      display: \"block\",\n      float: \"right\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 21\n    }\n  }, \"\\uAE00\\uC4F0\\uAE30\"))), __jsx(Pagenation, {\n    pagenate: pagenate,\n    dataLength: mainPosts_1001.length,\n    postsPerPage: postsPerPage,\n    nowPage: nowPage,\n    groupPage: groupPage,\n    groupPageArray: nowGroupPageArray,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }\n  }));\n};\n\nmainPosts_1001.getInitialProps = async context => {\n  const pages = context.query.nowPage;\n  const group = parseInt(context.query.group);\n  return {\n    pages,\n    group\n  };\n};\n\nexport default mainPosts_1001;","map":{"version":3,"sources":["D:/git Repository/PersonalProject_001/frontend/pages/mainPosts_1001.js"],"names":["React","useState","useEffect","useCallback","Button","Router","useRouter","Link","Pagenation","DislikeTwoTone","LikeTwoTone","EyeOutlined","UserOutlined","FieldTimeOutlined","FolderTwoTone","MAINPOSTS_1001_LIST_REQUEST","LOAD_USER_REQUEST","useDispatch","useSelector","isEmpty","custumDateFormat","mainPosts_1001","pages","group","dispatch","router","state","userInfo","auth","nowPage","setNowPage","postsPerPage","groupPage","setGroupPage","nowGroupPageArray","setNowGroupPageArray","pagenate","pageNumber","groupPageArray","length","concat","indexOfLastPost","indexOfFirstPost","type","data","postFlag","currentPage","maxPage","pageArray","Array","from","v","i","push","parseInt","gotoDetail","postId","userNickName","pathname","query","nickName","gotoEdit","map","title","good","bad","hit","createdDate","display","justifyContent","alignItems","marginTop","float","getInitialProps","context"],"mappings":"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","sourcesContent":["\r\nimport React , {useState,useEffect,useCallback}from 'react'\r\nimport {Button} from 'antd'\r\nimport Router ,{ useRouter } from 'next/router';\r\nimport Link from 'next/link'\r\nimport Pagenation from '../utilComponent/Pagenation'\r\nimport {DislikeTwoTone,LikeTwoTone ,EyeOutlined, UserOutlined, FieldTimeOutlined, FolderTwoTone} from '@ant-design/icons'\r\nimport \r\n    {MAINPOSTS_1001_LIST_REQUEST,} \r\nfrom '../reducers/mainPosts_1001'; \r\n\r\n\r\nimport \r\n    {LOAD_USER_REQUEST,\r\n    } \r\nfrom '../reducers/auth'; \r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport isEmpty from '../utilComponent/isEmpty';\r\nimport custumDateFormat from  '../utilComponent/custumDateFormat';\r\n\r\n\r\n\r\n\r\nconst mainPosts_1001 = ({pages,group})=>{\r\n\r\n  const dispatch         = useDispatch(); \r\n  const router           = useRouter(); \r\n  const {mainPosts_1001} = useSelector((state)=>state.mainPosts_1001); \r\n  const {userInfo}       = useSelector((state)=>state.auth);\r\n\r\n\r\n  /*-------------------------------------------페이징 처리 로직 start-------------------------------------------------------*/\r\n  const [nowPage,setNowPage] = useState(0);                       //현재 페이지\r\n  const [postsPerPage] = useState(2);                             //한 페이지당 list 수 \r\n  const [groupPage , setGroupPage] = useState(5);                 //페이징 그룹 당 수  1~5 , 6~10 , 11~15 ... 5의 배수만 입력가능 \r\n  const [nowGroupPageArray,setNowGroupPageArray] =useState([]);   //현재 페이징 그룹 배열\r\n  \r\n\r\n  const pagenate =useCallback((pageNumber, groupPageArray)=>{\r\n\r\n    setNowPage(pageNumber); \r\n\r\n    nowGroupPageArray.length=0; \r\n\r\n    setNowGroupPageArray(nowGroupPageArray.concat(groupPageArray));\r\n\r\n    const indexOfLastPost = pageNumber * postsPerPage;   \r\n    const indexOfFirstPost = indexOfLastPost - postsPerPage;  \r\n\r\n     dispatch({\r\n        type:MAINPOSTS_1001_LIST_REQUEST, \r\n        data:{postFlag:'1001',\r\n              currentPage:indexOfFirstPost,\r\n              maxPage:postsPerPage\r\n       }, \r\n    });\r\n\r\n},[nowPage,nowGroupPageArray]); \r\n\r\n      \r\n  //01.페이지 첫 로드시.. \r\n  //02.상세 정보 본 후 뒤로 가기 눌렀을 경우 \r\n  //03.페이지 이동 후 뒤로가기 눌렀을 경우\r\n  useEffect(()=>{\r\n\r\n      //초기에 groupPage 만큼 배열을 생생해 주어야 한다. \r\n      let pageArray =Array.from({length: groupPage}, (v, i) => i);\r\n\r\n\r\n      //groupPage 페이지 그룹 변경 시 로직 (5에서 ▶ 눌렀을 때)\r\n      if((group % groupPage === 0 )){\r\n              pageArray.length=0; \r\n\r\n                for(let i=group; i<group+groupPage; i++){\r\n                  pageArray.push(i); \r\n\r\n                }\r\n           }\r\n\r\n          pagenate(parseInt(pages),pageArray);\r\n      \r\n  },[pages]); \r\n\r\n  /*-------------------------------------------페이징 처리 로직   end-------------------------------------------------------*/\r\n\r\n\r\n  //게시글 상세 페이지 \r\n  const gotoDetail = useCallback((postId,userNickName,postFlag)=>{\r\n    router.push({pathname:'/detailPage',\r\n                 query:{postId,nickName:userNickName,postFlag},\r\n              }); \r\n  },[]); \r\n\r\n\r\n  //게시글 쓰기\r\n  const gotoEdit = useCallback(()=>{\r\n\r\n    router.push('/CKEditor'); \r\n  },[]); \r\n  \r\n\r\n   return (\r\n    <div>\r\n\r\n      <div className=\"divTable\">\r\n            {mainPosts_1001.map((v,i)=>(\r\n               <div className='divTableRow' onClick={()=>gotoDetail(v.postId,v.userNickName,'1001',nowPage)}>\r\n                  <div className='divTableCell'><div className=\"divImageCell\"><img src='https://dimg.donga.com/wps/NEWS/IMAGE/2019/11/24/98510015.1.jpg' /></div></div>\r\n                  <div className=\"divTableCell\" ><Link href={{pathname:'/detailPage' , query:{postId:v.postId,nickName:v.userNickName,postFlag:'1001'}}} ><a>{isEmpty(v.title)}</a></Link><br/>\r\n                  <LikeTwoTone twoToneColor=\"#1ba640\"/> : {v.good} <DislikeTwoTone twoToneColor=\"#1ba640\"/> : {v.bad}  <EyeOutlined color=\"red\"/> : {v.hit}<br/>\r\n                  <UserOutlined /> {isEmpty(v.userNickName)}   <FieldTimeOutlined /> {custumDateFormat(v.createdDate)}<br />\r\n                  </div>\r\n              </div>\r\n            ))}\r\n      </div>\r\n\r\n      <div className='divTable'>\r\n      <div className='divTableRowTh' style={{display:\"flex\",justifyContent:\"right\",alignItems:\"right\"}}>\r\n\r\n      {userInfo &&  <Button type=\"primary\" onClick={gotoEdit} style={{marginTop:\"1%\",display:\"block\",float:\"right\"}}>글쓰기</Button>}\r\n      </div>\r\n      </div>\r\n      <Pagenation pagenate={pagenate} dataLength={mainPosts_1001.length} postsPerPage={postsPerPage} nowPage={nowPage} groupPage={groupPage} groupPageArray={nowGroupPageArray} />\r\n\r\n    </div>\r\n    );\r\n}; \r\n\r\nmainPosts_1001.getInitialProps = async (context) =>{\r\n\r\n  const pages = context.query.nowPage; \r\n  const group  =parseInt(context.query.group); \r\n  return {pages, group}; \r\n\r\n}\r\n\r\nexport default mainPosts_1001; "]},"metadata":{},"sourceType":"module"}