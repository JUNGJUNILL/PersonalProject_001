{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar _this = this,\n    _jsxFileName = \"D:\\\\git Repository\\\\PersonalProject_001\\\\frontend\\\\pages\\\\detailPage.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useCallback, useEffect, useState, createRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Home from '../components/mainPosts_1001/mainPosts_1001';\nimport Comments1001 from '../components/mainPosts_1001/mainPosts_1001_comments';\nimport CommentTextArea from '../components/mainPosts_1001/mainPosts_1001_textArea';\nimport { MAINPOSTS_1001_DETAIL_INFO_REQUEST, MAINPOSTS_1001_COMMENTS_REQUEST, MAINPOSTS_1001_COMMENTINSERT_REQUEST, MAINPOSTS_1001_COMMENTLIKE_REQUEST } from '../reducers/mainPosts_1001';\nimport { DislikeTwoTone, LikeTwoTone, UserOutlined, FieldTimeOutlined } from '@ant-design/icons';\nimport { Button } from 'antd';\nimport custumDateFormat from '../utilComponent/custumDateFormat';\n\nvar detailPage = function detailPage(_ref) {\n  _s();\n\n  var nickName = _ref.nickName,\n      postFlag = _ref.postFlag,\n      postId = _ref.postId;\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(function (state) {\n    return state.mainPosts_1001;\n  }),\n      mainPosts_1001Info = _useSelector.mainPosts_1001Info,\n      mainPosts_1001Comments = _useSelector.mainPosts_1001Comments,\n      likeIsClicked = _useSelector.likeIsClicked,\n      clickedInfo = _useSelector.clickedInfo;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.auth;\n  }),\n      userInfo = _useSelector2.userInfo;\n\n  var _useState = useState(''),\n      a = _useState[0],\n      setA = _useState[1];\n\n  var _useState2 = useState([]),\n      mainPosts_1001_commentsArray = _useState2[0],\n      setMainPosts_1001_commentsArray = _useState2[1];\n\n  useEffect(function () {\n    //상세 정보 \n    dispatch({\n      type: MAINPOSTS_1001_DETAIL_INFO_REQUEST,\n      data: {\n        postId: postId,\n        nickName: nickName,\n        postFlag: postFlag\n      }\n    }); //댓글 리스트 \n\n    dispatch({\n      type: MAINPOSTS_1001_COMMENTS_REQUEST,\n      data: {\n        postId: postId,\n        nickName: nickName,\n        postFlag: postFlag,\n        who: userInfo\n      }\n    });\n    setMainPosts_1001_commentsArray(_toConsumableArray(mainPosts_1001Comments));\n  }, [mainPosts_1001Comments.length > 0]);\n\n  var test = function test() {\n    setMainPosts_1001_commentsArray(_toConsumableArray(mainPosts_1001Comments));\n  };\n\n  var likeBtn = useCallback(function (commentid, flag, likeDislike) {\n    console.log('mainPosts_1001Comments==>', mainPosts_1001Comments.length);\n    setMainPosts_1001_commentsArray(function (prev) {\n      return [].concat(_toConsumableArray(prev), [mainPosts_1001Comments]);\n    });\n    console.log('참나...?=>', mainPosts_1001_commentsArray);\n    mainPosts_1001Comments.map(function (v, i) {\n      if (v.commentId === commentid) {\n        console.log('폴스야?', v);\n        mainPosts_1001_commentsArray[i] = _objectSpread(_objectSpread({}, mainPosts_1001Comments[i]), {}, {\n          clickedComponent: \"i want hello \".concat(commentid)\n        });\n      }\n\n      console.log('진짜 물음표네??', mainPosts_1001_commentsArray.length);\n    });\n    setMainPosts_1001_commentsArray(_toConsumableArray(mainPosts_1001_commentsArray));\n    mainPosts_1001_commentsArray.map(function (v) {\n      if (v.commentId === commentid) {\n        console.log('추가됬냐?', v);\n      }\n\n      console.log('뭔데 왜 하나만 나옴=>', mainPosts_1001_commentsArray.length);\n    });\n\n    if (!userInfo) {\n      alert('로그인이 필요한 서비스 입니다.');\n      return;\n    } //alert(`${commentid},${flag},${likeDislike}`)\n    //문자 리터럴로 해야 alert에 변수 들어가진다.\n\n\n    if (flag === \"Y\") {\n      alert('이미 좋아요! 싫어요! 했습니다.');\n      return;\n    } else {\n      //alert('likeDisLikeFalg->' , likeDisLikeFalg); \n      // if(likeDislike === \"good\"){\n      //   setGoodCount(parseInt(good)+1); \n      // }else{\n      //   setBadCount(parseInt(bad)+1);\n      //   }\n      //댓글 좋아요!\n      dispatch({\n        type: MAINPOSTS_1001_COMMENTLIKE_REQUEST,\n        data: {\n          commentid: commentid,\n          postFlag: postFlag,\n          postId: postId,\n          flag: likeDislike,\n          who: userInfo,\n          nickName: nickName\n        }\n      }); // 댓글 리스트 \n      //   dispatch({\n      //     type:MAINPOSTS_1001_COMMENTS_REQUEST, \n      //     data:{\n      //       postId,\n      //       nickName,\n      //       postFlag,\n      //       who:userInfo,\n      //     }\n      // }); \n    }\n\n    alert(\"\".concat(likeDislike));\n  }, [mainPosts_1001Comments.length > 0]);\n  /* \r\n  const insertComment = useCallback((e)=>{\r\n  if(comment.length === 0 || comment.replace(blank_pattern,'')===\"\"){\r\n   ref.current.focus();  \r\n   alert('댓글을 입력해 주세요!'); \r\n   return; \r\n  }\r\n   if(comment.length === 300){\r\n   alert('300자 이상 입력 할 수 없습니다.'); \r\n   return; \r\n  }\r\n   //댓글 입력\r\n   dispatch({\r\n     type:MAINPOSTS_1001_COMMENTINSERT_REQUEST, \r\n     data:{\r\n       postId,\r\n       postFlag,\r\n       nickName ,\r\n       who:userInfo, \r\n       comment,\r\n     }\r\n  });\r\n   setComment(''); \r\n     //댓글 리스트 \r\n  //   dispatch({\r\n  //     type:MAINPOSTS_1001_COMMENTS_REQUEST, \r\n  //     data:{\r\n  //       postId,\r\n  //       nickName,\r\n  //       postFlag,\r\n  //       who:userInfo,\r\n  //     }\r\n  // }); \r\n  },[comment]);\r\n    */\n\n  return __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: \"divTable\",\n    style: {\n      marginTop: '3%'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    className: \"divTableRowTh\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 13\n    }\n  }, __jsx(\"div\", {\n    className: \"divTableCellTh\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 17\n    }\n  }, mainPosts_1001Info[0].title, \" [\", mainPosts_1001Comments.length, \"]\")), __jsx(\"div\", {\n    className: \"divTableRow\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 12\n    }\n  }, __jsx(\"div\", {\n    className: \"divTableCell\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 17\n    }\n  }, __jsx(UserOutlined, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 19\n    }\n  }), \"  \", mainPosts_1001Info[0].userNickName, __jsx(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 73\n    }\n  }), __jsx(FieldTimeOutlined, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 19\n    }\n  }), \"  \", custumDateFormat(mainPosts_1001Info[0].createdDate), __jsx(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 95\n    }\n  }), __jsx(LikeTwoTone, {\n    twoToneColor: \"#1ba640\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 19\n    }\n  }), \" : \", mainPosts_1001Info[0].good, \" \", __jsx(DislikeTwoTone, {\n    twoToneColor: \"#1ba640\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 88\n    }\n  }), \" : \", mainPosts_1001Info[0].bad))), __jsx(\"div\", {\n    style: {\n      width: \"100%\",\n      height: \"auto\",\n      border: \"1px solid\",\n      borderColor: \"#8cc49c\",\n      marginTop: \"1%\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 7\n    }\n  }, \"\\uAD11\\uACE0\\uC785\\uB2C8\\uB2E4.\"), __jsx(\"div\", {\n    style: {\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      marginTop: \"1%\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 6\n    }\n  }, __jsx(\"div\", {\n    dangerouslySetInnerHTML: {\n      __html: mainPosts_1001Info[0].content\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 9\n    }\n  })), __jsx(\"div\", {\n    style: {\n      width: \"100%\",\n      height: \"auto\",\n      border: \"1px solid\",\n      borderColor: \"#8cc49c\",\n      marginTop: \"1%\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 5\n    }\n  }, \"\\uAD11\\uACE0\\uC785\\uB2C8\\uB2E4.\"), __jsx(\"div\", {\n    className: \"divTable\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: \"divTableRowTh\",\n    style: {\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 7\n    }\n  }, __jsx(Button, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 11\n    }\n  }, __jsx(LikeTwoTone, {\n    twoToneColor: \"#1ba640\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 19\n    }\n  })), \"\\xA0\\xA0\\xA0\\xA0\", __jsx(Button, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 90\n    }\n  }, __jsx(DislikeTwoTone, {\n    twoToneColor: \"#1ba640\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 98\n    }\n  })))), __jsx(CommentTextArea, {\n    postFlag: postFlag,\n    nickName: nickName,\n    postId: postId,\n    userInfo: userInfo,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 4\n    }\n  }), __jsx(\"input\", {\n    type: \"button\",\n    value: 'hello',\n    onClick: test,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 4\n    }\n  }), __jsx(\"div\", {\n    className: \"divTable\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 5\n    }\n  }, mainPosts_1001_commentsArray.map(function (v, i) {\n    return __jsx(Comments1001, {\n      key: i,\n      postFlag: postFlag,\n      nickName: nickName,\n      postId: postId,\n      userInfo: userInfo,\n      commentId: v.commentId,\n      comment: v.comment,\n      who: v.who,\n      flag: clickedInfo[0] !== null && clickedInfo[0].clickCommentId === v.commentId ? 'Y' : v.flag,\n      realFlag: v.flag,\n      good: v.good,\n      bad: v.bad,\n      createdDate: v.createdDate,\n      likeBtn: likeBtn,\n      isAddcomment: v.kk,\n      likeDisLikeFalg: clickedInfo[0] !== null && clickedInfo[0].clickCommentId === v.commentId ? clickedInfo[0].likeDisLikeFlag : '',\n      hello: clickedInfo[0] !== null && clickedInfo[0].clickCommentId === v.commentId ? clickedInfo[0].clickCommentId : '',\n      backbeer: v.commentId === a ? a : '',\n      clickedComponent: v.clickedComponent,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 9\n      }\n    });\n  })));\n};\n\n_s(detailPage, \"0Nc5NVz5l/knCA7gCvsbqFrtMSs=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\ndetailPage.getInitialProps = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(context) {\n    var postId, nickName, postFlag;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            postId = context.query.postId;\n            nickName = context.query.nickName;\n            postFlag = context.query.postFlag;\n            return _context.abrupt(\"return\", {\n              nickName: nickName,\n              postFlag: postFlag,\n              postId: postId\n            });\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nexport default detailPage;","map":{"version":3,"sources":["D:/git Repository/PersonalProject_001/frontend/pages/detailPage.js"],"names":["React","useCallback","useEffect","useState","createRef","useDispatch","useSelector","Home","Comments1001","CommentTextArea","MAINPOSTS_1001_DETAIL_INFO_REQUEST","MAINPOSTS_1001_COMMENTS_REQUEST","MAINPOSTS_1001_COMMENTINSERT_REQUEST","MAINPOSTS_1001_COMMENTLIKE_REQUEST","DislikeTwoTone","LikeTwoTone","UserOutlined","FieldTimeOutlined","Button","custumDateFormat","detailPage","nickName","postFlag","postId","dispatch","state","mainPosts_1001","mainPosts_1001Info","mainPosts_1001Comments","likeIsClicked","clickedInfo","auth","userInfo","a","setA","mainPosts_1001_commentsArray","setMainPosts_1001_commentsArray","type","data","who","length","test","likeBtn","commentid","flag","likeDislike","console","log","prev","map","v","i","commentId","clickedComponent","alert","marginTop","title","userNickName","createdDate","good","bad","width","height","border","borderColor","display","justifyContent","alignItems","__html","content","comment","clickCommentId","kk","likeDisLikeFlag","getInitialProps","context","query"],"mappings":"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","sourcesContent":["import React, { useCallback,useEffect, useState, createRef } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport Home from '../components/mainPosts_1001/mainPosts_1001'\r\nimport Comments1001 from '../components/mainPosts_1001/mainPosts_1001_comments'\r\nimport CommentTextArea from '../components/mainPosts_1001/mainPosts_1001_textArea'\r\nimport \r\n    {MAINPOSTS_1001_DETAIL_INFO_REQUEST,\r\n     MAINPOSTS_1001_COMMENTS_REQUEST, \r\n     MAINPOSTS_1001_COMMENTINSERT_REQUEST,\r\n     MAINPOSTS_1001_COMMENTLIKE_REQUEST\r\n    } \r\nfrom '../reducers/mainPosts_1001'; \r\n\r\nimport {DislikeTwoTone,LikeTwoTone , UserOutlined, FieldTimeOutlined} from '@ant-design/icons'\r\nimport {Button} from 'antd'\r\nimport custumDateFormat from  '../utilComponent/custumDateFormat';\r\n\r\n\r\n\r\nconst detailPage  = ({nickName,postFlag,postId}) =>{\r\n\r\n  const dispatch = useDispatch(); \r\n  const {mainPosts_1001Info , \r\n         mainPosts_1001Comments,\r\n         likeIsClicked,\r\n         clickedInfo\r\n        \r\n        } = useSelector((state)=>state.mainPosts_1001); \r\n\r\n  const {userInfo}      = useSelector((state)=>state.auth);\r\n  const [a, setA]=useState('');\r\n  const [mainPosts_1001_commentsArray, setMainPosts_1001_commentsArray] = useState([]); \r\n\r\n\r\n  useEffect(()=>{\r\n  \r\n    //상세 정보 \r\n    dispatch({\r\n          type:MAINPOSTS_1001_DETAIL_INFO_REQUEST, \r\n          data:{\r\n            postId,\r\n            nickName,\r\n            postFlag,\r\n          }\r\n    });\r\n\r\n    //댓글 리스트 \r\n    dispatch({\r\n          type:MAINPOSTS_1001_COMMENTS_REQUEST, \r\n          data:{\r\n            postId,\r\n            nickName,\r\n            postFlag,\r\n            who:userInfo, \r\n          }\r\n    }); \r\n    setMainPosts_1001_commentsArray([...mainPosts_1001Comments]); \r\n\r\n\r\n  },[mainPosts_1001Comments.length > 0]); \r\n\r\n  const test = ()=>{\r\n\r\n    setMainPosts_1001_commentsArray([...mainPosts_1001Comments]); \r\n  }\r\n\r\n  const likeBtn =useCallback((commentid,flag,likeDislike)=>{\r\n    console.log('mainPosts_1001Comments==>' , mainPosts_1001Comments.length); \r\n    setMainPosts_1001_commentsArray(prev=>[...prev,mainPosts_1001Comments]); \r\n    console.log('참나...?=>' , mainPosts_1001_commentsArray); \r\n    mainPosts_1001Comments.map((v,i)=>{\r\n      if(v.commentId === commentid){\r\n        console.log('폴스야?' ,v); \r\n        mainPosts_1001_commentsArray[i] = {...mainPosts_1001Comments[i], clickedComponent:`i want hello ${commentid}`}\r\n      }\r\n      console.log('진짜 물음표네??' , mainPosts_1001_commentsArray.length); \r\n    }); \r\n\r\n    setMainPosts_1001_commentsArray([...mainPosts_1001_commentsArray]); \r\n    mainPosts_1001_commentsArray.map((v)=>{\r\n      if(v.commentId === commentid){\r\n        console.log('추가됬냐?' , v); \r\n      }\r\n      console.log('뭔데 왜 하나만 나옴=>' ,  mainPosts_1001_commentsArray.length); \r\n    })\r\n  \r\n    \r\n        if(!userInfo){\r\n          alert('로그인이 필요한 서비스 입니다.'); \r\n          return;\r\n        }\r\n          //alert(`${commentid},${flag},${likeDislike}`)\r\n        //문자 리터럴로 해야 alert에 변수 들어가진다.\r\n    \r\n        if(flag===\"Y\" ){\r\n          \r\n          alert('이미 좋아요! 싫어요! 했습니다.'); \r\n          return; \r\n    \r\n        }else{\r\n            //alert('likeDisLikeFalg->' , likeDisLikeFalg); \r\n            // if(likeDislike === \"good\"){\r\n\r\n            //   setGoodCount(parseInt(good)+1); \r\n\r\n            // }else{\r\n\r\n            //   setBadCount(parseInt(bad)+1);\r\n\r\n            //   }\r\n\r\n     \r\n\r\n          //댓글 좋아요!\r\n          dispatch({\r\n            type:MAINPOSTS_1001_COMMENTLIKE_REQUEST, \r\n            data:{\r\n              commentid,\r\n              postFlag,\r\n              postId,\r\n              flag: likeDislike ,\r\n              who: userInfo,\r\n              nickName,\r\n            }\r\n        }); \r\n\r\n\r\n               // 댓글 리스트 \r\n        //   dispatch({\r\n        //     type:MAINPOSTS_1001_COMMENTS_REQUEST, \r\n        //     data:{\r\n        //       postId,\r\n        //       nickName,\r\n        //       postFlag,\r\n        //       who:userInfo,\r\n        //     }\r\n        // }); \r\n    \r\n        }\r\n\r\n       alert(`${likeDislike}`); \r\n      \r\n      },[mainPosts_1001Comments.length > 0]); \r\n\r\n\r\n     /* \r\n  const insertComment = useCallback((e)=>{\r\nif(comment.length === 0 || comment.replace(blank_pattern,'')===\"\"){\r\n      ref.current.focus();  \r\n      alert('댓글을 입력해 주세요!'); \r\n      return; \r\n    }\r\n\r\n    if(comment.length === 300){\r\n      alert('300자 이상 입력 할 수 없습니다.'); \r\n      return; \r\n    }\r\n      //댓글 입력\r\n      dispatch({\r\n        type:MAINPOSTS_1001_COMMENTINSERT_REQUEST, \r\n        data:{\r\n          postId,\r\n          postFlag,\r\n          nickName ,\r\n          who:userInfo, \r\n          comment,\r\n        }\r\n    });\r\n\r\n    setComment(''); \r\n\r\n\r\n    //댓글 리스트 \r\n    //   dispatch({\r\n    //     type:MAINPOSTS_1001_COMMENTS_REQUEST, \r\n    //     data:{\r\n    //       postId,\r\n    //       nickName,\r\n    //       postFlag,\r\n    //       who:userInfo,\r\n    //     }\r\n    // }); \r\n  },[comment]);\r\n \r\n\r\n  */\r\n\r\n\r\n\r\n    return (\r\n    <>\r\n    {/*상세 페이지 타이틀--------------------------------------------------------------------------------*/}\r\n      <div className='divTable' style={{marginTop:'3%'}}>\r\n            <div className='divTableRowTh'>\r\n                <div className='divTableCellTh'>{mainPosts_1001Info[0].title} [{mainPosts_1001Comments.length}]</div>\r\n           </div>\r\n           <div className='divTableRow'>\r\n                <div className='divTableCell'>\r\n                  <UserOutlined />  {mainPosts_1001Info[0].userNickName}<br />\r\n                  <FieldTimeOutlined />  {custumDateFormat(mainPosts_1001Info[0].createdDate)}<br />\r\n                  <LikeTwoTone twoToneColor=\"#1ba640\"/> : {mainPosts_1001Info[0].good} <DislikeTwoTone  twoToneColor=\"#1ba640\"/> : {mainPosts_1001Info[0].bad} \r\n                </div>\r\n           </div>\r\n      </div>\r\n    {/*상세 페이지 타이틀--------------------------------------------------------------------------------*/}\r\n\r\n      <div style={{width:\"100%\",height:\"auto\", border:\"1px solid\", borderColor:\"#8cc49c\",marginTop:\"1%\"}}>\r\n         광고입니다.\r\n      </div>\r\n   \r\n\r\n\r\n\r\n\r\n\r\n    {/*상세 페이지 컨텐츠--------------------------------------------------------------------------------*/}\r\n     <div style={{display:\"flex\",justifyContent:\"center\",alignItems:\"center\",marginTop:\"1%\"}}>\r\n        <div dangerouslySetInnerHTML={{__html:mainPosts_1001Info[0].content}}/>\r\n     </div> \r\n    {/*상세 페이지 컨텐츠--------------------------------------------------------------------------------*/}   \r\n    \r\n\r\n\r\n\r\n\r\n    <div style={{width:\"100%\",height:\"auto\", border:\"1px solid\", borderColor:\"#8cc49c\",marginTop:\"1%\"}}>\r\n      광고입니다.\r\n    </div>\r\n\r\n\r\n\r\n\r\n\r\n     {/*좋아요 싫어요 버튼--------------------------------------------------------------------------------*/}\r\n    <div className='divTable'>\r\n      <div className='divTableRowTh' style={{display:\"flex\",justifyContent:\"center\",alignItems:\"center\"}}>\r\n          <Button><LikeTwoTone  twoToneColor=\"#1ba640\"/></Button>&nbsp;&nbsp;&nbsp;&nbsp;<Button><DislikeTwoTone twoToneColor=\"#1ba640\"/></Button>\r\n      </div>\r\n    </div>\r\n    {/*좋아요 싫어요 버튼--------------------------------------------------------------------------------*/}\r\n\r\n\r\n\r\n\r\n\r\n    {/*댓글 입력--------------------------------------------------------------------------------*/}\r\n   <CommentTextArea   \r\n            postFlag={postFlag} \r\n            nickName={nickName} \r\n            postId={postId} \r\n            userInfo={userInfo}\r\n   />\r\n   <input type=\"button\" value={'hello'} onClick={test} />\r\n    {/* \r\n    <textarea  value={comment} ref={ref} style={{width:\"100%\",height:\"80px\",marginTop:\"3%\"}} onChange={onChageComment} placeholder={ userInfo ? \"댓글을 작성해 보세요!\" : \"로그인이 필요한 서비스 입니다.\"} readOnly={userInfo ? false : true}/>\r\n   \r\n    <div style={{margin:\"1%\",display:\"block\",float:\"left\"}}>\r\n      {comment ? comment.length  : 0 } &#47; 300\r\n    </div>\r\n\r\n    <div style={{margin:\"1%\",display:\"block\",float:\"right\"}}>\r\n      <Button type=\"primary\" onClick={insertComment}>댓글달기</Button>\r\n    </div>\r\n  */}\r\n    {/*댓글 입력--------------------------------------------------------------------------------*/}\r\n\r\n\r\n\r\n\r\n    {/*댓글 리스트--------------------------------------------------------------------------------*/}\r\n\r\n    <div className=\"divTable\">\r\n      { mainPosts_1001_commentsArray.map((v,i)=>\r\n\r\n        <Comments1001 \r\n              key={i}\r\n              postFlag={postFlag} \r\n              nickName={nickName} \r\n              postId={postId} \r\n              userInfo={userInfo}\r\n    \r\n              commentId={v.commentId} \r\n              comment={v.comment} \r\n              who={v.who} \r\n              flag={clickedInfo[0] !== null && clickedInfo[0].clickCommentId===v.commentId ? 'Y': v.flag} \r\n              realFlag={v.flag}\r\n              good={v.good}\r\n      \r\n              bad={v.bad} \r\n              createdDate={v.createdDate} \r\n    \r\n              likeBtn={likeBtn}\r\n              isAddcomment={v.kk}\r\n              likeDisLikeFalg={clickedInfo[0] !== null && clickedInfo[0].clickCommentId===v.commentId ? clickedInfo[0].likeDisLikeFlag : '' }\r\n              hello={clickedInfo[0] !== null && clickedInfo[0].clickCommentId===v.commentId ? clickedInfo[0].clickCommentId: ''}\r\n\r\n              backbeer={v.commentId===a ? a:''}\r\n              clickedComponent={v.clickedComponent}\r\n              />\r\n      )\r\n    \r\n    }\r\n    </div>\r\n    {/*댓글 리스트--------------------------------------------------------------------------------*/}\r\n\r\n    </>\r\n        )\r\n}\r\n\r\n\r\ndetailPage.getInitialProps = async (context) =>{\r\n\r\n  const postId   = context.query.postId; \r\n  const nickName = context.query.nickName; \r\n  const postFlag = context.query.postFlag; \r\n  return {nickName,postFlag,postId}; \r\n}\r\nexport default detailPage; "]},"metadata":{},"sourceType":"module"}