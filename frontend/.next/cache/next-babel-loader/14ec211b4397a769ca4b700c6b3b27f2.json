{"ast":null,"code":"import axios from 'axios';\nimport jwtDeCoder from 'jwt-decode';\nimport { all, fork, takeLatest, takeEvery, put, delay, call } from 'redux-saga/effects';\nimport { JOIN_REQUEST, JOIN_SUCCESS, JOIN_FAILURE, LOGIN_REQUEST, LOGIN_SUCCESS, LOGIN_FAILURE, LOAD_USER_REQUEST, LOAD_USER_SUCCESS, LOAD_USER_FAILURE, LOGOUT_REQUEST, LOGOUT_SUCCESS, LOGOUT_FAILURE } from '../reducers/auth'; //유저정보 유지 사이클 \n//------------------------------------------------------------------------\n\nfunction APILoadUser() {\n  if (Kakao.Auth.getAccessToken()) {\n    console.log('카카오 로그인 토큰 존재');\n  } else {\n    console.log('카카오 로그인 토큰 미존재');\n  }\n\n  return axios.get('/auth/', {\n    withCredentials: true\n  });\n}\n\nfunction* sagaLoadUser() {\n  try {\n    const result = yield call(APILoadUser);\n    yield put({\n      type: LOAD_USER_SUCCESS,\n      data: result.data.nick\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOAD_USER_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadUser() {\n  yield takeEvery(LOAD_USER_REQUEST, sagaLoadUser);\n} //------------------------------------------------------------------------\n//회원가입 사이클 \n//------------------------------------------------------------------------\n\n\nfunction APIJoin(data) {\n  console.log('data==>', data);\n  return axios.post('/auth/join', {\n    data\n  }, {\n    withCredentials: true\n  });\n}\n\nfunction* sagaJoin(action) {\n  try {\n    console.log(action, action.data);\n    const result = yield call(APIJoin, action.data);\n    yield put({\n      type: JOIN_SUCCESS,\n      data: result\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: JOIN_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchJoin() {\n  yield takeLatest(JOIN_REQUEST, sagaJoin);\n} //------------------------------------------------------------------------\n//로그아웃 사이클\n//------------------------------------------------------------------------\n\n\nfunction APILogOut() {\n  return axios.get('/auth/logOut', {\n    withCredentials: true\n  });\n}\n\nfunction* sagaLogOut() {\n  try {\n    const result = yield call(APILogOut);\n    yield put({\n      type: LOGOUT_SUCCESS\n    });\n  } catch (e) {\n    alert('로그아웃 에러');\n    yield put({\n      type: LOGOUT_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(LOGOUT_REQUEST, sagaLogOut);\n} //------------------------------------------------------------------------\n//로그인 사이클\n//------------------------------------------------------------------------\n\n\nfunction APILogin(data) {\n  //jwt 로그인\n  return axios.post('/auth/login', {\n    data\n  }, {\n    withCredentials: true\n  }); //passport local 로그인\n  //return axios.post('/auth/login',data,{withCredentials:true});\n} //카카오 로그인 \n\n\nfunction APILoginKakao() {\n  return axios.get('/auth/kakao/', {\n    withCredentials: true\n  });\n}\n\nfunction APILoginKakaoSDK() {\n  return axios.get('/auth/kakaoTest/', {\n    withCredentials: true\n  });\n}\n\nfunction* sagaLogin(action) {\n  try {\n    let result;\n    let decoded;\n\n    if (action.data.loginType === 'local') {\n      result = yield call(APILogin, action.data);\n      decoded = jwtDeCoder(result.data.token);\n      yield put({\n        type: LOGIN_SUCCESS,\n        data: decoded.nick\n      });\n    } else if (action.data.loginType === 'kakao') {\n      result = yield call(APILoginKakao);\n      decoded = result.data;\n      yield put({\n        type: LOGIN_SUCCESS,\n        data: decoded.nick\n      });\n    } else {\n      if (Kakao.isInitialized()) {\n        Kakao.Auth.authorize({\n          redirectUri: 'http://captainryan.gonetis.com:3095/api/auth/kakaoTest',\n          //redirectUri:'/auth/kakao/',\n          success: function (authObj) {\n            console.log('성공이야!==>', authObj);\n          }\n        });\n      }\n\n      result = yield call(APILoginKakao);\n      decoded = result.data;\n      yield put({\n        type: LOGIN_SUCCESS,\n        data: decoded.nick\n      });\n    }\n  } catch (e) {\n    alert('로그인 에러', result);\n    yield put({\n      type: LOGIN_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLogin() {\n  yield takeEvery(LOGIN_REQUEST, sagaLogin);\n} //------------------------------------------------------------------------\n\n\nexport default function* authSaga() {\n  yield all([fork(watchJoin), fork(watchLogin), fork(watchLoadUser), fork(watchLogOut)]);\n}","map":{"version":3,"sources":["D:/git Repository/PersonalProject_001/frontend/sagas/authSaga.js"],"names":["axios","jwtDeCoder","all","fork","takeLatest","takeEvery","put","delay","call","JOIN_REQUEST","JOIN_SUCCESS","JOIN_FAILURE","LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_FAILURE","LOAD_USER_REQUEST","LOAD_USER_SUCCESS","LOAD_USER_FAILURE","LOGOUT_REQUEST","LOGOUT_SUCCESS","LOGOUT_FAILURE","APILoadUser","Kakao","Auth","getAccessToken","console","log","get","withCredentials","sagaLoadUser","result","type","data","nick","e","error","watchLoadUser","APIJoin","post","sagaJoin","action","watchJoin","APILogOut","sagaLogOut","alert","watchLogOut","APILogin","APILoginKakao","APILoginKakaoSDK","sagaLogin","decoded","loginType","token","isInitialized","authorize","redirectUri","success","authObj","watchLogin","authSaga"],"mappings":"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","sourcesContent":["import axios from 'axios'\r\nimport jwtDeCoder from 'jwt-decode'\r\nimport {all,fork,takeLatest,takeEvery ,put, delay,call} from 'redux-saga/effects'; \r\nimport \r\n    {JOIN_REQUEST,\r\n     JOIN_SUCCESS,\r\n     JOIN_FAILURE,\r\n     LOGIN_REQUEST,\r\n     LOGIN_SUCCESS,\r\n     LOGIN_FAILURE, \r\n     LOAD_USER_REQUEST,\r\n     LOAD_USER_SUCCESS,\r\n     LOAD_USER_FAILURE,\r\n     LOGOUT_REQUEST,\r\n     LOGOUT_SUCCESS,\r\n     LOGOUT_FAILURE,\r\n    } \r\nfrom '../reducers/auth'; \r\n\r\n\r\n//유저정보 유지 사이클 \r\n//------------------------------------------------------------------------\r\nfunction APILoadUser(){\r\n    if(Kakao.Auth.getAccessToken()){\r\n        console.log('카카오 로그인 토큰 존재')\r\n    }else{\r\n        console.log('카카오 로그인 토큰 미존재')\r\n    }\r\n    return axios.get('/auth/' , {withCredentials:true}); \r\n}\r\n\r\nfunction* sagaLoadUser(){\r\n\r\n    try{\r\n        const result = yield call(APILoadUser);\r\n    \r\n        yield put({\r\n                type:LOAD_USER_SUCCESS, \r\n                data: result.data.nick,           \r\n        }); \r\n\r\n    }catch(e){\r\n        console.error(e); \r\n        yield put({\r\n            type:LOAD_USER_FAILURE,\r\n            error:e, \r\n        });\r\n    }\r\n\r\n}\r\n\r\n\r\nfunction* watchLoadUser(){\r\n    yield takeEvery(LOAD_USER_REQUEST,sagaLoadUser);\r\n}\r\n//------------------------------------------------------------------------\r\n\r\n\r\n\r\n\r\n//회원가입 사이클 \r\n//------------------------------------------------------------------------\r\nfunction APIJoin(data){\r\n    console.log('data==>' , data); \r\n    return axios.post('/auth/join',{data},{withCredentials:true}); \r\n\r\n}\r\n\r\n\r\n\r\n\r\nfunction* sagaJoin(action){\r\n    \r\n    try{\r\n       console.log(action, action.data);\r\n        const result = yield call(APIJoin,action.data); \r\n        yield put({\r\n            type:JOIN_SUCCESS,\r\n            data: result,\r\n        }); \r\n\r\n    }catch(e){\r\n\r\n      console.error(e); \r\n\r\n        yield put({\r\n            type:JOIN_FAILURE,\r\n            error:e, \r\n        })\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nfunction* watchJoin(){\r\n    yield takeLatest(JOIN_REQUEST,sagaJoin)\r\n}\r\n//------------------------------------------------------------------------\r\n\r\n\r\n\r\n\r\n//로그아웃 사이클\r\n//------------------------------------------------------------------------\r\nfunction APILogOut(){\r\n\r\n    return axios.get('/auth/logOut',{withCredentials:true});\r\n\r\n\r\n}\r\n\r\nfunction* sagaLogOut(){\r\n\r\n\r\n    try{\r\n      const result =   yield call(APILogOut); \r\n    \r\n\r\n        yield put({\r\n            type:LOGOUT_SUCCESS,\r\n        }); \r\n\r\n\r\n    }catch(e){\r\n        alert('로그아웃 에러'); \r\n        yield put({\r\n            type:LOGOUT_FAILURE, \r\n            error:e,\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchLogOut(){\r\n    yield takeLatest(LOGOUT_REQUEST,sagaLogOut); \r\n}\r\n//------------------------------------------------------------------------\r\n\r\n\r\n//로그인 사이클\r\n//------------------------------------------------------------------------\r\nfunction APILogin(data){\r\n\r\n    //jwt 로그인\r\n    return axios.post('/auth/login',{data},{withCredentials:true});\r\n\r\n    //passport local 로그인\r\n    //return axios.post('/auth/login',data,{withCredentials:true});\r\n}\r\n//카카오 로그인 \r\nfunction APILoginKakao(){\r\n\r\n    return axios.get('/auth/kakao/',{withCredentials:true});\r\n}\r\n\r\nfunction APILoginKakaoSDK(){\r\n    return axios.get('/auth/kakaoTest/',{withCredentials:true});\r\n}\r\n\r\nfunction* sagaLogin(action){\r\n\r\n\r\n    try{\r\n\r\n        let result; \r\n        let decoded;\r\n        if(action.data.loginType==='local'){\r\n\r\n            result = yield call(APILogin,action.data); \r\n            decoded =jwtDeCoder(result.data.token); \r\n            yield put({\r\n                type:LOGIN_SUCCESS,\r\n                data:decoded.nick,\r\n            }); \r\n\r\n        }else if(action.data.loginType==='kakao'){\r\n\r\n            result = yield call(APILoginKakao); \r\n            decoded =result.data;\r\n            yield put({\r\n                type:LOGIN_SUCCESS,\r\n                data:decoded.nick,\r\n            }); \r\n\r\n        }else{\r\n            if(Kakao.isInitialized()){\r\n                    Kakao.Auth.authorize({\r\n                        \r\n                        redirectUri:'http://captainryan.gonetis.com:3095/api/auth/kakaoTest',\r\n                        //redirectUri:'/auth/kakao/',\r\n                        \r\n                        success : function(authObj){\r\n                            console.log('성공이야!==>', authObj); \r\n                        }\r\n\r\n                    });\r\n            }\r\n            result = yield call(APILoginKakao); \r\n            decoded =result.data;\r\n            yield put({\r\n                type:LOGIN_SUCCESS,\r\n                data:decoded.nick,\r\n            }); \r\n        }\r\n        \r\n                               \r\n\r\n\r\n\r\n    }catch(e){\r\n        alert('로그인 에러',result); \r\n        yield put({\r\n            type:LOGIN_FAILURE, \r\n            error:e,\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchLogin(){\r\n    yield takeEvery(LOGIN_REQUEST,sagaLogin); \r\n}\r\n//------------------------------------------------------------------------\r\n\r\n\r\nexport default function* authSaga(){\r\n\r\n\r\n    yield all([\r\n        fork(watchJoin), \r\n        fork(watchLogin), \r\n        fork(watchLoadUser), \r\n        fork(watchLogOut), \r\n        \r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}