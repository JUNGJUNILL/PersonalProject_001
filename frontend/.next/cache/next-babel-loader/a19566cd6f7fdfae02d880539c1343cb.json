{"ast":null,"code":"import { all, fork, takeLatest, takeEvery, put, delay, call } from 'redux-saga/effects';\nimport { COUNT_PLUS_REQUEST, COUNT_PLUS_SUCCESS, COUNT_PLUS_FAILURE, COUNT_MINUS_REQUEST, COUNT_MINUS_SUCCESS, COUNT_MINUS_FAILURE } from '../reducers/count';\n\nfunction* sagaPlus(action) {\n  try {\n    yield put({\n      type: COUNT_PLUS_SUCCESS,\n      data: 1\n    });\n  } catch (e) {\n    console.error(e);\n    alert('사가 에러');\n    yield put({\n      type: COUNT_PLUS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchSagaPlus() {\n  console.log('watchSagaPlus');\n  yield takeEvery(COUNT_PLUS_REQUEST, sagaPlus);\n}\n\nfunction* sagaMinus(action) {\n  try {\n    yield put({\n      type: COUNT_MINUS_SUCCESS,\n      data: 1\n    });\n  } catch (e) {\n    console.error(e);\n    alert('사가 에러');\n    yield put({\n      type: COUNT_MINUS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchMinus() {\n  console.log('watchMinus');\n  yield takeEvery(COUNT_MINUS_REQUEST, sagaMinus);\n}\n\nexport default function* studySaga() {\n  yield all([fork(watchSagaPlus), fork(watchMinus)]);\n}","map":{"version":3,"sources":["C:/git Repository/PersonalProject_001/frontend/sagas/studySaga.js"],"names":["all","fork","takeLatest","takeEvery","put","delay","call","COUNT_PLUS_REQUEST","COUNT_PLUS_SUCCESS","COUNT_PLUS_FAILURE","COUNT_MINUS_REQUEST","COUNT_MINUS_SUCCESS","COUNT_MINUS_FAILURE","sagaPlus","action","type","data","e","console","error","alert","watchSagaPlus","log","sagaMinus","watchMinus","studySaga"],"mappings":"AAAA,SAAQA,GAAR,EAAYC,IAAZ,EAAiBC,UAAjB,EAA4BC,SAA5B,EAAuCC,GAAvC,EAA4CC,KAA5C,EAAkDC,IAAlD,QAA6D,oBAA7D;AACA,SAAQC,kBAAR,EAA2BC,kBAA3B,EAA+CC,kBAA/C,EAAmEC,mBAAnE,EAAwFC,mBAAxF,EAA6GC,mBAA7G,QAAuI,mBAAvI;;AAMA,UAAUC,QAAV,CAAmBC,MAAnB,EAA0B;AAEtB,MAAG;AACD,UAAOV,GAAG,CAAC;AACLW,MAAAA,IAAI,EAACP,kBADA;AAELQ,MAAAA,IAAI,EAAE;AAFD,KAAD,CAAV;AAKD,GAND,CAMC,OAAMC,CAAN,EAAQ;AAELC,IAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACAG,IAAAA,KAAK,CAAC,OAAD,CAAL;AACA,UAAMhB,GAAG,CAAC;AACNW,MAAAA,IAAI,EAACN,kBADC;AAENU,MAAAA,KAAK,EAAEF;AAFD,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUI,aAAV,GAAyB;AACrBH,EAAAA,OAAO,CAACI,GAAR,CAAY,eAAZ;AACA,QAAMnB,SAAS,CAACI,kBAAD,EAAoBM,QAApB,CAAf;AACH;;AAMD,UAAUU,SAAV,CAAoBT,MAApB,EAA2B;AAEvB,MAAG;AACD,UAAOV,GAAG,CAAC;AACLW,MAAAA,IAAI,EAACJ,mBADA;AAELK,MAAAA,IAAI,EAAE;AAFD,KAAD,CAAV;AAKD,GAND,CAMC,OAAMC,CAAN,EAAQ;AAELC,IAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACAG,IAAAA,KAAK,CAAC,OAAD,CAAL;AACA,UAAMhB,GAAG,CAAC;AACNW,MAAAA,IAAI,EAACH,mBADC;AAENO,MAAAA,KAAK,EAAEF;AAFD,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUO,UAAV,GAAsB;AAClBN,EAAAA,OAAO,CAACI,GAAR,CAAY,YAAZ;AACA,QAAMnB,SAAS,CAACO,mBAAD,EAAqBa,SAArB,CAAf;AACH;;AAGD,eAAe,UAAUE,SAAV,GAAqB;AAEhC,QAAMzB,GAAG,CAAC,CACNC,IAAI,CAACoB,aAAD,CADE,EAENpB,IAAI,CAACuB,UAAD,CAFE,CAAD,CAAT;AAIH","sourcesContent":["import {all,fork,takeLatest,takeEvery ,put, delay,call} from 'redux-saga/effects'; \r\nimport {COUNT_PLUS_REQUEST,COUNT_PLUS_SUCCESS, COUNT_PLUS_FAILURE, COUNT_MINUS_REQUEST, COUNT_MINUS_SUCCESS, COUNT_MINUS_FAILURE} from '../reducers/count'; \r\n\r\n\r\n\r\n\r\n\r\nfunction* sagaPlus(action){\r\n\r\n    try{\r\n      yield  put({\r\n            type:COUNT_PLUS_SUCCESS, \r\n            data: 1, \r\n        })\r\n\r\n    }catch(e){\r\n\r\n        console.error(e); \r\n        alert('사가 에러'); \r\n        yield put({\r\n            type:COUNT_PLUS_FAILURE, \r\n            error: e, \r\n        }); \r\n    }\r\n}\r\n\r\nfunction* watchSagaPlus(){\r\n    console.log('watchSagaPlus'); \r\n    yield takeEvery(COUNT_PLUS_REQUEST,sagaPlus); \r\n}\r\n\r\n\r\n\r\n\r\n\r\nfunction* sagaMinus(action){\r\n\r\n    try{\r\n      yield  put({\r\n            type:COUNT_MINUS_SUCCESS, \r\n            data: 1, \r\n        })\r\n\r\n    }catch(e){\r\n\r\n        console.error(e); \r\n        alert('사가 에러'); \r\n        yield put({\r\n            type:COUNT_MINUS_FAILURE, \r\n            error: e, \r\n        }); \r\n    }\r\n}\r\n\r\nfunction* watchMinus(){\r\n    console.log('watchMinus'); \r\n    yield takeEvery(COUNT_MINUS_REQUEST,sagaMinus); \r\n}\r\n\r\n\r\nexport default function* studySaga(){\r\n\r\n    yield all([\r\n        fork(watchSagaPlus), \r\n        fork(watchMinus), \r\n     ])\r\n}"]},"metadata":{},"sourceType":"module"}