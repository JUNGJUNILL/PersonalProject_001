{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"D:\\\\git Repository\\\\PersonalProject_001\\\\frontend\\\\pages\\\\useEffect.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useMemo, useEffect, useCallback, useRef, current } from 'react';\n\nvar Info = function Info() {\n  _s();\n\n  var _useState = useState(''),\n      name = _useState[0],\n      setName = _useState[1];\n\n  var _useState2 = useState(''),\n      nickname = _useState2[0],\n      setNickname = _useState2[1];\n\n  console.log('첫로드'); //useEffect는 기본적으로 렌더링 되고난 직후마다 실행되며,\n  //두번째 파라미터 배열에 무엇을 넣는냐에 따라 실행되는 조건이 달라집니다. \n\n  useEffect(function () {\n    console.log('렌더링이 완료되었습니다!');\n    console.log({\n      name: name,\n      nickname: nickname\n    });\n    setNickname('setNickname');\n  }, []); //▲첫 마운트, name state만 변경 될 때 실행된다.\n  //만약 컴포넌트에 언마운트되기 전이나, 업데이트 되기 직전에 어떤 작업을 수행하고 싶다면 \n  //useEffect에서 뒷정리 함수를 반환해 주어야 합니다.\n  //뒷정리 함수는 바뀌기 직전 값을 반환해 준다.\n  // useEffect(() => {\n  //     console.log('effect');\n  //     console.log('effect=>',name);\n  //     return () => {\n  //       //바뀌기 직전값이 저장되어 있음.\n  //       console.log('cleanup');\n  //       console.log('clean=>' , name);\n  //     };\n  //   },[name]);\n\n  var onChangeName = function onChangeName(e) {\n    setName(e.target.value);\n  };\n\n  var onChangeNickname = function onChangeNickname(e) {\n    setNickname(e.target.value);\n  };\n\n  return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }, __jsx(\"input\", {\n    value: name,\n    onChange: onChangeName,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 11\n    }\n  }), __jsx(\"input\", {\n    value: nickname,\n    onChange: onChangeNickname,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 11\n    }\n  })), __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 11\n    }\n  }, __jsx(\"b\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }\n  }, \"\\uC774\\uB984:\"), \" \", name), __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 11\n    }\n  }, __jsx(\"b\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }\n  }, \"\\uB2C9\\uB124\\uC784: \"), nickname)));\n};\n\n_s(Info, \"VN5YNEsXq/akm5eSs11UDM6W0Rk=\");\n\n_c = Info;\n\nvar Test3 = function Test3() {\n  _s2();\n\n  var _useState3 = useState(false),\n      visible = _useState3[0],\n      setVisible = _useState3[1];\n\n  return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  }, __jsx(Info, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }));\n};\n\n_s2(Test3, \"OGsIWlGlwYpVUqIrDReJ1GWx7rw=\");\n\n_c2 = Test3;\nexport default Test3;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Info\");\n$RefreshReg$(_c2, \"Test3\");","map":{"version":3,"sources":["D:/git Repository/PersonalProject_001/frontend/pages/useEffect.js"],"names":["React","useState","useMemo","useEffect","useCallback","useRef","current","Info","name","setName","nickname","setNickname","console","log","onChangeName","e","target","value","onChangeNickname","Test3","visible","setVisible"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,OAAzB,EAAkCC,SAAlC,EAA4CC,WAA5C,EAAwDC,MAAxD,EAAgEC,OAAhE,QAA8E,OAA9E;;AAEA,IAAMC,IAAI,GAAG,SAAPA,IAAO,GAAM;AAAA;;AAAA,kBACSN,QAAQ,CAAC,EAAD,CADjB;AAAA,MACRO,IADQ;AAAA,MACFC,OADE;;AAAA,mBAEiBR,QAAQ,CAAC,EAAD,CAFzB;AAAA,MAERS,QAFQ;AAAA,MAEEC,WAFF;;AAGfC,EAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAHe,CAIf;AACA;;AACAV,EAAAA,SAAS,CAAC,YAAM;AACZS,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAY;AACVL,MAAAA,IAAI,EAAJA,IADU;AAEVE,MAAAA,QAAQ,EAARA;AAFU,KAAZ;AAIAC,IAAAA,WAAW,CAAC,aAAD,CAAX;AACD,GAPM,EAOL,EAPK,CAAT,CANe,CAcV;AAGL;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAGA,MAAMG,YAAY,GAAG,SAAfA,YAAe,CAAAC,CAAC,EAAI;AACxBN,IAAAA,OAAO,CAACM,CAAC,CAACC,MAAF,CAASC,KAAV,CAAP;AACD,GAFD;;AAIA,MAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAAH,CAAC,EAAI;AAC5BJ,IAAAA,WAAW,CAACI,CAAC,CAACC,MAAF,CAASC,KAAV,CAAX;AACD,GAFD;;AAMA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAO,IAAA,KAAK,EAAET,IAAd;AAAoB,IAAA,QAAQ,EAAEM,YAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAO,IAAA,KAAK,EAAEJ,QAAd;AAAwB,IAAA,QAAQ,EAAEQ,gBAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF,EAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,OACcV,IADd,CADF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BADF,EAEGE,QAFH,CAJF,CALF,CADF;AAiBD,CA3DH;;GAAMH,I;;KAAAA,I;;AA6DN,IAAMY,KAAK,GAAE,SAAPA,KAAO,GAAI;AAAA;;AAAA,mBAGiBlB,QAAQ,CAAC,KAAD,CAHzB;AAAA,MAGNmB,OAHM;AAAA,MAGGC,UAHH;;AAKb,SAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA,CAFJ;AAQH,CAbD;;IAAMF,K;;MAAAA,K;AAgBN,eAAeA,KAAf","sourcesContent":["import React, {useState, useMemo, useEffect,useCallback,useRef ,current} from 'react'\r\n\r\nconst Info = () => {\r\n    const [name, setName] = useState('');\r\n    const [nickname, setNickname] = useState('');\r\n    console.log('첫로드'); \r\n    //useEffect는 기본적으로 렌더링 되고난 직후마다 실행되며,\r\n    //두번째 파라미터 배열에 무엇을 넣는냐에 따라 실행되는 조건이 달라집니다. \r\n    useEffect(() => {\r\n        console.log('렌더링이 완료되었습니다!');\r\n        console.log({\r\n          name,\r\n          nickname\r\n        });\r\n        setNickname('setNickname'); \r\n      },[]);\r\n         //▲첫 마운트, name state만 변경 될 때 실행된다.\r\n         \r\n\r\n    //만약 컴포넌트에 언마운트되기 전이나, 업데이트 되기 직전에 어떤 작업을 수행하고 싶다면 \r\n    //useEffect에서 뒷정리 함수를 반환해 주어야 합니다.\r\n    //뒷정리 함수는 바뀌기 직전 값을 반환해 준다.\r\n    // useEffect(() => {\r\n    //     console.log('effect');\r\n    //     console.log('effect=>',name);\r\n    //     return () => {\r\n\r\n    //       //바뀌기 직전값이 저장되어 있음.\r\n    //       console.log('cleanup');\r\n    //       console.log('clean=>' , name);\r\n    //     };\r\n    //   },[name]);\r\n\r\n\r\n    const onChangeName = e => {\r\n      setName(e.target.value);\r\n    };\r\n  \r\n    const onChangeNickname = e => {\r\n      setNickname(e.target.value);\r\n    };\r\n\r\n\r\n  \r\n    return (\r\n      <div>\r\n        <div>\r\n          <input value={name} onChange={onChangeName} />\r\n          <input value={nickname} onChange={onChangeNickname} />\r\n        </div>\r\n        <div>\r\n          <div>\r\n            <b>이름:</b> {name}\r\n          </div>\r\n          <div>\r\n            <b>닉네임: </b>\r\n            {nickname}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\nconst Test3 =()=>{\r\n\r\n\r\n    const [visible, setVisible] = useState(false);\r\n\r\n    return (\r\n\r\n        <div>\r\n        <Info />\r\n      </div>\r\n\r\n    )\r\n\r\n}\r\n\r\n\r\nexport default Test3;"]},"metadata":{},"sourceType":"module"}