{"ast":null,"code":"class MyUploadAdapter {\n  constructor(loader) {\n    // The file loader instance to use during the upload.\n    this.loader = loader;\n  } // Starts the upload process.\n\n\n  upload() {\n    return this.loader.file.then(file => new Promise((resolve, reject) => {\n      this._initRequest();\n\n      this._initListeners(resolve, reject, file);\n\n      this._sendRequest(file);\n    }));\n  } // Aborts the upload process.\n\n\n  abort() {\n    if (this.xhr) {\n      this.xhr.abort();\n    }\n  } // Initializes the XMLHttpRequest object using the URL passed to the constructor.\n\n\n  _initRequest() {\n    const xhr = this.xhr = new XMLHttpRequest(); // Note that your request may look different. It is up to you and your editor\n    // integration to choose the right communication channel. This example uses\n    // a POST request with JSON as a data structure but your configuration\n    // could be different.\n\n    xhr.open('POST', 'http://example.com/image/upload/path', true);\n    xhr.responseType = 'json';\n  } // Initializes XMLHttpRequest listeners.\n\n\n  _initListeners(resolve, reject, file) {\n    const xhr = this.xhr;\n    const loader = this.loader;\n    const genericErrorText = `Couldn't upload file: ${file.name}.`;\n    xhr.addEventListener('error', () => reject(genericErrorText));\n    xhr.addEventListener('abort', () => reject());\n    xhr.addEventListener('load', () => {\n      const response = xhr.response; // This example assumes the XHR server's \"response\" object will come with\n      // an \"error\" which has its own \"message\" that can be passed to reject()\n      // in the upload promise.\n      //\n      // Your integration may handle upload errors in a different way so make sure\n      // it is done properly. The reject() function must be called when the upload fails.\n\n      if (!response || response.error) {\n        return reject(response && response.error ? response.error.message : genericErrorText);\n      } // If the upload is successful, resolve the upload promise with an object containing\n      // at least the \"default\" URL, pointing to the image on the server.\n      // This URL will be used to display the image in the content. Learn more in the\n      // UploadAdapter#upload documentation.\n\n\n      resolve({\n        default: response.url\n      });\n    }); // Upload progress when it is supported. The file loader has the #uploadTotal and #uploaded\n    // properties which are used e.g. to display the upload progress bar in the editor\n    // user interface.\n\n    if (xhr.upload) {\n      xhr.upload.addEventListener('progress', evt => {\n        if (evt.lengthComputable) {\n          loader.uploadTotal = evt.total;\n          loader.uploaded = evt.loaded;\n        }\n      });\n    }\n  } // Prepares the data and sends the request.\n\n\n  _sendRequest(file) {\n    // Prepare the form data.\n    const data = new FormData();\n    data.append('upload', file); // Important note: This is the right place to implement security mechanisms\n    // like authentication and CSRF protection. For instance, you can use\n    // XMLHttpRequest.setRequestHeader() to set the request headers containing\n    // the CSRF token generated earlier by your application.\n    // Send the request.\n\n    this.xhr.send(data);\n  }\n\n} // ...\n\n\nfunction MyCustomUploadAdapterPlugin(editor) {\n  editor.plugins.get('FileRepository').createUploadAdapter = loader => {\n    // Configure the URL to the upload script in your back-end here!\n    return new MyUploadAdapter(loader);\n  };\n} // ...\n\n\nClassicEditor.create(document.querySelector('#editor'), {\n  extraPlugins: [MyCustomUploadAdapterPlugin] // ...\n\n}).catch(error => {\n  console.log(error);\n});","map":{"version":3,"sources":["D:/git Repository/PersonalProject_001/frontend/pages/CKEditor.js"],"names":["MyUploadAdapter","constructor","loader","upload","file","then","Promise","resolve","reject","_initRequest","_initListeners","_sendRequest","abort","xhr","XMLHttpRequest","open","responseType","genericErrorText","name","addEventListener","response","error","message","default","url","evt","lengthComputable","uploadTotal","total","uploaded","loaded","data","FormData","append","send","MyCustomUploadAdapterPlugin","editor","plugins","get","createUploadAdapter","ClassicEditor","create","document","querySelector","extraPlugins","catch","console","log"],"mappings":"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","sourcesContent":["class MyUploadAdapter {\r\n    constructor( loader ) {\r\n        // The file loader instance to use during the upload.\r\n        this.loader = loader;\r\n    }\r\n\r\n    // Starts the upload process.\r\n    upload() {\r\n        return this.loader.file\r\n            .then( file => new Promise( ( resolve, reject ) => {\r\n                this._initRequest();\r\n                this._initListeners( resolve, reject, file );\r\n                this._sendRequest( file );\r\n            } ) );\r\n    }\r\n\r\n    // Aborts the upload process.\r\n    abort() {\r\n        if ( this.xhr ) {\r\n            this.xhr.abort();\r\n        }\r\n    }\r\n\r\n    // Initializes the XMLHttpRequest object using the URL passed to the constructor.\r\n    _initRequest() {\r\n        const xhr = this.xhr = new XMLHttpRequest();\r\n\r\n        // Note that your request may look different. It is up to you and your editor\r\n        // integration to choose the right communication channel. This example uses\r\n        // a POST request with JSON as a data structure but your configuration\r\n        // could be different.\r\n        xhr.open( 'POST', 'http://example.com/image/upload/path', true );\r\n        xhr.responseType = 'json';\r\n    }\r\n\r\n    // Initializes XMLHttpRequest listeners.\r\n    _initListeners( resolve, reject, file ) {\r\n        const xhr = this.xhr;\r\n        const loader = this.loader;\r\n        const genericErrorText = `Couldn't upload file: ${ file.name }.`;\r\n\r\n        xhr.addEventListener( 'error', () => reject( genericErrorText ) );\r\n        xhr.addEventListener( 'abort', () => reject() );\r\n        xhr.addEventListener( 'load', () => {\r\n            const response = xhr.response;\r\n\r\n            // This example assumes the XHR server's \"response\" object will come with\r\n            // an \"error\" which has its own \"message\" that can be passed to reject()\r\n            // in the upload promise.\r\n            //\r\n            // Your integration may handle upload errors in a different way so make sure\r\n            // it is done properly. The reject() function must be called when the upload fails.\r\n            if ( !response || response.error ) {\r\n                return reject( response && response.error ? response.error.message : genericErrorText );\r\n            }\r\n\r\n            // If the upload is successful, resolve the upload promise with an object containing\r\n            // at least the \"default\" URL, pointing to the image on the server.\r\n            // This URL will be used to display the image in the content. Learn more in the\r\n            // UploadAdapter#upload documentation.\r\n            resolve( {\r\n                default: response.url\r\n            } );\r\n        } );\r\n\r\n        // Upload progress when it is supported. The file loader has the #uploadTotal and #uploaded\r\n        // properties which are used e.g. to display the upload progress bar in the editor\r\n        // user interface.\r\n        if ( xhr.upload ) {\r\n            xhr.upload.addEventListener( 'progress', evt => {\r\n                if ( evt.lengthComputable ) {\r\n                    loader.uploadTotal = evt.total;\r\n                    loader.uploaded = evt.loaded;\r\n                }\r\n            } );\r\n        }\r\n    }\r\n\r\n    // Prepares the data and sends the request.\r\n    _sendRequest( file ) {\r\n        // Prepare the form data.\r\n        const data = new FormData();\r\n\r\n        data.append( 'upload', file );\r\n\r\n        // Important note: This is the right place to implement security mechanisms\r\n        // like authentication and CSRF protection. For instance, you can use\r\n        // XMLHttpRequest.setRequestHeader() to set the request headers containing\r\n        // the CSRF token generated earlier by your application.\r\n\r\n        // Send the request.\r\n        this.xhr.send( data );\r\n    }\r\n}\r\n\r\n// ...\r\n\r\nfunction MyCustomUploadAdapterPlugin( editor ) {\r\n    editor.plugins.get( 'FileRepository' ).createUploadAdapter = ( loader ) => {\r\n        // Configure the URL to the upload script in your back-end here!\r\n        return new MyUploadAdapter( loader );\r\n    };\r\n}\r\n\r\n// ...\r\n\r\nClassicEditor\r\n    .create( document.querySelector( '#editor' ), {\r\n        extraPlugins: [ MyCustomUploadAdapterPlugin ],\r\n\r\n        // ...\r\n    } )\r\n    .catch( error => {\r\n        console.log( error );\r\n    } );"]},"metadata":{},"sourceType":"script"}