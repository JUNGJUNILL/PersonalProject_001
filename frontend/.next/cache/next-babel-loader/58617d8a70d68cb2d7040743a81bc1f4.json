{"ast":null,"code":"var _jsxFileName = \"D:\\\\git Repository\\\\PersonalProject_001\\\\frontend\\\\components\\\\mainPosts_1001\\\\mainPosts_1001_comments.js\";\nvar __jsx = React.createElement;\nimport React, { useCallback, useEffect, useState, createRef, memo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport custumDateFormat from '../../utilComponent/custumDateFormat';\nimport Comment1001ByComments from './mainPosts_1001_commentByComments';\nimport CommentTextArea from './mainPosts_1001_textArea';\nimport { DislikeTwoTone, LikeTwoTone } from '@ant-design/icons';\nimport { MAINPOSTS_1001_COMMENTBYCOMMENTINSERT_REQUEST } from '../../reducers/mainPosts_1001';\nimport { Badge } from 'antd';\n\nconst Comments1001 = ({\n  postFlag,\n  nickName,\n  postId,\n  userInfo,\n  commentId,\n  comment,\n  who,\n  flag,\n  good,\n  bad,\n  createdDate,\n  likeBtn,\n  clickedComponent,\n  likeDislikeflag,\n  byCommentCount,\n  commentByCommentList,\n  mainPosts_1001CommentByComments,\n  unfoldList\n}) => {\n  const dispatch = useDispatch();\n  const {\n    clickCommentId,\n    commentByCommentCount,\n    commentByCommentInsertCommentId\n  } = useSelector(state => state.mainPosts_1001);\n  const ref = createRef();\n  const blank_pattern = /^\\s+|\\s+&/g; //대댓글 입력 \n\n  const insertComment = useCallback((postFlag, postId, nickName, comment) => {\n    if (comment.length === 0 || comment.replace(blank_pattern, '') === \"\") {\n      alert('댓글을 입력해 주세요!');\n\n      if (ref.current) {\n        ref.current.focusInput();\n      }\n\n      return;\n    }\n\n    if (comment.length === 300) {\n      alert('300자 이상 입력 할 수 없습니다.');\n      return;\n    } //대댓글 입력\n\n\n    dispatch({\n      type: MAINPOSTS_1001_COMMENTBYCOMMENTINSERT_REQUEST,\n      data: {\n        postFlag,\n        nickName,\n        postId,\n        commentId,\n        who: userInfo,\n        comment\n      }\n    }); //인풋 초기화, 포커스 \n\n    if (ref.current) {\n      ref.current.clearInput();\n      ref.current.focusInput();\n    }\n  }, [mainPosts_1001CommentByComments, ref,, commentByCommentInsertCommentId, commentByCommentCount]);\n  return __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: \"divTableRow\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 17\n    }\n  }, __jsx(\"div\", {\n    className: \"divTableCell\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 21\n    }\n  }, __jsx(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 21\n    }\n  }, who), \" \\xA0 \", __jsx(\"small\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 41\n    }\n  }, custumDateFormat(createdDate)), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 87\n    }\n  }), comment, __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 30\n    }\n  }), __jsx(\"a\", {\n    onClick: () => commentByCommentList(postFlag, nickName, postId, commentId),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 21\n    }\n  }, byCommentCount === 0 ? `댓글달기` : `댓글[${commentByCommentInsertCommentId === commentId ? commentByCommentCount : byCommentCount}]`), \" \", commentId, __jsx(\"div\", {\n    style: {\n      marginTop: \"1%\",\n      display: \"block\",\n      float: \"right\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 25\n    }\n  }, __jsx(LikeTwoTone, {\n    onClick: () => likeBtn(commentId, flag, 'good'),\n    twoToneColor: clickedComponent && likeDislikeflag === 'good' ? \"#ff0000\" : \"#1ba640\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 29\n    }\n  }), clickedComponent && likeDislikeflag === 'good' ? parseInt(good) + 1 : good, \"\\xA0\\xA0\\xA0\\xA0\", __jsx(DislikeTwoTone, {\n    onClick: () => likeBtn(commentId, flag, 'bad'),\n    twoToneColor: clickedComponent && likeDislikeflag === 'bad' ? \"#ff0000\" : \"#1ba640\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 29\n    }\n  }), clickedComponent && likeDislikeflag === 'bad' ? parseInt(bad) + 1 : bad, \"\\xA0\\xA0\\xA0\\xA0\", __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 29\n    }\n  })))), unfoldList === 'unfold' && clickCommentId === commentId && mainPosts_1001CommentByComments && mainPosts_1001CommentByComments.map((v, i) => __jsx(Comment1001ByComments, {\n    key: i,\n    postFlag: postFlag,\n    nickName: nickName,\n    postId: postId,\n    userInfo: userInfo,\n    commentId: commentId,\n    byCommentId: v.byCommentId,\n    comment: v.comment,\n    who: v.who,\n    good: v.good,\n    bad: v.bad,\n    createdDate: v.createdDate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 21\n    }\n  })), unfoldList === 'unfold' && clickCommentId === commentId && byCommentCount >= 0 && __jsx(CommentTextArea, {\n    postFlag: postFlag,\n    nickName: nickName,\n    postId: postId,\n    userInfo: userInfo,\n    insertComment: insertComment,\n    unfoldList: unfoldList,\n    ref: ref,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 21\n    }\n  }));\n};\n\nexport default memo(Comments1001);","map":{"version":3,"sources":["D:/git Repository/PersonalProject_001/frontend/components/mainPosts_1001/mainPosts_1001_comments.js"],"names":["React","useCallback","useEffect","useState","createRef","memo","useDispatch","useSelector","custumDateFormat","Comment1001ByComments","CommentTextArea","DislikeTwoTone","LikeTwoTone","MAINPOSTS_1001_COMMENTBYCOMMENTINSERT_REQUEST","Badge","Comments1001","postFlag","nickName","postId","userInfo","commentId","comment","who","flag","good","bad","createdDate","likeBtn","clickedComponent","likeDislikeflag","byCommentCount","commentByCommentList","mainPosts_1001CommentByComments","unfoldList","dispatch","clickCommentId","commentByCommentCount","commentByCommentInsertCommentId","state","mainPosts_1001","ref","blank_pattern","insertComment","length","replace","alert","current","focusInput","type","data","clearInput","marginTop","display","float","parseInt","map","v","i","byCommentId"],"mappings":"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","sourcesContent":["import React, { useCallback,useEffect, useState, createRef, memo } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport custumDateFormat from  '../../utilComponent/custumDateFormat';\r\n\r\nimport Comment1001ByComments from './mainPosts_1001_commentByComments'\r\nimport CommentTextArea       from './mainPosts_1001_textArea'\r\nimport {DislikeTwoTone,LikeTwoTone} from '@ant-design/icons'\r\nimport \r\n    {\r\n        MAINPOSTS_1001_COMMENTBYCOMMENTINSERT_REQUEST,\r\n    } \r\nfrom '../../reducers/mainPosts_1001'; \r\nimport { Badge } from 'antd';\r\n\r\nconst Comments1001 = ({\r\n                      postFlag,\r\n                      nickName,\r\n                      postId,\r\n                      userInfo,\r\n\r\n                      commentId,\r\n                      comment,\r\n                      who,\r\n                      flag,\r\n                      \r\n                      good,\r\n                      bad,\r\n                      createdDate,\r\n\r\n                      likeBtn,\r\n\r\n                      clickedComponent,\r\n                      likeDislikeflag,\r\n                      byCommentCount,\r\n                      commentByCommentList,\r\n                      mainPosts_1001CommentByComments,\r\n                      unfoldList,\r\n\r\n                    })=>{\r\n                \r\n                        \r\n        const dispatch = useDispatch();\r\n        const {clickCommentId,\r\n               commentByCommentCount,\r\n               commentByCommentInsertCommentId} = useSelector((state)=>state.mainPosts_1001); \r\n        const ref = createRef(); \r\n        const blank_pattern = /^\\s+|\\s+&/g;  \r\n        \r\n    //대댓글 입력 \r\n  const insertComment = useCallback((postFlag,postId,nickName ,comment)=>{\r\n\r\n        if(comment.length === 0 || comment.replace(blank_pattern,'')===\"\"){\r\n \r\n            alert('댓글을 입력해 주세요!'); \r\n            if(ref.current){\r\n                ref.current.focusInput(); \r\n            }\r\n            return; \r\n\r\n        }\r\n\r\n        if(comment.length === 300){\r\n            alert('300자 이상 입력 할 수 없습니다.'); \r\n            return; \r\n        }\r\n      \r\n        //대댓글 입력\r\n        dispatch({\r\n            type:MAINPOSTS_1001_COMMENTBYCOMMENTINSERT_REQUEST, \r\n            data:{\r\n                postFlag,\r\n                nickName,\r\n                postId,\r\n                commentId,\r\n                who:userInfo,\r\n                comment,   \r\n            }\r\n        }); \r\n\r\n        //인풋 초기화, 포커스 \r\n        if(ref.current){\r\n                ref.current.clearInput(); \r\n                ref.current.focusInput(); \r\n        }\r\n\r\n      },[mainPosts_1001CommentByComments,ref,,commentByCommentInsertCommentId,commentByCommentCount]);\r\n\r\n    return (\r\n        <>\r\n                <div  className='divTableRow' >\r\n                    <div  className=\"divTableCell\">        \r\n                    <b>{who}</b> &nbsp; <small>{custumDateFormat(createdDate)}</small><br/>\r\n                    {comment}<br />\r\n                    <a onClick={()=>commentByCommentList(postFlag,nickName,postId,commentId)}>{ byCommentCount === 0 ? `댓글달기` : `댓글[${commentByCommentInsertCommentId===commentId ? commentByCommentCount : byCommentCount}]`   }</a> {commentId}          \r\n                        <div  style={{marginTop:\"1%\",display:\"block\",float:\"right\"}}>\r\n                            <LikeTwoTone onClick={()=>likeBtn(commentId,flag,'good')} twoToneColor={clickedComponent && likeDislikeflag==='good' ? \"#ff0000\" : \"#1ba640\"}/>{clickedComponent && likeDislikeflag==='good' ? parseInt(good)+1:good}\r\n                            &nbsp;&nbsp;&nbsp;&nbsp;\r\n                            <DislikeTwoTone onClick={()=>likeBtn(commentId,flag,'bad')} twoToneColor={clickedComponent && likeDislikeflag==='bad' ? \"#ff0000\" : \"#1ba640\"} />{clickedComponent && likeDislikeflag==='bad' ? parseInt(bad)+1:bad}\r\n                            &nbsp;&nbsp;&nbsp;&nbsp;\r\n                            <br />\r\n                        </div> \r\n                    </div>\r\n                </div>  \r\n\r\n                {/*대댓글 리스트*/}\r\n                {unfoldList ==='unfold' && clickCommentId === commentId && mainPosts_1001CommentByComments && mainPosts_1001CommentByComments.map((v,i)=>(\r\n                    <Comment1001ByComments                  \r\n                            key={i}\r\n                            postFlag={postFlag}\r\n                            nickName={nickName}\r\n                            postId={postId}\r\n                            userInfo={userInfo}\r\n                            commentId={commentId}\r\n\r\n                            byCommentId={v.byCommentId}\r\n                            comment={v.comment}\r\n                            who={v.who}\r\n\r\n                            good={v.good}\r\n                            bad={v.bad}\r\n                            createdDate={v.createdDate}\r\n                    />\r\n                    \r\n                ))}\r\n                {/*대댓글 입력 창*/}\r\n               {unfoldList ==='unfold' && clickCommentId === commentId && byCommentCount >= 0 && \r\n                    <CommentTextArea   \r\n                            postFlag={postFlag} \r\n                            nickName={nickName} \r\n                            postId={postId} \r\n                            userInfo={userInfo}\r\n                            insertComment={insertComment}\r\n                            unfoldList={unfoldList}   \r\n                            \r\n                            ref={ref}           \r\n                            />\r\n                }\r\n        </>   \r\n\r\n\r\n                \r\n    )\r\n\r\n}\r\n\r\nexport default memo(Comments1001); "]},"metadata":{},"sourceType":"module"}