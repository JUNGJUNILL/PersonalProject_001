{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"D:\\\\git Repository\\\\PersonalProject_001\\\\frontend\\\\components\\\\mainPosts_1001\\\\mainPosts_1001_comments.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useCallback, useEffect, useState, createRef, memo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport custumDateFormat from '../../utilComponent/custumDateFormat';\nimport Comment1001ByComments from './mainPosts_1001_commentByComments';\nimport { DislikeTwoTone, LikeTwoTone } from '@ant-design/icons';\nimport { MAINPOSTS_1001_COMMENTBYCOMMENT_REQUEST } from '../../reducers/mainPosts_1001';\nimport { Badge } from 'antd';\n\nvar Comments1001 = function Comments1001(_ref) {\n  _s();\n\n  var key = _ref.key,\n      postFlag = _ref.postFlag,\n      nickName = _ref.nickName,\n      postId = _ref.postId,\n      userInfo = _ref.userInfo,\n      commentId = _ref.commentId,\n      comment = _ref.comment,\n      who = _ref.who,\n      flag = _ref.flag,\n      good = _ref.good,\n      bad = _ref.bad,\n      createdDate = _ref.createdDate,\n      likeBtn = _ref.likeBtn,\n      clickedComponent = _ref.clickedComponent,\n      likeDislikeflag = _ref.likeDislikeflag,\n      byCommentCount = _ref.byCommentCount,\n      commentByCommentList = _ref.commentByCommentList,\n      mainPosts_1001CommentByComments = _ref.mainPosts_1001CommentByComments;\n  console.log('댓글'); // useEffect(()=>{\n  //         //대댓글 리스트 \n  //     dispatch({\n  //         type:MAINPOSTS_1001_COMMENTBYCOMMENT_REQUEST,\n  //         data:{\n  //             postFlag,\n  //             nickName,\n  //             postId,\n  //             commentId,\n  //         }\n  //     });\n  // },[])\n\n  var dispatch = useDispatch();\n\n  var _useState = useState(''),\n      unfoldList = _useState[0],\n      setUnfoldList = _useState[1]; // const commentByCommentList =useCallback((postFlag,nickName,postId,commentId,byCommentCount)=>{\n  //     if(byCommentCount > 0 ){\n  //         setUnfoldList('222');  \n  //         dispatch({\n  //             type:MAINPOSTS_1001_COMMENTBYCOMMENT_REQUEST,\n  //             data:{\n  //                 postFlag,\n  //                 nickName,\n  //                 postId,\n  //                 commentId,\n  //             }\n  //         });      \n  //     }else{\n  //         setUnfoldList('333'); \n  //     }\n  // },[])\n\n\n  return __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: \"divTableRow\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 17\n    }\n  }, __jsx(\"div\", {\n    className: \"divTableCell\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 21\n    }\n  }, __jsx(\"b\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 21\n    }\n  }, who), \" \\xA0 \", __jsx(\"small\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 41\n    }\n  }, custumDateFormat(createdDate)), __jsx(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 87\n    }\n  }), comment, __jsx(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 30\n    }\n  }), __jsx(\"a\", {\n    onClick: function onClick() {\n      return commentByCommentList(postFlag, nickName, postId, commentId, byCommentCount);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 21\n    }\n  }, byCommentCount === 0 ? \"\\uB313\\uAE00\\uB2EC\\uAE30\" : \"\\uB313\\uAE00[\".concat(byCommentCount, \"]\")), \" \", commentId, __jsx(\"div\", {\n    style: {\n      marginTop: \"1%\",\n      display: \"block\",\n      \"float\": \"right\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 25\n    }\n  }, __jsx(LikeTwoTone, {\n    onClick: function onClick() {\n      return likeBtn(commentId, flag, 'good');\n    },\n    twoToneColor: clickedComponent && likeDislikeflag === 'good' ? \"#ff0000\" : \"#1ba640\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 29\n    }\n  }), clickedComponent && likeDislikeflag === 'good' ? parseInt(good) + 1 : good, \"\\xA0\\xA0\\xA0\\xA0\", __jsx(DislikeTwoTone, {\n    onClick: function onClick() {\n      return likeBtn(commentId, flag, 'bad');\n    },\n    twoToneColor: clickedComponent && likeDislikeflag === 'bad' ? \"#ff0000\" : \"#1ba640\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 29\n    }\n  }), clickedComponent && likeDislikeflag === 'bad' ? parseInt(bad) + 1 : bad, \"\\xA0\\xA0\\xA0\\xA0\", __jsx(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 29\n    }\n  }))), mainPosts_1001CommentByComments && mainPosts_1001CommentByComments.map(function (v, i) {\n    return __jsx(Comment1001ByComments, {\n      key: i,\n      postFlag: postFlag,\n      nickName: nickName,\n      postId: postId,\n      userInfo: userInfo,\n      commentId: commentId,\n      byCommentId: v.byCommentId,\n      comment: v.comment,\n      who: v.who,\n      good: v.good,\n      bad: v.bad,\n      createdDate: v.createdDate,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 25\n      }\n    });\n  })));\n};\n\n_s(Comments1001, \"WDGlFCOy45oOOWs8xFF7mC2tjkQ=\", false, function () {\n  return [useDispatch];\n});\n\n_c = Comments1001;\nexport default _c2 = React.memo(Comments1001);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Comments1001\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["D:/git Repository/PersonalProject_001/frontend/components/mainPosts_1001/mainPosts_1001_comments.js"],"names":["React","useCallback","useEffect","useState","createRef","memo","useDispatch","useSelector","custumDateFormat","Comment1001ByComments","DislikeTwoTone","LikeTwoTone","MAINPOSTS_1001_COMMENTBYCOMMENT_REQUEST","Badge","Comments1001","key","postFlag","nickName","postId","userInfo","commentId","comment","who","flag","good","bad","createdDate","likeBtn","clickedComponent","likeDislikeflag","byCommentCount","commentByCommentList","mainPosts_1001CommentByComments","console","log","dispatch","unfoldList","setUnfoldList","marginTop","display","parseInt","map","v","i","byCommentId"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA4BC,SAA5B,EAAuCC,QAAvC,EAAiDC,SAAjD,EAA4DC,IAA5D,QAAwE,OAAxE;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAEA,OAAOC,gBAAP,MAA8B,sCAA9B;AACA,OAAOC,qBAAP,MAAkC,oCAAlC;AACA,SAAQC,cAAR,EAAuBC,WAAvB,QAAyC,mBAAzC;AACA,SAEQC,uCAFR,QAIK,+BAJL;AAKA,SAASC,KAAT,QAAsB,MAAtB;;AAEA,IAAMC,YAAY,GAAG,SAAfA,YAAe,OAwBG;AAAA;;AAAA,MAvBFC,GAuBE,QAvBFA,GAuBE;AAAA,MAtBFC,QAsBE,QAtBFA,QAsBE;AAAA,MArBFC,QAqBE,QArBFA,QAqBE;AAAA,MApBFC,MAoBE,QApBFA,MAoBE;AAAA,MAnBFC,QAmBE,QAnBFA,QAmBE;AAAA,MAjBFC,SAiBE,QAjBFA,SAiBE;AAAA,MAhBFC,OAgBE,QAhBFA,OAgBE;AAAA,MAfFC,GAeE,QAfFA,GAeE;AAAA,MAdFC,IAcE,QAdFA,IAcE;AAAA,MAZFC,IAYE,QAZFA,IAYE;AAAA,MAXFC,GAWE,QAXFA,GAWE;AAAA,MAVFC,WAUE,QAVFA,WAUE;AAAA,MARFC,OAQE,QARFA,OAQE;AAAA,MANFC,gBAME,QANFA,gBAME;AAAA,MALFC,eAKE,QALFA,eAKE;AAAA,MAJFC,cAIE,QAJFA,cAIE;AAAA,MAHFC,oBAGE,QAHFA,oBAGE;AAAA,MAFFC,+BAEE,QAFFA,+BAEE;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ,EAFA,CAIZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEJ,MAAMC,QAAQ,GAAG7B,WAAW,EAA5B;;AAlBgB,kBAmBmBH,QAAQ,CAAC,EAAD,CAnB3B;AAAA,MAmBTiC,UAnBS;AAAA,MAmBEC,aAnBF,iBAqBhB;AAEA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;;;AAGJ,SACI,4BACQ;AAAM,IAAA,SAAS,EAAC,aAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAM,IAAA,SAAS,EAAC,cAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIf,GAAJ,CAFA,YAEoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAQd,gBAAgB,CAACkB,WAAD,CAAxB,CAFpB,EAEkE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFlE,EAGCL,OAHD,EAGS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHT,EAIA;AAAG,IAAA,OAAO,EAAE;AAAA,aAAIU,oBAAoB,CAACf,QAAD,EAAUC,QAAV,EAAmBC,MAAnB,EAA0BE,SAA1B,EAAoCU,cAApC,CAAxB;AAAA,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA0FA,cAAc,KAAK,CAAnB,uDAAsCA,cAAtC,MAA1F,CAJA,OAIyJV,SAJzJ,EAMI;AAAM,IAAA,KAAK,EAAE;AAACkB,MAAAA,SAAS,EAAC,IAAX;AAAgBC,MAAAA,OAAO,EAAC,OAAxB;AAAgC,eAAM;AAAtC,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,WAAD;AAAa,IAAA,OAAO,EAAE;AAAA,aAAIZ,OAAO,CAACP,SAAD,EAAWG,IAAX,EAAgB,MAAhB,CAAX;AAAA,KAAtB;AAA0D,IAAA,YAAY,EAAEK,gBAAgB,IAAIC,eAAe,KAAG,MAAtC,GAA+C,SAA/C,GAA2D,SAAnI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EACoJD,gBAAgB,IAAIC,eAAe,KAAG,MAAtC,GAA+CW,QAAQ,CAAChB,IAAD,CAAR,GAAe,CAA9D,GAAgEA,IADpN,sBAGI,MAAC,cAAD;AAAgB,IAAA,OAAO,EAAE;AAAA,aAAIG,OAAO,CAACP,SAAD,EAAWG,IAAX,EAAgB,KAAhB,CAAX;AAAA,KAAzB;AAA4D,IAAA,YAAY,EAAEK,gBAAgB,IAAIC,eAAe,KAAG,KAAtC,GAA8C,SAA9C,GAA0D,SAApI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHJ,EAGsJD,gBAAgB,IAAIC,eAAe,KAAG,KAAtC,GAA8CW,QAAQ,CAACf,GAAD,CAAR,GAAc,CAA5D,GAA8DA,GAHpN,sBAKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALJ,CANJ,CADJ,EAeKO,+BAA+B,IAAIA,+BAA+B,CAACS,GAAhC,CAAoC,UAACC,CAAD,EAAGC,CAAH;AAAA,WACpE,MAAC,qBAAD;AAEA,MAAA,GAAG,EAAEA,CAFL;AAGA,MAAA,QAAQ,EAAE3B,QAHV;AAIA,MAAA,QAAQ,EAAEC,QAJV;AAKA,MAAA,MAAM,EAAEC,MALR;AAMA,MAAA,QAAQ,EAAEC,QANV;AAOA,MAAA,SAAS,EAAEC,SAPX;AASA,MAAA,WAAW,EAAEsB,CAAC,CAACE,WATf;AAUA,MAAA,OAAO,EAAEF,CAAC,CAACrB,OAVX;AAWA,MAAA,GAAG,EAAEqB,CAAC,CAACpB,GAXP;AAaA,MAAA,IAAI,EAAEoB,CAAC,CAAClB,IAbR;AAcA,MAAA,GAAG,EAAEkB,CAAC,CAACjB,GAdP;AAeA,MAAA,WAAW,EAAEiB,CAAC,CAAChB,WAff;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADoE;AAAA,GAApC,CAfxC,CADR,CADJ;AA+CH,CApHD;;GAAMZ,Y;UA0CmBR,W;;;KA1CnBQ,Y;AAsHN,qBAAed,KAAK,CAACK,IAAN,CAAWS,YAAX,CAAf","sourcesContent":["import React, { useCallback,useEffect, useState, createRef, memo } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport custumDateFormat from  '../../utilComponent/custumDateFormat';\r\nimport Comment1001ByComments from './mainPosts_1001_commentByComments'\r\nimport {DislikeTwoTone,LikeTwoTone} from '@ant-design/icons'\r\nimport \r\n    {\r\n        MAINPOSTS_1001_COMMENTBYCOMMENT_REQUEST\r\n    } \r\nfrom '../../reducers/mainPosts_1001'; \r\nimport { Badge } from 'antd';\r\n\r\nconst Comments1001 = ({\r\n                      key,\r\n                      postFlag,\r\n                      nickName,\r\n                      postId,\r\n                      userInfo,\r\n\r\n                      commentId,\r\n                      comment,\r\n                      who,\r\n                      flag,\r\n                      \r\n                      good,\r\n                      bad,\r\n                      createdDate,\r\n\r\n                      likeBtn,\r\n\r\n                      clickedComponent,\r\n                      likeDislikeflag,\r\n                      byCommentCount,\r\n                      commentByCommentList,\r\n                      mainPosts_1001CommentByComments\r\n\r\n                    })=>{\r\n                \r\n                        console.log('댓글');\r\n                        \r\n            // useEffect(()=>{\r\n            //         //대댓글 리스트 \r\n            //     dispatch({\r\n            //         type:MAINPOSTS_1001_COMMENTBYCOMMENT_REQUEST,\r\n            //         data:{\r\n            //             postFlag,\r\n            //             nickName,\r\n            //             postId,\r\n            //             commentId,\r\n            //         }\r\n            //     });\r\n\r\n            // },[])\r\n\r\n        const dispatch = useDispatch();\r\n        const [unfoldList,setUnfoldList] = useState(''); \r\n\r\n        // const commentByCommentList =useCallback((postFlag,nickName,postId,commentId,byCommentCount)=>{\r\n\r\n        //     if(byCommentCount > 0 ){\r\n        \r\n        //         setUnfoldList('222');  \r\n                \r\n                \r\n        //         dispatch({\r\n        //             type:MAINPOSTS_1001_COMMENTBYCOMMENT_REQUEST,\r\n        //             data:{\r\n        //                 postFlag,\r\n        //                 nickName,\r\n        //                 postId,\r\n        //                 commentId,\r\n        //             }\r\n        //         });      \r\n\r\n        //     }else{\r\n        //         setUnfoldList('333'); \r\n        //     }\r\n            \r\n        // },[])\r\n\r\n\r\n    return (\r\n        <>\r\n                <div  className='divTableRow' >\r\n                    <div  className=\"divTableCell\">\r\n                   \r\n                    <b>{who}</b> &nbsp; <small>{custumDateFormat(createdDate)}</small><br/>\r\n                    {comment}<br />\r\n                    <a onClick={()=>commentByCommentList(postFlag,nickName,postId,commentId,byCommentCount)}>{byCommentCount === 0 ? `댓글달기` : `댓글[${byCommentCount}]` }</a> {commentId}\r\n                   \r\n                        <div  style={{marginTop:\"1%\",display:\"block\",float:\"right\"}}>\r\n                            <LikeTwoTone onClick={()=>likeBtn(commentId,flag,'good')} twoToneColor={clickedComponent && likeDislikeflag==='good' ? \"#ff0000\" : \"#1ba640\"}/>{clickedComponent && likeDislikeflag==='good' ? parseInt(good)+1:good}\r\n                            &nbsp;&nbsp;&nbsp;&nbsp;\r\n                            <DislikeTwoTone onClick={()=>likeBtn(commentId,flag,'bad')} twoToneColor={clickedComponent && likeDislikeflag==='bad' ? \"#ff0000\" : \"#1ba640\"} />{clickedComponent && likeDislikeflag==='bad' ? parseInt(bad)+1:bad}\r\n                            &nbsp;&nbsp;&nbsp;&nbsp;\r\n                            <br />\r\n                        </div> \r\n                    </div>\r\n                    {mainPosts_1001CommentByComments && mainPosts_1001CommentByComments.map((v,i)=>(\r\n                        <Comment1001ByComments \r\n                        \r\n                        key={i}\r\n                        postFlag={postFlag}\r\n                        nickName={nickName}\r\n                        postId={postId}\r\n                        userInfo={userInfo}\r\n                        commentId={commentId}\r\n    \r\n                        byCommentId={v.byCommentId}\r\n                        comment={v.comment}\r\n                        who={v.who}\r\n    \r\n                        good={v.good}\r\n                        bad={v.bad}\r\n                        createdDate={v.createdDate}\r\n                        />\r\n    \r\n                    ))}\r\n\r\n                   \r\n                </div>  \r\n  \r\n        </>   \r\n\r\n\r\n                \r\n    )\r\n\r\n}\r\n\r\nexport default React.memo(Comments1001); "]},"metadata":{},"sourceType":"module"}