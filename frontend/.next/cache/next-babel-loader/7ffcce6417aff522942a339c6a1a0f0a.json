{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"D:\\\\git Repository\\\\PersonalProject_001\\\\frontend\\\\components\\\\mainPosts_1001\\\\mainPosts_1001_comments.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useCallback, useEffect, useState, createRef, memo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport custumDateFormat from '../../utilComponent/custumDateFormat';\nimport Comment1001ByComments from './mainPosts_1001_commentByComments';\nimport { DislikeTwoTone, LikeTwoTone } from '@ant-design/icons';\nimport { MAINPOSTS_1001_COMMENTBYCOMMENT_REQUEST } from '../../reducers/mainPosts_1001';\nimport { Badge } from 'antd';\n\nvar Comments1001 = function Comments1001(_ref) {\n  _s();\n\n  var key = _ref.key,\n      postFlag = _ref.postFlag,\n      nickName = _ref.nickName,\n      postId = _ref.postId,\n      userInfo = _ref.userInfo,\n      commentId = _ref.commentId,\n      comment = _ref.comment,\n      who = _ref.who,\n      flag = _ref.flag,\n      good = _ref.good,\n      bad = _ref.bad,\n      createdDate = _ref.createdDate,\n      likeBtn = _ref.likeBtn,\n      clickedComponent = _ref.clickedComponent,\n      likeDislikeflag = _ref.likeDislikeflag;\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(function (state) {\n    return state.mainPosts_1001;\n  }),\n      mainPosts_1001CommentByComments = _useSelector.mainPosts_1001CommentByComments;\n\n  useEffect(function () {\n    //대댓글 리스트 \n    dispatch({\n      type: MAINPOSTS_1001_COMMENTBYCOMMENT_REQUEST,\n      data: {\n        postFlag: postFlag,\n        nickName: nickName,\n        postId: postId,\n        commentId: commentId\n      }\n    });\n  }, []);\n\n  var _useState = useState(''),\n      unfoldList = _useState[0],\n      setUnfoldList = _useState[1];\n\n  var array = [{\n    id: '1001',\n    comment: '아이고',\n    modifierdate: '20201124'\n  }, {\n    id: '1002',\n    comment: 'helloWorld',\n    modifierdate: '20201124'\n  }, {\n    id: '1003',\n    comment: 'goodWorld',\n    modifierdate: '20201124'\n  }, {\n    id: '1004',\n    comment: 'pickWorld',\n    modifierdate: '20201124'\n  }];\n\n  var commentByCommentList = function commentByCommentList(param) {\n    if (param === 'open') {\n      setUnfoldList('open');\n    }\n\n    if (param === 'close') {\n      setUnfoldList('close');\n    }\n  };\n\n  return __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: \"divTableRow\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 17\n    }\n  }, __jsx(\"div\", {\n    className: \"divTableCell\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 21\n    }\n  }, __jsx(\"b\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 21\n    }\n  }, who), \" \\xA0 \", __jsx(\"small\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 41\n    }\n  }, custumDateFormat(createdDate)), __jsx(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 87\n    }\n  }), comment, __jsx(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 30\n    }\n  }), __jsx(\"a\", {\n    onClick: function onClick() {\n      return commentByCommentList('open');\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 20\n    }\n  }, \"\\uB2F5\\uAE00 [9]\"), \" \", commentId, __jsx(\"div\", {\n    style: {\n      marginTop: \"1%\",\n      marginLeft: \"5%\",\n      display: \"block\",\n      \"float\": \"right\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 25\n    }\n  }, __jsx(LikeTwoTone, {\n    onClick: function onClick() {\n      return likeBtn(commentId, flag, 'good');\n    },\n    twoToneColor: clickedComponent && likeDislikeflag === 'good' ? \"#ff0000\" : \"#1ba640\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 29\n    }\n  }), clickedComponent && likeDislikeflag === 'good' ? parseInt(good) + 1 : good, \"\\xA0\\xA0\\xA0\\xA0\", __jsx(DislikeTwoTone, {\n    onClick: function onClick() {\n      return likeBtn(commentId, flag, 'bad');\n    },\n    twoToneColor: clickedComponent && likeDislikeflag === 'bad' ? \"#ff0000\" : \"#1ba640\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 29\n    }\n  }), clickedComponent && likeDislikeflag === 'bad' ? parseInt(bad) + 1 : bad, \"\\xA0\\xA0\\xA0\\xA0\", __jsx(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 29\n    }\n  })))), mainPosts_1001CommentByComments && mainPosts_1001CommentByComments.map(function (v, i) {\n    __jsx(Comment1001ByComments, {\n      key: i,\n      postFlag: postFlag,\n      nickName: nickName,\n      postId: postId,\n      userInfo: userInfo,\n      commentId: commentId,\n      byCommentId: v.byCommentId,\n      comment: v.comment,\n      who: v.who,\n      good: v.good,\n      bad: v.bad,\n      createdDate: v.createdDate,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 21\n      }\n    });\n  }));\n};\n\n_s(Comments1001, \"RFLUIDRQxXOzqJBMzRx7BzSvFAU=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = Comments1001;\nexport default _c2 = React.memo(Comments1001);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Comments1001\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["D:/git Repository/PersonalProject_001/frontend/components/mainPosts_1001/mainPosts_1001_comments.js"],"names":["React","useCallback","useEffect","useState","createRef","memo","useDispatch","useSelector","custumDateFormat","Comment1001ByComments","DislikeTwoTone","LikeTwoTone","MAINPOSTS_1001_COMMENTBYCOMMENT_REQUEST","Badge","Comments1001","key","postFlag","nickName","postId","userInfo","commentId","comment","who","flag","good","bad","createdDate","likeBtn","clickedComponent","likeDislikeflag","dispatch","state","mainPosts_1001","mainPosts_1001CommentByComments","type","data","unfoldList","setUnfoldList","array","id","modifierdate","commentByCommentList","param","marginTop","marginLeft","display","parseInt","map","v","i","byCommentId"],"mappings":"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","sourcesContent":["import React, { useCallback,useEffect, useState, createRef, memo } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport custumDateFormat from  '../../utilComponent/custumDateFormat';\r\nimport Comment1001ByComments from './mainPosts_1001_commentByComments'\r\nimport {DislikeTwoTone,LikeTwoTone} from '@ant-design/icons'\r\nimport \r\n    {\r\n        MAINPOSTS_1001_COMMENTBYCOMMENT_REQUEST\r\n    } \r\nfrom '../../reducers/mainPosts_1001'; \r\nimport { Badge } from 'antd';\r\n\r\nconst Comments1001 = ({\r\n                      key,\r\n                      postFlag,\r\n                      nickName,\r\n                      postId,\r\n                      userInfo,\r\n\r\n                      commentId,\r\n                      comment,\r\n                      who,\r\n                      flag,\r\n                      \r\n                      good,\r\n                      bad,\r\n                      createdDate,\r\n\r\n                      likeBtn,\r\n\r\n                      clickedComponent,\r\n                      likeDislikeflag,\r\n\r\n                    })=>{\r\n                \r\n\r\n        const dispatch = useDispatch(); \r\n\r\n        const {mainPosts_1001CommentByComments} = useSelector((state)=>state.mainPosts_1001); \r\n\r\n        useEffect(()=>{\r\n\r\n            //대댓글 리스트 \r\n            dispatch({\r\n                type:MAINPOSTS_1001_COMMENTBYCOMMENT_REQUEST,\r\n                data:{\r\n                    postFlag,\r\n                    nickName,\r\n                    postId,\r\n                    commentId,\r\n                }\r\n            });\r\n\r\n        },[]); \r\n        \r\n        const [unfoldList,setUnfoldList] = useState(''); \r\n        const array =[{id:'1001',comment:'아이고',modifierdate:'20201124'},\r\n                      {id:'1002',comment:'helloWorld',modifierdate:'20201124'},\r\n                      {id:'1003',comment:'goodWorld',modifierdate:'20201124'},\r\n                      {id:'1004',comment:'pickWorld',modifierdate:'20201124'},\r\n    ]\r\n\r\n        const commentByCommentList =(param)=>{\r\n\r\n            if(param ==='open'){\r\n                setUnfoldList('open'); \r\n            }\r\n            if(param ==='close'){\r\n                setUnfoldList('close'); \r\n            }\r\n            \r\n        }\r\n\r\n\r\n    return (\r\n        <>\r\n                <div  className='divTableRow' >\r\n                    <div  className=\"divTableCell\">\r\n                    <b>{who}</b> &nbsp; <small>{custumDateFormat(createdDate)}</small><br/>\r\n                    {comment}<br />\r\n                   <a onClick={()=>commentByCommentList('open')}>답글 [9]</a> {commentId}\r\n                   \r\n                        <div  style={{marginTop:\"1%\",marginLeft:\"5%\",display:\"block\",float:\"right\"}}>\r\n                            <LikeTwoTone onClick={()=>likeBtn(commentId,flag,'good')} twoToneColor={clickedComponent && likeDislikeflag==='good' ? \"#ff0000\" : \"#1ba640\"}/>{clickedComponent && likeDislikeflag==='good' ? parseInt(good)+1:good}\r\n                            &nbsp;&nbsp;&nbsp;&nbsp;\r\n                            <DislikeTwoTone onClick={()=>likeBtn(commentId,flag,'bad')} twoToneColor={clickedComponent && likeDislikeflag==='bad' ? \"#ff0000\" : \"#1ba640\"} />{clickedComponent && likeDislikeflag==='bad' ? parseInt(bad)+1:bad}\r\n                            &nbsp;&nbsp;&nbsp;&nbsp;\r\n                            <br />\r\n                        </div> \r\n                    </div>\r\n                </div>    \r\n                {mainPosts_1001CommentByComments && mainPosts_1001CommentByComments.map((v,i)=>{\r\n                    <Comment1001ByComments \r\n                            key={i}\r\n                            postFlag={postFlag} \r\n                            nickName={nickName} \r\n                            postId={postId} \r\n                            userInfo={userInfo}\r\n                            commentId={commentId} \r\n\r\n                            byCommentId={v.byCommentId}\r\n                            comment={v.comment}\r\n                            who={v.who}\r\n\r\n                            good={v.good}\r\n                            bad={v.bad}\r\n                            createdDate={v.createdDate}\r\n\r\n                            \r\n                    />\r\n                })}\r\n\r\n     \r\n        </>   \r\n\r\n\r\n                \r\n    )\r\n\r\n}\r\n\r\nexport default React.memo(Comments1001); "]},"metadata":{},"sourceType":"module"}