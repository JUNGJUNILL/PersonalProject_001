{"ast":null,"code":"var _jsxFileName = \"D:\\\\git Repository\\\\PersonalProject_001\\\\frontend\\\\pages\\\\detailPage.js\";\nvar __jsx = React.createElement;\nimport React, { useCallback, useEffect, useState, createRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Home from '../components/mainPosts_1001/mainPosts_1001';\nimport Comments1001 from '../components/mainPosts_1001/mainPosts_1001_comments';\nimport CommentTextArea from '../components/mainPosts_1001/mainPosts_1001_textArea';\nimport { MAINPOSTS_1001_DETAIL_INFO_REQUEST, MAINPOSTS_1001_COMMENTS_REQUEST, MAINPOSTS_1001_COMMENTINSERT_REQUEST, MAINPOSTS_1001_COMMENTLIKE_REQUEST, MAINPOSTS_1001_COMMENTBYCOMMENT_REQUEST } from '../reducers/mainPosts_1001';\nimport { DislikeTwoTone, LikeTwoTone, UserOutlined, FieldTimeOutlined } from '@ant-design/icons';\nimport { Button } from 'antd';\nimport custumDateFormat from '../utilComponent/custumDateFormat';\n\nconst detailPage = ({\n  nickName,\n  postFlag,\n  postId\n}) => {\n  const dispatch = useDispatch();\n  const {\n    mainPosts_1001Info,\n    mainPosts_1001Comments,\n    mainPosts_1001CommentByComments\n  } = useSelector(state => state.mainPosts_1001);\n  const {\n    userInfo\n  } = useSelector(state => state.auth);\n  const ref = createRef();\n  const blank_pattern = /^\\s+|\\s+&/g;\n  const {\n    0: insertClick,\n    1: setInsertClick\n  } = useState('');\n  const {\n    0: unfoldList,\n    1: setUnfoldList\n  } = useState('');\n  useEffect(() => {\n    //댓글 리스트 \n    dispatch({\n      type: MAINPOSTS_1001_COMMENTS_REQUEST,\n      data: {\n        postId,\n        nickName,\n        postFlag,\n        who: userInfo\n      }\n    }); //상세 정보 \n\n    dispatch({\n      type: MAINPOSTS_1001_DETAIL_INFO_REQUEST,\n      data: {\n        postId,\n        nickName,\n        postFlag\n      }\n    });\n  }, []); //좋아요, 싫어요 버튼 \n\n  const likeBtn = useCallback((commentid, flag, likeDislike) => {\n    if (!userInfo) {\n      alert('로그인이 필요한 서비스 입니다.');\n      return;\n    }\n\n    if (flag === \"Y\") {\n      alert('이미 좋아요! 싫어요! 했습니다.');\n      return;\n    } else {\n      //댓글 좋아요!\n      dispatch({\n        type: MAINPOSTS_1001_COMMENTLIKE_REQUEST,\n        data: {\n          commentid,\n          postFlag,\n          postId,\n          flag: likeDislike,\n          who: userInfo,\n          nickName,\n          mainPosts_1001Comments: [...mainPosts_1001Comments]\n        }\n      });\n    }\n\n    alert(`${likeDislike}`);\n  }, [mainPosts_1001Comments]); //댓글 입력 \n\n  const insertComment = useCallback((postFlag, postId, nickName, comment) => {\n    if (comment.length === 0 || comment.replace(blank_pattern, '') === \"\") {\n      alert('댓글을 입력해 주세요!');\n      ref.current.focus();\n      return;\n    }\n\n    if (comment.length === 300) {\n      alert('300자 이상 입력 할 수 없습니다.');\n      return;\n    } //댓글 입력\n\n\n    dispatch({\n      type: MAINPOSTS_1001_COMMENTINSERT_REQUEST,\n      data: {\n        postId,\n        postFlag,\n        nickName,\n        who: userInfo,\n        comment\n      }\n    }); //clear the input \n\n    setInsertClick('clicked');\n  }, [mainPosts_1001Comments]); //대댓글 리스트 \n\n  const commentByCommentList = useCallback((postFlag, nickName, postId, commentId, byCommentCount) => {\n    if (byCommentCount > 0) {\n      setUnfoldList('unfold');\n      dispatch({\n        type: MAINPOSTS_1001_COMMENTBYCOMMENT_REQUEST,\n        data: {\n          postFlag,\n          nickName,\n          postId,\n          commentId\n        }\n      });\n    } else {//setUnfoldList('333'); \n    }\n  }, [mainPosts_1001CommentByComments, unfoldList]);\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: \"divTable\",\n    style: {\n      marginTop: '3%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    className: \"divTableRowTh\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 13\n    }\n  }, __jsx(\"div\", {\n    className: \"divTableCellTh\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 17\n    }\n  }, mainPosts_1001Info[0].title, \" [\", mainPosts_1001Comments.length, \"]\")), __jsx(\"div\", {\n    className: \"divTableRow\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 12\n    }\n  }, __jsx(\"div\", {\n    className: \"divTableCell\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 17\n    }\n  }, __jsx(UserOutlined, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 19\n    }\n  }), \"  \", mainPosts_1001Info[0].userNickName, __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 73\n    }\n  }), __jsx(FieldTimeOutlined, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 19\n    }\n  }), \"  \", custumDateFormat(mainPosts_1001Info[0].createdDate), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 95\n    }\n  }), __jsx(LikeTwoTone, {\n    twoToneColor: \"#1ba640\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 19\n    }\n  }), \" : \", mainPosts_1001Info[0].good, \" \", __jsx(DislikeTwoTone, {\n    twoToneColor: \"#1ba640\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 88\n    }\n  }), \" : \", mainPosts_1001Info[0].bad))), __jsx(\"div\", {\n    style: {\n      width: \"100%\",\n      height: \"auto\",\n      border: \"1px solid\",\n      borderColor: \"#8cc49c\",\n      marginTop: \"1%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }\n  }, \"\\uAD11\\uACE0\\uC785\\uB2C8\\uB2E4.\"), __jsx(\"div\", {\n    style: {\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      marginTop: \"1%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 6\n    }\n  }, __jsx(\"div\", {\n    dangerouslySetInnerHTML: {\n      __html: mainPosts_1001Info[0].content\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 9\n    }\n  })), __jsx(\"div\", {\n    style: {\n      width: \"100%\",\n      height: \"auto\",\n      border: \"1px solid\",\n      borderColor: \"#8cc49c\",\n      marginTop: \"1%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 5\n    }\n  }, \"\\uAD11\\uACE0\\uC785\\uB2C8\\uB2E4.\"), __jsx(\"div\", {\n    className: \"divTable\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: \"divTableRowTh\",\n    style: {\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 7\n    }\n  }, __jsx(Button, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 11\n    }\n  }, __jsx(LikeTwoTone, {\n    twoToneColor: \"#1ba640\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 19\n    }\n  })), \"\\xA0\\xA0\\xA0\\xA0\", __jsx(Button, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 90\n    }\n  }, __jsx(DislikeTwoTone, {\n    twoToneColor: \"#1ba640\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 98\n    }\n  })))), __jsx(CommentTextArea, {\n    postFlag: postFlag,\n    nickName: nickName,\n    postId: postId,\n    userInfo: userInfo,\n    insertComment: insertComment,\n    insertClick: insertClick,\n    ref: ref,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 4\n    }\n  }), __jsx(\"div\", {\n    className: \"divTable\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 5\n    }\n  }, mainPosts_1001Comments && mainPosts_1001Comments.map((v, i) => __jsx(Comments1001, {\n    key: i,\n    postFlag: postFlag,\n    nickName: nickName,\n    postId: postId,\n    userInfo: userInfo,\n    commentId: v.commentId,\n    comment: v.comment,\n    who: v.who,\n    flag: v.flag,\n    good: v.good,\n    bad: v.bad,\n    createdDate: v.createdDate,\n    likeBtn: likeBtn,\n    clickedComponent: v.clickedComponent,\n    likeDislikeflag: v.likeDislikeflag,\n    byCommentCount: v.byCommentCount,\n    commentByCommentList: commentByCommentList,\n    mainPosts_1001CommentByComments: mainPosts_1001CommentByComments[0].commentId === v.commentId ? mainPosts_1001CommentByComments : '',\n    unfoldList: unfoldList,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 9\n    }\n  }))));\n};\n\ndetailPage.getInitialProps = async context => {\n  const postId = context.query.postId;\n  const nickName = context.query.nickName;\n  const postFlag = context.query.postFlag;\n  return {\n    nickName,\n    postFlag,\n    postId\n  };\n};\n\nexport default detailPage;","map":{"version":3,"sources":["D:/git Repository/PersonalProject_001/frontend/pages/detailPage.js"],"names":["React","useCallback","useEffect","useState","createRef","useDispatch","useSelector","Home","Comments1001","CommentTextArea","MAINPOSTS_1001_DETAIL_INFO_REQUEST","MAINPOSTS_1001_COMMENTS_REQUEST","MAINPOSTS_1001_COMMENTINSERT_REQUEST","MAINPOSTS_1001_COMMENTLIKE_REQUEST","MAINPOSTS_1001_COMMENTBYCOMMENT_REQUEST","DislikeTwoTone","LikeTwoTone","UserOutlined","FieldTimeOutlined","Button","custumDateFormat","detailPage","nickName","postFlag","postId","dispatch","mainPosts_1001Info","mainPosts_1001Comments","mainPosts_1001CommentByComments","state","mainPosts_1001","userInfo","auth","ref","blank_pattern","insertClick","setInsertClick","unfoldList","setUnfoldList","type","data","who","likeBtn","commentid","flag","likeDislike","alert","insertComment","comment","length","replace","current","focus","commentByCommentList","commentId","byCommentCount","marginTop","title","userNickName","createdDate","good","bad","width","height","border","borderColor","display","justifyContent","alignItems","__html","content","map","v","i","clickedComponent","likeDislikeflag","getInitialProps","context","query"],"mappings":"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","sourcesContent":["import React, { useCallback,useEffect, useState, createRef } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport Home from '../components/mainPosts_1001/mainPosts_1001'\r\nimport Comments1001 from '../components/mainPosts_1001/mainPosts_1001_comments'\r\nimport CommentTextArea from '../components/mainPosts_1001/mainPosts_1001_textArea'\r\nimport \r\n    {MAINPOSTS_1001_DETAIL_INFO_REQUEST,\r\n     MAINPOSTS_1001_COMMENTS_REQUEST, \r\n     MAINPOSTS_1001_COMMENTINSERT_REQUEST,\r\n     MAINPOSTS_1001_COMMENTLIKE_REQUEST,\r\n     MAINPOSTS_1001_COMMENTBYCOMMENT_REQUEST\r\n    } \r\nfrom '../reducers/mainPosts_1001'; \r\n\r\nimport {DislikeTwoTone,LikeTwoTone , UserOutlined, FieldTimeOutlined} from '@ant-design/icons'\r\nimport {Button} from 'antd'\r\nimport custumDateFormat from  '../utilComponent/custumDateFormat';\r\n\r\n\r\n\r\nconst detailPage  = ({nickName,postFlag,postId}) =>{\r\n\r\n  const dispatch = useDispatch(); \r\n  const {mainPosts_1001Info , \r\n         mainPosts_1001Comments,\r\n         mainPosts_1001CommentByComments\r\n        } = useSelector((state)=>state.mainPosts_1001); \r\n\r\n  const {userInfo}      = useSelector((state)=>state.auth);\r\n  const ref = createRef(); \r\n  const blank_pattern = /^\\s+|\\s+&/g;  \r\n  const [insertClick, setInsertClick] = useState('');\r\n  const [unfoldList,setUnfoldList] = useState('');  \r\n\r\n  useEffect(()=>{\r\n    \r\n    //댓글 리스트 \r\n    dispatch({\r\n      type:MAINPOSTS_1001_COMMENTS_REQUEST, \r\n      data:{\r\n        postId,\r\n        nickName,\r\n        postFlag,\r\n        who:userInfo, \r\n      }\r\n    }); \r\n\r\n    //상세 정보 \r\n    dispatch({\r\n          type:MAINPOSTS_1001_DETAIL_INFO_REQUEST, \r\n          data:{\r\n            postId,\r\n            nickName,\r\n            postFlag,\r\n          }\r\n    });\r\n\r\n  },[]);\r\n\r\n\r\n  //좋아요, 싫어요 버튼 \r\n  const likeBtn =useCallback((commentid,flag,likeDislike)=>{\r\n      if(!userInfo){\r\n        alert('로그인이 필요한 서비스 입니다.'); \r\n        return;\r\n      }\r\n\r\n      if(flag===\"Y\"){\r\n        \r\n        alert('이미 좋아요! 싫어요! 했습니다.'); \r\n        return; \r\n  \r\n      }else{\r\n\r\n        //댓글 좋아요!\r\n        dispatch({\r\n          type:MAINPOSTS_1001_COMMENTLIKE_REQUEST, \r\n          data:{\r\n            commentid,\r\n            postFlag,\r\n            postId,\r\n            flag: likeDislike ,\r\n            who: userInfo,\r\n            nickName,\r\n            mainPosts_1001Comments:[...mainPosts_1001Comments],\r\n          }\r\n      }); \r\n\r\n    }\r\n\r\n     alert(`${likeDislike}`); \r\n    \r\n    },[mainPosts_1001Comments]); \r\n\r\n\r\n  //댓글 입력 \r\n  const insertComment = useCallback((postFlag,postId,nickName ,comment)=>{\r\n    if(comment.length === 0 || comment.replace(blank_pattern,'')===\"\"){\r\n      \r\n         \r\n        alert('댓글을 입력해 주세요!'); \r\n        ref.current.focus();  \r\n        return; \r\n        }\r\n    \r\n        if(comment.length === 300){\r\n          alert('300자 이상 입력 할 수 없습니다.'); \r\n          return; \r\n        }\r\n\r\n          //댓글 입력\r\n          dispatch({\r\n            type:MAINPOSTS_1001_COMMENTINSERT_REQUEST, \r\n            data:{\r\n              postId,\r\n              postFlag,\r\n              nickName ,\r\n              who:userInfo, \r\n              comment,\r\n            }\r\n        });\r\n\r\n        //clear the input \r\n        setInsertClick('clicked')        \r\n\r\n      },[mainPosts_1001Comments]);\r\n\r\n\r\n\r\n      //대댓글 리스트 \r\n      const commentByCommentList =useCallback((postFlag,nickName,postId,commentId,byCommentCount)=>{\r\n\r\n\r\n               if(byCommentCount > 0 ){\r\n      \r\n                \r\n                setUnfoldList('unfold'); \r\n                dispatch({\r\n                    type:MAINPOSTS_1001_COMMENTBYCOMMENT_REQUEST,\r\n                    data:{\r\n                        postFlag,\r\n                        nickName,\r\n                        postId,\r\n                        commentId,\r\n                    }\r\n                });      \r\n\r\n                }else{\r\n                    //setUnfoldList('333'); \r\n                }\r\n      },[mainPosts_1001CommentByComments,unfoldList]); \r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n      \r\n    <div >\r\n    {/*상세 페이지 타이틀--------------------------------------------------------------------------------*/}\r\n      <div className='divTable' style={{marginTop:'3%'}}>\r\n            <div className='divTableRowTh'>\r\n                <div className='divTableCellTh'>{mainPosts_1001Info[0].title} [{mainPosts_1001Comments.length}]</div>\r\n           </div>\r\n           <div className='divTableRow'>\r\n                <div className='divTableCell'>\r\n                  <UserOutlined />  {mainPosts_1001Info[0].userNickName}<br />\r\n                  <FieldTimeOutlined />  {custumDateFormat(mainPosts_1001Info[0].createdDate)}<br />\r\n                  <LikeTwoTone twoToneColor=\"#1ba640\"/> : {mainPosts_1001Info[0].good} <DislikeTwoTone  twoToneColor=\"#1ba640\"/> : {mainPosts_1001Info[0].bad} \r\n                </div>\r\n           </div>\r\n      </div>\r\n    {/*상세 페이지 타이틀--------------------------------------------------------------------------------*/}\r\n\r\n      <div style={{width:\"100%\",height:\"auto\", border:\"1px solid\", borderColor:\"#8cc49c\",marginTop:\"1%\"}}>\r\n         광고입니다.\r\n      </div>\r\n   \r\n\r\n\r\n\r\n\r\n\r\n    {/*상세 페이지 컨텐츠--------------------------------------------------------------------------------*/}\r\n     <div style={{display:\"flex\",justifyContent:\"center\",alignItems:\"center\",marginTop:\"1%\"}}>\r\n        <div dangerouslySetInnerHTML={{__html:mainPosts_1001Info[0].content}}/>\r\n     </div> \r\n    {/*상세 페이지 컨텐츠--------------------------------------------------------------------------------*/}   \r\n    \r\n\r\n\r\n\r\n\r\n    <div style={{width:\"100%\",height:\"auto\", border:\"1px solid\", borderColor:\"#8cc49c\",marginTop:\"1%\"}}>\r\n      광고입니다.\r\n    </div>\r\n\r\n\r\n\r\n\r\n\r\n    {/*좋아요 싫어요 버튼--------------------------------------------------------------------------------*/}\r\n    <div className='divTable'>\r\n      <div className='divTableRowTh' style={{display:\"flex\",justifyContent:\"center\",alignItems:\"center\"}}>\r\n          <Button><LikeTwoTone  twoToneColor=\"#1ba640\"/></Button>&nbsp;&nbsp;&nbsp;&nbsp;<Button><DislikeTwoTone twoToneColor=\"#1ba640\"/></Button>\r\n      </div>\r\n    </div>\r\n    {/*좋아요 싫어요 버튼--------------------------------------------------------------------------------*/}\r\n\r\n\r\n\r\n\r\n\r\n    {/*댓글 입력--------------------------------------------------------------------------------*/}\r\n   <CommentTextArea   \r\n            postFlag={postFlag} \r\n            nickName={nickName} \r\n            postId={postId} \r\n            userInfo={userInfo}\r\n            insertComment={insertComment}\r\n            insertClick={insertClick}\r\n            ref={ref}\r\n   />\r\n    {/*댓글 입력--------------------------------------------------------------------------------*/}\r\n\r\n\r\n\r\n\r\n    {/*댓글 리스트--------------------------------------------------------------------------------*/}\r\n\r\n    <div className=\"divTable\">\r\n      {mainPosts_1001Comments && mainPosts_1001Comments.map((v,i)=>\r\n\r\n        <Comments1001 \r\n              key={i} \r\n              postFlag={postFlag} \r\n              nickName={nickName} \r\n              postId={postId} \r\n              userInfo={userInfo}\r\n    \r\n              commentId={v.commentId} \r\n              comment={v.comment} \r\n              who={v.who} \r\n              flag={v.flag} \r\n\r\n              good={v.good}\r\n              bad={v.bad}      \r\n              createdDate={v.createdDate} \r\n    \r\n              likeBtn={likeBtn}\r\n\r\n              clickedComponent={v.clickedComponent}\r\n              likeDislikeflag={v.likeDislikeflag}\r\n              \r\n              byCommentCount={v.byCommentCount}\r\n              commentByCommentList={commentByCommentList}\r\n              mainPosts_1001CommentByComments={mainPosts_1001CommentByComments[0].commentId === v.commentId ? mainPosts_1001CommentByComments : ''}\r\n              unfoldList={unfoldList}\r\n\r\n              />\r\n      )\r\n    \r\n    }\r\n    </div>\r\n    {/*댓글 리스트--------------------------------------------------------------------------------*/}\r\n\r\n    </div>\r\n        )\r\n}\r\n\r\n\r\ndetailPage.getInitialProps = async (context) =>{\r\n\r\n  const postId   = context.query.postId; \r\n  const nickName = context.query.nickName; \r\n  const postFlag = context.query.postFlag; \r\n  return {nickName,postFlag,postId}; \r\n}\r\nexport default detailPage; "]},"metadata":{},"sourceType":"module"}