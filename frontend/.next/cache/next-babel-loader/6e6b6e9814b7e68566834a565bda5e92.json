{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(sagaEmpList),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchempList),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(sagaEmpInsert),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchInsertEmp),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(empListSaga);\n\nimport axios from 'axios';\nimport { all, fork, takeLatest, takeEvery, put, delay, call } from 'redux-saga/effects';\nimport { EMP_LIST_REQUEST, EMP_LIST_SUCCESS, EMP_LIST_FAILURE, EMP_INSERT_REQUEST, EMP_INSERT_SUCCESS, EMP_INSERT_FAILURE } from '../reducers/emp';\n\nfunction APIempList(data) {\n  return axios.post('/emp', {\n    data: data\n  }, {\n    withCredentials: true\n  });\n}\n\n_c = APIempList;\n\nfunction sagaEmpList(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function sagaEmpList$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(APIempList, action.data);\n\n        case 3:\n          result = _context.sent;\n          console.log(result);\n          _context.next = 7;\n          return put({\n            type: EMP_LIST_SUCCESS,\n            data: result.data\n          });\n\n        case 7:\n          _context.next = 15;\n          break;\n\n        case 9:\n          _context.prev = 9;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0);\n          alert('error', _context.t0);\n          _context.next = 15;\n          return put({\n            type: EMP_LIST_FAILURE,\n            error: _context.t0\n          });\n\n        case 15:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 9]]);\n}\n\nfunction watchempList() {\n  return _regeneratorRuntime.wrap(function watchempList$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(EMP_LIST_REQUEST, sagaEmpList);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction APIempInsert(data) {\n  return axios.post('/');\n}\n\n_c2 = APIempInsert;\n\nfunction sagaEmpInsert(action) {\n  return _regeneratorRuntime.wrap(function sagaEmpInsert$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          console.log('sagaEmpInsert==>', action.data); // const result = yield call(APIempInsert,action.data); \n          // yield  put({\n          //       type:EMP_INSERT_SUCCESS, \n          //       data:result.data,\n          //   });\n\n          _context3.next = 10;\n          break;\n\n        case 4:\n          _context3.prev = 4;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.error(_context3.t0);\n          alert('error', _context3.t0);\n          _context3.next = 10;\n          return put({\n            type: EMP_INSERT_FAILURE,\n            error: _context3.t0\n          });\n\n        case 10:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 4]]);\n}\n\nfunction watchInsertEmp() {\n  return _regeneratorRuntime.wrap(function watchInsertEmp$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(EMP_INSERT_REQUEST, sagaEmpInsert);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nexport default function empListSaga() {\n  return _regeneratorRuntime.wrap(function empListSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([fork(watchempList)]);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"APIempList\");\n$RefreshReg$(_c2, \"APIempInsert\");","map":{"version":3,"sources":["D:/git Repository/PersonalProject_001/frontend/sagas/empListSaga.js"],"names":["sagaEmpList","watchempList","sagaEmpInsert","watchInsertEmp","empListSaga","axios","all","fork","takeLatest","takeEvery","put","delay","call","EMP_LIST_REQUEST","EMP_LIST_SUCCESS","EMP_LIST_FAILURE","EMP_INSERT_REQUEST","EMP_INSERT_SUCCESS","EMP_INSERT_FAILURE","APIempList","data","post","withCredentials","action","result","console","log","type","error","alert","APIempInsert"],"mappings":";;oDAkBUA,W;qDAqBAC,Y;qDAWAC,a;qDAyBAC,c;qDAIeC,W;;AA/EzB,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAQC,GAAR,EAAYC,IAAZ,EAAiBC,UAAjB,EAA4BC,SAA5B,EAAuCC,GAAvC,EAA4CC,KAA5C,EAAkDC,IAAlD,QAA6D,oBAA7D;AACA,SACKC,gBADL,EAEKC,gBAFL,EAGKC,gBAHL,EAIKC,kBAJL,EAKKC,kBALL,EAMKC,kBANL,QAQK,iBARL;;AAYA,SAASC,UAAT,CAAoBC,IAApB,EAAyB;AACrB,SAAOf,KAAK,CAACgB,IAAN,CAAW,MAAX,EAAkB;AAACD,IAAAA,IAAI,EAAJA;AAAD,GAAlB,EAAyB;AAACE,IAAAA,eAAe,EAAC;AAAjB,GAAzB,CAAP;AACH;;KAFQH,U;;AAIT,SAAUnB,WAAV,CAAsBuB,MAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGqB,iBAAMX,IAAI,CAACO,UAAD,EAAYI,MAAM,CAACH,IAAnB,CAAV;;AAHrB;AAGYI,UAAAA,MAHZ;AAIQC,UAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AAJR;AAKM,iBAAOd,GAAG,CAAC;AACLiB,YAAAA,IAAI,EAACb,gBADA;AAELM,YAAAA,IAAI,EAACI,MAAM,CAACJ;AAFP,WAAD,CAAV;;AALN;AAAA;AAAA;;AAAA;AAAA;AAAA;AAYQK,UAAAA,OAAO,CAACG,KAAR;AACAC,UAAAA,KAAK,CAAC,OAAD,cAAL;AAbR;AAcQ,iBAAMnB,GAAG,CAAC;AACNiB,YAAAA,IAAI,EAACZ,gBADC;AAENa,YAAAA,KAAK;AAFC,WAAD,CAAT;;AAdR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAqBA,SAAU3B,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMO,UAAU,CAACK,gBAAD,EAAkBb,WAAlB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKA,SAAS8B,YAAT,CAAsBV,IAAtB,EAA2B;AAEvB,SAAOf,KAAK,CAACgB,IAAN,CAAW,GAAX,CAAP;AAEH;;MAJQS,Y;;AAMT,SAAU5B,aAAV,CAAwBqB,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAIQE,UAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAiCH,MAAM,CAACH,IAAxC,EAJR,CAMQ;AACA;AACA;AACA;AACA;;AAVR;AAAA;;AAAA;AAAA;AAAA;AAcUK,UAAAA,OAAO,CAACG,KAAR;AACAC,UAAAA,KAAK,CAAC,OAAD,eAAL;AAfV;AAgBU,iBAAMnB,GAAG,CAAC;AACNiB,YAAAA,IAAI,EAACT,kBADC;AAENU,YAAAA,KAAK;AAFC,WAAD,CAAT;;AAhBV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAyBA,SAAUzB,cAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMK,UAAU,CAACQ,kBAAD,EAAoBd,aAApB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUE,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAEX,iBAAME,GAAG,CAAC,CACNC,IAAI,CAACN,YAAD,CADE,CAAD,CAAT;;AAFW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import axios from 'axios'\r\nimport {all,fork,takeLatest,takeEvery ,put, delay,call} from 'redux-saga/effects'; \r\nimport \r\n    {EMP_LIST_REQUEST,\r\n     EMP_LIST_SUCCESS,\r\n     EMP_LIST_FAILURE,\r\n     EMP_INSERT_REQUEST,\r\n     EMP_INSERT_SUCCESS,\r\n     EMP_INSERT_FAILURE\r\n    } \r\nfrom '../reducers/emp'; \r\n\r\n\r\n\r\nfunction APIempList(data){\r\n    return axios.post('/emp',{data},{withCredentials:true})\r\n}\r\n\r\nfunction* sagaEmpList(action){\r\n\r\n    try{\r\n      const result = yield call(APIempList,action.data); \r\n        console.log(result); \r\n      yield  put({\r\n            type:EMP_LIST_SUCCESS, \r\n            data:result.data,\r\n        });\r\n\r\n    }catch(e){\r\n\r\n        console.error(e); \r\n        alert('error', e); \r\n        yield put({\r\n            type:EMP_LIST_FAILURE, \r\n            error: e, \r\n        }); \r\n    }\r\n}\r\n\r\nfunction* watchempList(){\r\n    yield takeLatest(EMP_LIST_REQUEST,sagaEmpList); \r\n}\r\n\r\n\r\nfunction APIempInsert(data){\r\n\r\n    return axios.post('/')\r\n\r\n}\r\n\r\nfunction* sagaEmpInsert(action){\r\n\r\n    try{\r\n\r\n        console.log('sagaEmpInsert==>' , action.data); \r\n\r\n        // const result = yield call(APIempInsert,action.data); \r\n        // yield  put({\r\n        //       type:EMP_INSERT_SUCCESS, \r\n        //       data:result.data,\r\n        //   });\r\n  \r\n      }catch(e){\r\n  \r\n          console.error(e); \r\n          alert('error', e); \r\n          yield put({\r\n              type:EMP_INSERT_FAILURE, \r\n              error: e, \r\n          }); \r\n      }\r\n\r\n}\r\n\r\n\r\nfunction* watchInsertEmp(){\r\n    yield takeLatest(EMP_INSERT_REQUEST,sagaEmpInsert); \r\n}\r\n\r\nexport default function* empListSaga(){\r\n\r\n    yield all([\r\n        fork(watchempList), \r\n     ])\r\n}"]},"metadata":{},"sourceType":"module"}