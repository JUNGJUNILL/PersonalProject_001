{"ast":null,"code":"var _jsxFileName = \"D:\\\\git Repository\\\\PersonalProject_001\\\\frontend\\\\components\\\\mainPosts_1001\\\\mainPosts_1001_comments.js\";\nvar __jsx = React.createElement;\nimport React, { useCallback, useEffect, useState, createRef, memo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport custumDateFormat from '../../utilComponent/custumDateFormat';\nimport Comment1001ByComments from './mainPosts_1001_commentByComments';\nimport { DislikeTwoTone, LikeTwoTone } from '@ant-design/icons';\nimport { MAINPOSTS_1001_COMMENTBYCOMMENT_REQUEST } from '../../reducers/mainPosts_1001';\nimport { Badge } from 'antd';\n\nconst Comments1001 = ({\n  key,\n  postFlag,\n  nickName,\n  postId,\n  userInfo,\n  commentId,\n  comment,\n  who,\n  flag,\n  good,\n  bad,\n  createdDate,\n  likeBtn,\n  clickedComponent,\n  likeDislikeflag,\n  byCommentCount\n}) => {\n  const dispatch = useDispatch();\n  const {\n    mainPosts_1001CommentByComments\n  } = useSelector(state => state.mainPosts_1001);\n  const {\n    0: unfoldList,\n    1: setUnfoldList\n  } = useState('');\n\n  const commentByCommentList = (postFlag, nickName, postId, commentId, byCommentCount) => {\n    if (byCommentCount > 0) {\n      //대댓글 리스트 \n      dispatch({\n        type: MAINPOSTS_1001_COMMENTBYCOMMENT_REQUEST,\n        data: {\n          postFlag,\n          nickName,\n          postId,\n          commentId\n        }\n      });\n    } else {}\n  };\n\n  return __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: \"divTableRow\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 17\n    }\n  }, __jsx(\"div\", {\n    className: \"divTableCell\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 21\n    }\n  }, __jsx(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 21\n    }\n  }, who), \" \\xA0 \", __jsx(\"small\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 41\n    }\n  }, custumDateFormat(createdDate)), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 87\n    }\n  }), comment, __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 30\n    }\n  }), __jsx(\"a\", {\n    onClick: () => commentByCommentList(postFlag, nickName, postId, commentId, byCommentCount),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 21\n    }\n  }, byCommentCount === 0 ? `댓글달기` : `댓글[${byCommentCount}]`), \" \", commentId, __jsx(\"div\", {\n    style: {\n      marginTop: \"1%\",\n      display: \"block\",\n      float: \"right\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 25\n    }\n  }, __jsx(LikeTwoTone, {\n    onClick: () => likeBtn(commentId, flag, 'good'),\n    twoToneColor: clickedComponent && likeDislikeflag === 'good' ? \"#ff0000\" : \"#1ba640\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 29\n    }\n  }), clickedComponent && likeDislikeflag === 'good' ? parseInt(good) + 1 : good, \"\\xA0\\xA0\\xA0\\xA0\", __jsx(DislikeTwoTone, {\n    onClick: () => likeBtn(commentId, flag, 'bad'),\n    twoToneColor: clickedComponent && likeDislikeflag === 'bad' ? \"#ff0000\" : \"#1ba640\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 29\n    }\n  }), clickedComponent && likeDislikeflag === 'bad' ? parseInt(bad) + 1 : bad, \"\\xA0\\xA0\\xA0\\xA0\", __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 29\n    }\n  }))), mainPosts_1001CommentByComments && mainPosts_1001CommentByComments.map(v => __jsx(Comment1001ByComments, {\n    key: i,\n    postFlag: postFlag,\n    nickName: nickName,\n    postId: postId,\n    userInfo: userInfo,\n    commentId: commentId,\n    byCommentId: v.byCommentId,\n    comment: v.comment,\n    who: v.who,\n    good: v.good,\n    bad: v.bad,\n    createdDate: v.createdDate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 25\n    }\n  }))));\n};\n\nexport default React.memo(Comments1001);","map":{"version":3,"sources":["D:/git Repository/PersonalProject_001/frontend/components/mainPosts_1001/mainPosts_1001_comments.js"],"names":["React","useCallback","useEffect","useState","createRef","memo","useDispatch","useSelector","custumDateFormat","Comment1001ByComments","DislikeTwoTone","LikeTwoTone","MAINPOSTS_1001_COMMENTBYCOMMENT_REQUEST","Badge","Comments1001","key","postFlag","nickName","postId","userInfo","commentId","comment","who","flag","good","bad","createdDate","likeBtn","clickedComponent","likeDislikeflag","byCommentCount","dispatch","mainPosts_1001CommentByComments","state","mainPosts_1001","unfoldList","setUnfoldList","commentByCommentList","type","data","marginTop","display","float","parseInt","map","v","i","byCommentId"],"mappings":"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","sourcesContent":["import React, { useCallback,useEffect, useState, createRef, memo } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport custumDateFormat from  '../../utilComponent/custumDateFormat';\r\nimport Comment1001ByComments from './mainPosts_1001_commentByComments'\r\nimport {DislikeTwoTone,LikeTwoTone} from '@ant-design/icons'\r\nimport \r\n    {\r\n        MAINPOSTS_1001_COMMENTBYCOMMENT_REQUEST\r\n    } \r\nfrom '../../reducers/mainPosts_1001'; \r\nimport { Badge } from 'antd';\r\n\r\nconst Comments1001 = ({\r\n                      key,\r\n                      postFlag,\r\n                      nickName,\r\n                      postId,\r\n                      userInfo,\r\n\r\n                      commentId,\r\n                      comment,\r\n                      who,\r\n                      flag,\r\n                      \r\n                      good,\r\n                      bad,\r\n                      createdDate,\r\n\r\n                      likeBtn,\r\n\r\n                      clickedComponent,\r\n                      likeDislikeflag,\r\n                      byCommentCount,\r\n\r\n                    })=>{\r\n                \r\n\r\n        const dispatch = useDispatch(); \r\n\r\n        const {mainPosts_1001CommentByComments} = useSelector((state)=>state.mainPosts_1001); \r\n        \r\n        const [unfoldList,setUnfoldList] = useState(''); \r\n\r\n        const commentByCommentList =(postFlag,nickName,postId,commentId,byCommentCount)=>{\r\n\r\n            if(byCommentCount > 0 ){\r\n        \r\n            //대댓글 리스트 \r\n            dispatch({\r\n                type:MAINPOSTS_1001_COMMENTBYCOMMENT_REQUEST,\r\n                data:{\r\n                    postFlag,\r\n                    nickName,\r\n                    postId,\r\n                    commentId,\r\n                }\r\n            });\r\n                \r\n            }else{\r\n\r\n            }\r\n            \r\n        }\r\n\r\n\r\n    return (\r\n        <>\r\n                <div  className='divTableRow' >\r\n                    <div  className=\"divTableCell\">\r\n                    <b>{who}</b> &nbsp; <small>{custumDateFormat(createdDate)}</small><br/>\r\n                    {comment}<br />\r\n                    <a onClick={()=>commentByCommentList(postFlag,nickName,postId,commentId,byCommentCount)}>{byCommentCount === 0 ? `댓글달기` : `댓글[${byCommentCount}]` }</a> {commentId}\r\n                   \r\n                        <div  style={{marginTop:\"1%\",display:\"block\",float:\"right\"}}>\r\n                            <LikeTwoTone onClick={()=>likeBtn(commentId,flag,'good')} twoToneColor={clickedComponent && likeDislikeflag==='good' ? \"#ff0000\" : \"#1ba640\"}/>{clickedComponent && likeDislikeflag==='good' ? parseInt(good)+1:good}\r\n                            &nbsp;&nbsp;&nbsp;&nbsp;\r\n                            <DislikeTwoTone onClick={()=>likeBtn(commentId,flag,'bad')} twoToneColor={clickedComponent && likeDislikeflag==='bad' ? \"#ff0000\" : \"#1ba640\"} />{clickedComponent && likeDislikeflag==='bad' ? parseInt(bad)+1:bad}\r\n                            &nbsp;&nbsp;&nbsp;&nbsp;\r\n                            <br />\r\n                        </div> \r\n                    </div>\r\n                    {mainPosts_1001CommentByComments && mainPosts_1001CommentByComments.map((v)=>(\r\n                        <Comment1001ByComments \r\n                                    key={i}\r\n                                    postFlag={postFlag} \r\n                                    nickName={nickName} \r\n                                    postId={postId} \r\n                                    userInfo={userInfo}\r\n                                    commentId={commentId} \r\n\r\n                                    byCommentId={v.byCommentId}\r\n                                    comment={v.comment}\r\n                                    who={v.who}\r\n\r\n                                    good={v.good}\r\n                                    bad={v.bad}\r\n                                    createdDate={v.createdDate} />\r\n                                    \r\n                                 ))}\r\n                   \r\n                </div>  \r\n        </>   \r\n\r\n\r\n                \r\n    )\r\n\r\n}\r\n\r\nexport default React.memo(Comments1001); "]},"metadata":{},"sourceType":"module"}