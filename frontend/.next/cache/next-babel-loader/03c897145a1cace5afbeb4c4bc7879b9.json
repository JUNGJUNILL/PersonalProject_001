{"ast":null,"code":"var _jsxFileName = \"D:\\\\git Repository\\\\PersonalProject_001\\\\frontend\\\\components\\\\mainPosts_1001\\\\mainPosts_1001_comments.js\";\nvar __jsx = React.createElement;\nimport React, { useCallback, useEffect, useState, createRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport custumDateFormat from '../../utilComponent/custumDateFormat';\nimport { DislikeTwoTone, LikeTwoTone } from '@ant-design/icons';\nimport { MAINPOSTS_1001_COMMENTS_REQUEST, MAINPOSTS_1001_COMMENTLIKE_REQUEST } from '../../reducers/mainPosts_1001';\n\nconst Comments1001 = ({\n  postFlag,\n  nickName,\n  postId,\n  userInfo,\n  commentId,\n  comment,\n  who,\n  flag,\n  good,\n  bad,\n  createdDate,\n  click\n}) => {\n  const dispatch = useDispatch();\n  const {\n    0: goodCount,\n    1: setGoodCount\n  } = useState(parseInt(good));\n  const {\n    0: badCount,\n    1: setBadCount\n  } = useState(parseInt(bad));\n  const {\n    0: like,\n    1: setLike\n  } = useState(false);\n  const {\n    0: disLike,\n    1: setDisLike\n  } = useState(false);\n  console.log('like=> ', like, 'click=> ', click);\n  const likeBtn = useCallback((commentid, flag, likeDislike) => {\n    if (!userInfo) {\n      alert('로그인이 필요한 서비스 입니다.');\n      return;\n    } //alert(`${commentid},${flag},${likeDislike}`)\n    //문자 리터럴로 해야 alert에 변수 들어가진다.\n\n\n    if (flag === \"Y\") {\n      alert('이미 좋아요! 싫어요! 했습니다.');\n      return;\n    } else {\n      if (likeDislike === \"good\") {\n        setLike(true);\n        setDisLike(false);\n        setGoodCount(0);\n        setGoodCount(parseInt(good) + 1);\n        console.log('good count=>', good, ' good=>  ', goodCount);\n      } else {\n        setLike(false);\n        setDisLike(true);\n        setBadCount(0);\n        setBadCount(parseInt(bad) + 1);\n        console.log('bad count=>', badCount, ' bad=>  ', bad);\n      } //댓글 좋아요!\n\n\n      dispatch({\n        type: MAINPOSTS_1001_COMMENTLIKE_REQUEST,\n        data: {\n          commentid,\n          postFlag,\n          postId,\n          flag: likeDislike,\n          who: userInfo,\n          nickName\n        }\n      });\n    }\n\n    alert(`${likeDislike}`);\n  }, [like || disLike]);\n  return __jsx(\"div\", {\n    className: \"divTableRow\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 17\n    }\n  }, __jsx(\"div\", {\n    className: \"divTableCell\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 21\n    }\n  }, __jsx(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 21\n    }\n  }, who), \" \\xA0 \", __jsx(\"small\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 41\n    }\n  }, custumDateFormat(createdDate)), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 87\n    }\n  }), comment, __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 30\n    }\n  }), \"\\uB2F5\\uAE00 [9]\", __jsx(\"div\", {\n    style: {\n      marginTop: \"1%\",\n      display: \"block\",\n      float: \"right\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 25\n    }\n  }, __jsx(LikeTwoTone, {\n    onClick: () => likeBtn(commentId, flag, 'good'),\n    twoToneColor: like && click ? \"#ff0000\" : \"#1ba640\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 29\n    }\n  }), like && click ? goodCount : good, \"\\xA0\\xA0\\xA0\\xA0\", __jsx(DislikeTwoTone, {\n    onClick: () => likeBtn(commentId, flag, 'bad'),\n    twoToneColor: disLike && click ? \"#ff0000\" : \"#1ba640\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 29\n    }\n  }), bad, \"\\xA0\\xA0\\xA0\\xA0\", __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 29\n    }\n  }))));\n};\n\nexport default Comments1001;","map":{"version":3,"sources":["D:/git Repository/PersonalProject_001/frontend/components/mainPosts_1001/mainPosts_1001_comments.js"],"names":["React","useCallback","useEffect","useState","createRef","useDispatch","useSelector","custumDateFormat","DislikeTwoTone","LikeTwoTone","MAINPOSTS_1001_COMMENTS_REQUEST","MAINPOSTS_1001_COMMENTLIKE_REQUEST","Comments1001","postFlag","nickName","postId","userInfo","commentId","comment","who","flag","good","bad","createdDate","click","dispatch","goodCount","setGoodCount","parseInt","badCount","setBadCount","like","setLike","disLike","setDisLike","console","log","likeBtn","commentid","likeDislike","alert","type","data","marginTop","display","float"],"mappings":"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","sourcesContent":["import React, { useCallback,useEffect, useState, createRef } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport custumDateFormat from  '../../utilComponent/custumDateFormat';\r\nimport {DislikeTwoTone,LikeTwoTone} from '@ant-design/icons'\r\nimport \r\n    {\r\n     MAINPOSTS_1001_COMMENTS_REQUEST, \r\n     MAINPOSTS_1001_COMMENTLIKE_REQUEST,\r\n    } \r\nfrom '../../reducers/mainPosts_1001'; \r\n\r\nconst Comments1001 = ({\r\n                      postFlag,\r\n                      nickName,\r\n                      postId,\r\n                      userInfo,\r\n\r\n                      commentId,\r\n                      comment,\r\n                      who,\r\n                      flag,\r\n                      good,\r\n                      bad,\r\n                      createdDate,\r\n\r\n                      click,\r\n                    })=>{\r\n\r\n    const dispatch = useDispatch();            \r\n    const [goodCount,setGoodCount] = useState(parseInt(good));  \r\n    const [badCount,setBadCount]   = useState(parseInt(bad)); \r\n    const [like , setLike]        = useState(false); \r\n    const [disLike , setDisLike]  = useState(false); \r\n    \r\n   console.log('like=> ' , like, 'click=> ',click); \r\n\r\n\r\n\r\n\r\n    const likeBtn =useCallback((commentid,flag,likeDislike)=>{\r\n        if(!userInfo){\r\n          alert('로그인이 필요한 서비스 입니다.'); \r\n          return;\r\n        }\r\n      \r\n        //alert(`${commentid},${flag},${likeDislike}`)\r\n        //문자 리터럴로 해야 alert에 변수 들어가진다.\r\n    \r\n        if(flag === \"Y\"){\r\n          alert('이미 좋아요! 싫어요! 했습니다.'); \r\n          return; \r\n    \r\n        }else{\r\n            if(likeDislike ===\"good\"){\r\n                setLike(true); \r\n                setDisLike(false); \r\n\r\n                setGoodCount(0); \r\n                setGoodCount(parseInt(good)+1); \r\n                console.log('good count=>' , good, ' good=>  ', goodCount); \r\n            }else{\r\n                setLike(false); \r\n                setDisLike(true); \r\n\r\n                setBadCount(0); \r\n                setBadCount(parseInt(bad)+1)\r\n\r\n                console.log('bad count=>' , badCount, ' bad=>  ', bad); \r\n            }\r\n\r\n        //댓글 좋아요!\r\n          dispatch({\r\n            type:MAINPOSTS_1001_COMMENTLIKE_REQUEST, \r\n            data:{\r\n              commentid,\r\n              postFlag,\r\n              postId,\r\n              flag: likeDislike ,\r\n              who: userInfo,\r\n              nickName,\r\n            }\r\n        }); \r\n\r\n    \r\n        }\r\n\r\n       alert(`${likeDislike}`); \r\n      \r\n      },[like || disLike]); \r\n\r\n    return (\r\n                <div  className='divTableRow' >\r\n                    <div  className=\"divTableCell\">\r\n                    <b>{who}</b> &nbsp; <small>{custumDateFormat(createdDate)}</small><br/>\r\n                    {comment}<br />\r\n                    답글 [9]\r\n               \r\n                        <div  style={{marginTop:\"1%\",display:\"block\",float:\"right\"}}>\r\n                            <LikeTwoTone onClick={()=>likeBtn(commentId,flag,'good')} twoToneColor={like && click ? \"#ff0000\" : \"#1ba640\"}/>{like && click ? goodCount : good}\r\n                            &nbsp;&nbsp;&nbsp;&nbsp;\r\n                            <DislikeTwoTone onClick={()=>likeBtn(commentId,flag,'bad')} twoToneColor={disLike && click ? \"#ff0000\" : \"#1ba640\"} />{bad}\r\n                            &nbsp;&nbsp;&nbsp;&nbsp;\r\n                            <br />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n                \r\n    )\r\n\r\n}\r\n\r\nexport default Comments1001; "]},"metadata":{},"sourceType":"module"}