{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"D:\\\\git Repository\\\\PersonalProject_001\\\\frontend\\\\components\\\\mainPosts_1001\\\\mainPosts_1001_comments.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useCallback, useEffect, useState, createRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport custumDateFormat from '../../utilComponent/custumDateFormat';\nimport { DislikeTwoTone, LikeTwoTone } from '@ant-design/icons';\nimport { MAINPOSTS_1001_COMMENTS_REQUEST, MAINPOSTS_1001_COMMENTLIKE_REQUEST } from '../../reducers/mainPosts_1001';\n\nvar Comments1001 = function Comments1001(_ref) {\n  _s();\n\n  var key = _ref.key,\n      postFlag = _ref.postFlag,\n      nickName = _ref.nickName,\n      postId = _ref.postId,\n      userInfo = _ref.userInfo,\n      commentId = _ref.commentId,\n      comment = _ref.comment,\n      who = _ref.who,\n      flag = _ref.flag,\n      good = _ref.good,\n      bad = _ref.bad,\n      createdDate = _ref.createdDate,\n      click = _ref.click;\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(function (state) {\n    return state.mainPosts_1001;\n  }),\n      clickCommentId = _useSelector.clickCommentId,\n      likeIsClicked = _useSelector.likeIsClicked;\n\n  var _useState = useState(parseInt(good)),\n      goodCount = _useState[0],\n      setGoodCount = _useState[1];\n\n  var _useState2 = useState(parseInt(bad)),\n      badCount = _useState2[0],\n      setBadCount = _useState2[1];\n\n  var _useState3 = useState(false),\n      like = _useState3[0],\n      setLike = _useState3[1];\n\n  var _useState4 = useState(false),\n      disLike = _useState4[0],\n      setDisLike = _useState4[1];\n\n  console.log('clickCommentId=> ', clickCommentId, '  commentId=>  ', commentId, '  like=> ', like, '   disLike=> ', disLike, 'flag=>  ', flag, '  likeIsClicked=>', likeIsClicked);\n  var likeBtn = useCallback(function (commentid, flag, likeDislike) {\n    if (!userInfo) {\n      alert('로그인이 필요한 서비스 입니다.');\n      return;\n    } //alert(`${commentid},${flag},${likeDislike}`)\n    //문자 리터럴로 해야 alert에 변수 들어가진다.\n\n\n    if (flag === \"Y\" || like || disLike) {\n      alert('이미 좋아요! 싫어요! 했습니다.');\n      return;\n    } else {\n      alert(\"\".concat(flag, \" ,    \").concat(like));\n\n      if (likeDislike === \"good\") {\n        setLike(true);\n        setDisLike(false);\n        console.log('good 버튼 누름commentId==>   ', commentId, '   goodCount=>', goodCount, ' good=>  ', good, '  flag=>', flag);\n      } else {\n        setLike(false);\n        setDisLike(true);\n        console.log('bad 버튼 누름commentId==>   ', commentId, '   badCount=>', badCount, ' bad=>  ', bad);\n      } //댓글 좋아요!\n\n\n      dispatch({\n        type: MAINPOSTS_1001_COMMENTLIKE_REQUEST,\n        data: {\n          commentid: commentid,\n          postFlag: postFlag,\n          postId: postId,\n          flag: likeDislike,\n          who: userInfo,\n          nickName: nickName\n        }\n      });\n    }\n\n    alert(\"\".concat(likeDislike));\n  }, [like, disLike, likeIsClicked]);\n  return __jsx(\"div\", {\n    className: \"divTableRow\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 17\n    }\n  }, __jsx(\"div\", {\n    className: \"divTableCell\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 21\n    }\n  }, __jsx(\"b\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 21\n    }\n  }, who), \" \\xA0 \", __jsx(\"small\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 41\n    }\n  }, custumDateFormat(createdDate)), __jsx(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 87\n    }\n  }), comment, __jsx(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 30\n    }\n  }), \"\\uB2F5\\uAE00 [9] \", commentId, __jsx(\"div\", {\n    style: {\n      marginTop: \"1%\",\n      display: \"block\",\n      \"float\": \"right\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 25\n    }\n  }, __jsx(LikeTwoTone, {\n    onClick: function onClick() {\n      return likeBtn(commentId, flag, 'good');\n    },\n    twoToneColor: commentId === clickCommentId && like ? \"#ff0000\" : \"#1ba640\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 29\n    }\n  }), like ? parseInt(good) + 1 : good, \"\\xA0\\xA0\\xA0\\xA0\", __jsx(DislikeTwoTone, {\n    onClick: function onClick() {\n      return likeBtn(commentId, flag, 'bad');\n    },\n    twoToneColor: commentId === clickCommentId && disLike ? \"#ff0000\" : \"#1ba640\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 29\n    }\n  }), disLike ? parseInt(bad) + 1 : bad, \"\\xA0\\xA0\\xA0\\xA0\", __jsx(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 29\n    }\n  }))));\n};\n\n_s(Comments1001, \"NsVbnSMIVD2Jc+Z9/Rf4D5rnzkY=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = Comments1001;\nexport default Comments1001;\n\nvar _c;\n\n$RefreshReg$(_c, \"Comments1001\");","map":{"version":3,"sources":["D:/git Repository/PersonalProject_001/frontend/components/mainPosts_1001/mainPosts_1001_comments.js"],"names":["React","useCallback","useEffect","useState","createRef","useDispatch","useSelector","custumDateFormat","DislikeTwoTone","LikeTwoTone","MAINPOSTS_1001_COMMENTS_REQUEST","MAINPOSTS_1001_COMMENTLIKE_REQUEST","Comments1001","key","postFlag","nickName","postId","userInfo","commentId","comment","who","flag","good","bad","createdDate","click","dispatch","state","mainPosts_1001","clickCommentId","likeIsClicked","parseInt","goodCount","setGoodCount","badCount","setBadCount","like","setLike","disLike","setDisLike","console","log","likeBtn","commentid","likeDislike","alert","type","data","marginTop","display"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA4BC,SAA5B,EAAuCC,QAAvC,EAAiDC,SAAjD,QAAkE,OAAlE;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAEA,OAAOC,gBAAP,MAA8B,sCAA9B;AACA,SAAQC,cAAR,EAAuBC,WAAvB,QAAyC,mBAAzC;AACA,SAEKC,+BAFL,EAGKC,kCAHL,QAKK,+BALL;;AAOA,IAAMC,YAAY,GAAG,SAAfA,YAAe,OAgBG;AAAA;;AAAA,MAfFC,GAeE,QAfFA,GAeE;AAAA,MAdFC,QAcE,QAdFA,QAcE;AAAA,MAbFC,QAaE,QAbFA,QAaE;AAAA,MAZFC,MAYE,QAZFA,MAYE;AAAA,MAXFC,QAWE,QAXFA,QAWE;AAAA,MATFC,SASE,QATFA,SASE;AAAA,MARFC,OAQE,QARFA,OAQE;AAAA,MAPFC,GAOE,QAPFA,GAOE;AAAA,MANFC,IAME,QANFA,IAME;AAAA,MALFC,IAKE,QALFA,IAKE;AAAA,MAJFC,GAIE,QAJFA,GAIE;AAAA,MAHFC,WAGE,QAHFA,WAGE;AAAA,MADFC,KACE,QADFA,KACE;AAEpB,MAAMC,QAAQ,GAAGrB,WAAW,EAA5B;;AAFoB,qBAIIC,WAAW,CAAC,UAACqB,KAAD;AAAA,WAASA,KAAK,CAACC,cAAf;AAAA,GAAD,CAJf;AAAA,MAGbC,cAHa,gBAGbA,cAHa;AAAA,MAIbC,aAJa,gBAIbA,aAJa;;AAAA,kBAMa3B,QAAQ,CAAC4B,QAAQ,CAACT,IAAD,CAAT,CANrB;AAAA,MAMbU,SANa;AAAA,MAMHC,YANG;;AAAA,mBAOa9B,QAAQ,CAAC4B,QAAQ,CAACR,GAAD,CAAT,CAPrB;AAAA,MAObW,QAPa;AAAA,MAOJC,WAPI;;AAAA,mBAQYhC,QAAQ,CAAC,KAAD,CARpB;AAAA,MAQbiC,IARa;AAAA,MAQNC,OARM;;AAAA,mBASYlC,QAAQ,CAAC,KAAD,CATpB;AAAA,MASbmC,OATa;AAAA,MASHC,UATG;;AAWpBC,EAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAkCZ,cAAlC,EAAmD,iBAAnD,EAAuEX,SAAvE,EAAkF,WAAlF,EAAgGkB,IAAhG,EAAsG,eAAtG,EAAwHE,OAAxH,EAAkI,UAAlI,EAA+IjB,IAA/I,EAAoJ,mBAApJ,EAAwKS,aAAxK;AAEA,MAAMY,OAAO,GAAEzC,WAAW,CAAC,UAAC0C,SAAD,EAAWtB,IAAX,EAAgBuB,WAAhB,EAA8B;AACrD,QAAG,CAAC3B,QAAJ,EAAa;AACX4B,MAAAA,KAAK,CAAC,mBAAD,CAAL;AACA;AACD,KAJoD,CAKnD;AACF;;;AAEA,QAAGxB,IAAI,KAAG,GAAP,IAAce,IAAd,IAAsBE,OAAzB,EAAiC;AAE/BO,MAAAA,KAAK,CAAC,oBAAD,CAAL;AACA;AAED,KALD,MAKK;AACHA,MAAAA,KAAK,WAAIxB,IAAJ,mBAAiBe,IAAjB,EAAL;;AACE,UAAGQ,WAAW,KAAI,MAAlB,EAAyB;AACrBP,QAAAA,OAAO,CAAC,IAAD,CAAP;AACAE,QAAAA,UAAU,CAAC,KAAD,CAAV;AAEAC,QAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ,EAAwCvB,SAAxC,EAAmD,gBAAnD,EAAsEc,SAAtE,EAAiF,WAAjF,EAA6FV,IAA7F,EAAoG,UAApG,EAAiHD,IAAjH;AACH,OALD,MAKK;AACDgB,QAAAA,OAAO,CAAC,KAAD,CAAP;AACAE,QAAAA,UAAU,CAAC,IAAD,CAAV;AAEAC,QAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ,EAAuCvB,SAAvC,EAAkD,eAAlD,EAAoEgB,QAApE,EAA8E,UAA9E,EAAyFX,GAAzF;AACD,OAZF,CAcL;;;AACEG,MAAAA,QAAQ,CAAC;AACPoB,QAAAA,IAAI,EAACnC,kCADE;AAEPoC,QAAAA,IAAI,EAAC;AACHJ,UAAAA,SAAS,EAATA,SADG;AAEH7B,UAAAA,QAAQ,EAARA,QAFG;AAGHE,UAAAA,MAAM,EAANA,MAHG;AAIHK,UAAAA,IAAI,EAAEuB,WAJH;AAKHxB,UAAAA,GAAG,EAAEH,QALF;AAMHF,UAAAA,QAAQ,EAARA;AANG;AAFE,OAAD,CAAR;AAaD;;AAEF8B,IAAAA,KAAK,WAAID,WAAJ,EAAL;AAEA,GA7CuB,EA6CtB,CAACR,IAAD,EAAME,OAAN,EAAcR,aAAd,CA7CsB,CAA1B;AA+CA,SACY;AAAM,IAAA,SAAS,EAAC,aAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAM,IAAA,SAAS,EAAC,cAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIV,GAAJ,CADA,YACoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAQb,gBAAgB,CAACiB,WAAD,CAAxB,CADpB,EACkE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADlE,EAECL,OAFD,EAES;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFT,uBAGQD,SAHR,EAKI;AAAM,IAAA,KAAK,EAAE;AAAC8B,MAAAA,SAAS,EAAC,IAAX;AAAgBC,MAAAA,OAAO,EAAC,OAAxB;AAAgC,eAAM;AAAtC,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,WAAD;AAAa,IAAA,OAAO,EAAE;AAAA,aAAIP,OAAO,CAACxB,SAAD,EAAWG,IAAX,EAAgB,MAAhB,CAAX;AAAA,KAAtB;AAA0D,IAAA,YAAY,EAAEH,SAAS,KAAGW,cAAZ,IAA8BO,IAA9B,GAAoC,SAApC,GAAgD,SAAxH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EACyIA,IAAI,GAAGL,QAAQ,CAACT,IAAD,CAAR,GAAe,CAAlB,GAAsBA,IADnK,sBAGI,MAAC,cAAD;AAAgB,IAAA,OAAO,EAAE;AAAA,aAAIoB,OAAO,CAACxB,SAAD,EAAWG,IAAX,EAAgB,KAAhB,CAAX;AAAA,KAAzB;AAA4D,IAAA,YAAY,EAAEH,SAAS,KAAGW,cAAZ,IAA8BS,OAA9B,GAAuC,SAAvC,GAAmD,SAA7H;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHJ,EAGgJA,OAAO,GAAGP,QAAQ,CAACR,GAAD,CAAR,GAAc,CAAjB,GAAqBA,GAH5K,sBAKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALJ,CALJ,CADJ,CADZ;AAqBH,CAjGD;;GAAMX,Y;UAkBeP,W,EAEOC,W;;;KApBtBM,Y;AAmGN,eAAeA,YAAf","sourcesContent":["import React, { useCallback,useEffect, useState, createRef } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport custumDateFormat from  '../../utilComponent/custumDateFormat';\r\nimport {DislikeTwoTone,LikeTwoTone} from '@ant-design/icons'\r\nimport \r\n    {\r\n     MAINPOSTS_1001_COMMENTS_REQUEST, \r\n     MAINPOSTS_1001_COMMENTLIKE_REQUEST,\r\n    } \r\nfrom '../../reducers/mainPosts_1001'; \r\n\r\nconst Comments1001 = ({\r\n                      key,\r\n                      postFlag,\r\n                      nickName,\r\n                      postId,\r\n                      userInfo,\r\n\r\n                      commentId,\r\n                      comment,\r\n                      who,\r\n                      flag,\r\n                      good,\r\n                      bad,\r\n                      createdDate,\r\n\r\n                      click,\r\n                    })=>{\r\n\r\n    const dispatch = useDispatch();       \r\n    const {clickCommentId,\r\n           likeIsClicked } =useSelector((state)=>state.mainPosts_1001); \r\n\r\n    const [goodCount,setGoodCount] = useState(parseInt(good));  \r\n    const [badCount,setBadCount]   = useState(parseInt(bad)); \r\n    const [like , setLike]        = useState(false); \r\n    const [disLike , setDisLike]  = useState(false); \r\n\r\n    console.log('clickCommentId=> ' , clickCommentId , '  commentId=>  ' , commentId, '  like=> ' , like, '   disLike=> ' , disLike , 'flag=>  ' , flag,'  likeIsClicked=>',likeIsClicked); \r\n\r\n    const likeBtn =useCallback((commentid,flag,likeDislike)=>{\r\n        if(!userInfo){\r\n          alert('로그인이 필요한 서비스 입니다.'); \r\n          return;\r\n        }\r\n          //alert(`${commentid},${flag},${likeDislike}`)\r\n        //문자 리터럴로 해야 alert에 변수 들어가진다.\r\n    \r\n        if(flag===\"Y\" || like || disLike){\r\n          \r\n          alert('이미 좋아요! 싫어요! 했습니다.'); \r\n          return; \r\n    \r\n        }else{\r\n          alert(`${flag} ,    ${like}`); \r\n            if(likeDislike ===\"good\"){\r\n                setLike(true); \r\n                setDisLike(false); \r\n\r\n                console.log('good 버튼 누름commentId==>   ',commentId ,'   goodCount=>' , goodCount, ' good=>  ',good , '  flag=>' , flag); \r\n            }else{\r\n                setLike(false); \r\n                setDisLike(true); \r\n\r\n                console.log('bad 버튼 누름commentId==>   ',commentId ,'   badCount=>' , badCount, ' bad=>  ',bad ); \r\n              }\r\n\r\n        //댓글 좋아요!\r\n          dispatch({\r\n            type:MAINPOSTS_1001_COMMENTLIKE_REQUEST, \r\n            data:{\r\n              commentid,\r\n              postFlag,\r\n              postId,\r\n              flag: likeDislike ,\r\n              who: userInfo,\r\n              nickName,\r\n            }\r\n        }); \r\n\r\n    \r\n        }\r\n\r\n       alert(`${likeDislike}`); \r\n      \r\n      },[like,disLike,likeIsClicked]); \r\n\r\n    return (\r\n                <div  className='divTableRow' >\r\n                    <div  className=\"divTableCell\">\r\n                    <b>{who}</b> &nbsp; <small>{custumDateFormat(createdDate)}</small><br/>\r\n                    {comment}<br />\r\n                    답글 [9] {commentId}\r\n               \r\n                        <div  style={{marginTop:\"1%\",display:\"block\",float:\"right\"}}>\r\n                            <LikeTwoTone onClick={()=>likeBtn(commentId,flag,'good')} twoToneColor={commentId===clickCommentId && like? \"#ff0000\" : \"#1ba640\"}/>{like ? parseInt(good)+1 : good}\r\n                            &nbsp;&nbsp;&nbsp;&nbsp;\r\n                            <DislikeTwoTone onClick={()=>likeBtn(commentId,flag,'bad')} twoToneColor={commentId===clickCommentId && disLike? \"#ff0000\" : \"#1ba640\"} />{ disLike ? parseInt(bad)+1 : bad}\r\n                            &nbsp;&nbsp;&nbsp;&nbsp;\r\n                            <br />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n                \r\n    )\r\n\r\n}\r\n\r\nexport default Comments1001; "]},"metadata":{},"sourceType":"module"}