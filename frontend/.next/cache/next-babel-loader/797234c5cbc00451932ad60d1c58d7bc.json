{"ast":null,"code":"var _jsxFileName = \"D:\\\\git Repository\\\\PersonalProject_001\\\\frontend\\\\components\\\\mainPosts_1001\\\\mainPosts_1001_comments.js\";\nvar __jsx = React.createElement;\nimport React, { useCallback, useEffect, useState, createRef, memo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport custumDateFormat from '../../utilComponent/custumDateFormat';\nimport Comment1001ByComments from './mainPosts_1001_commentByComments';\nimport { DislikeTwoTone, LikeTwoTone } from '@ant-design/icons';\nimport { MAINPOSTS_1001_COMMENTBYCOMMENT_REQUEST } from '../../reducers/mainPosts_1001';\nimport { Badge } from 'antd';\n\nconst Comments1001 = ({\n  key,\n  postFlag,\n  nickName,\n  postId,\n  userInfo,\n  commentId,\n  comment,\n  who,\n  flag,\n  good,\n  bad,\n  createdDate,\n  likeBtn,\n  clickedComponent,\n  likeDislikeflag\n}) => {\n  const dispatch = useDispatch();\n  const {\n    mainPosts_1001CommentByComments\n  } = useSelector(state => state.mainPosts_1001);\n  useEffect(() => {\n    //대댓글 리스트 \n    dispatch({\n      type: MAINPOSTS_1001_COMMENTBYCOMMENT_REQUEST,\n      data: {\n        postFlag,\n        nickName,\n        postId,\n        commentId\n      }\n    });\n  }, []);\n  const {\n    0: unfoldList,\n    1: setUnfoldList\n  } = useState('');\n  const array = [{\n    id: '1001',\n    comment: '아이고',\n    modifierdate: '20201124'\n  }, {\n    id: '1002',\n    comment: 'helloWorld',\n    modifierdate: '20201124'\n  }, {\n    id: '1003',\n    comment: 'goodWorld',\n    modifierdate: '20201124'\n  }, {\n    id: '1004',\n    comment: 'pickWorld',\n    modifierdate: '20201124'\n  }];\n\n  const commentByCommentList = param => {\n    if (param === 'open') {\n      setUnfoldList('open');\n    }\n\n    if (param === 'close') {\n      setUnfoldList('close');\n    }\n  };\n\n  return __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: \"divTableRow\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 17\n    }\n  }, __jsx(\"div\", {\n    className: \"divTableCell\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 21\n    }\n  }, __jsx(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 21\n    }\n  }, who), \" \\xA0 \", __jsx(\"small\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 41\n    }\n  }, custumDateFormat(createdDate)), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 87\n    }\n  }), comment, __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 30\n    }\n  }), __jsx(\"a\", {\n    onClick: () => commentByCommentList('open'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 20\n    }\n  }, \"\\uB2F5\\uAE00 [9]\"), \" \", commentId, __jsx(\"div\", {\n    style: {\n      marginTop: \"1%\",\n      marginLeft: \"5%\",\n      display: \"block\",\n      float: \"right\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 25\n    }\n  }, __jsx(LikeTwoTone, {\n    onClick: () => likeBtn(commentId, flag, 'good'),\n    twoToneColor: clickedComponent && likeDislikeflag === 'good' ? \"#ff0000\" : \"#1ba640\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 29\n    }\n  }), clickedComponent && likeDislikeflag === 'good' ? parseInt(good) + 1 : good, \"\\xA0\\xA0\\xA0\\xA0\", __jsx(DislikeTwoTone, {\n    onClick: () => likeBtn(commentId, flag, 'bad'),\n    twoToneColor: clickedComponent && likeDislikeflag === 'bad' ? \"#ff0000\" : \"#1ba640\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 29\n    }\n  }), clickedComponent && likeDislikeflag === 'bad' ? parseInt(bad) + 1 : bad, \"\\xA0\\xA0\\xA0\\xA0\", __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 29\n    }\n  }))), mainPosts_1001CommentByComments && mainPosts_1001CommentByComments.map((v, i) => __jsx(Comment1001ByComments, {\n    key: i,\n    postFlag: postFlag,\n    nickName: nickName,\n    postId: postId,\n    userInfo: userInfo,\n    commentId: commentId,\n    byCommentId: v.byCommentId,\n    comment: v.comment,\n    who: v.who,\n    good: v.good,\n    bad: v.bad,\n    createdDate: v.createdDate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 25\n    }\n  }))));\n};\n\nexport default React.memo(Comments1001);","map":{"version":3,"sources":["D:/git Repository/PersonalProject_001/frontend/components/mainPosts_1001/mainPosts_1001_comments.js"],"names":["React","useCallback","useEffect","useState","createRef","memo","useDispatch","useSelector","custumDateFormat","Comment1001ByComments","DislikeTwoTone","LikeTwoTone","MAINPOSTS_1001_COMMENTBYCOMMENT_REQUEST","Badge","Comments1001","key","postFlag","nickName","postId","userInfo","commentId","comment","who","flag","good","bad","createdDate","likeBtn","clickedComponent","likeDislikeflag","dispatch","mainPosts_1001CommentByComments","state","mainPosts_1001","type","data","unfoldList","setUnfoldList","array","id","modifierdate","commentByCommentList","param","marginTop","marginLeft","display","float","parseInt","map","v","i","byCommentId"],"mappings":"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","sourcesContent":["import React, { useCallback,useEffect, useState, createRef, memo } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport custumDateFormat from  '../../utilComponent/custumDateFormat';\r\nimport Comment1001ByComments from './mainPosts_1001_commentByComments'\r\nimport {DislikeTwoTone,LikeTwoTone} from '@ant-design/icons'\r\nimport \r\n    {\r\n        MAINPOSTS_1001_COMMENTBYCOMMENT_REQUEST\r\n    } \r\nfrom '../../reducers/mainPosts_1001'; \r\nimport { Badge } from 'antd';\r\n\r\nconst Comments1001 = ({\r\n                      key,\r\n                      postFlag,\r\n                      nickName,\r\n                      postId,\r\n                      userInfo,\r\n\r\n                      commentId,\r\n                      comment,\r\n                      who,\r\n                      flag,\r\n                      \r\n                      good,\r\n                      bad,\r\n                      createdDate,\r\n\r\n                      likeBtn,\r\n\r\n                      clickedComponent,\r\n                      likeDislikeflag,\r\n\r\n                    })=>{\r\n                \r\n\r\n        const dispatch = useDispatch(); \r\n\r\n        const {mainPosts_1001CommentByComments} = useSelector((state)=>state.mainPosts_1001); \r\n\r\n        useEffect(()=>{\r\n\r\n            //대댓글 리스트 \r\n            dispatch({\r\n                type:MAINPOSTS_1001_COMMENTBYCOMMENT_REQUEST,\r\n                data:{\r\n                    postFlag,\r\n                    nickName,\r\n                    postId,\r\n                    commentId,\r\n                }\r\n            });\r\n\r\n        },[]); \r\n        \r\n        const [unfoldList,setUnfoldList] = useState(''); \r\n        const array =[{id:'1001',comment:'아이고',modifierdate:'20201124'},\r\n                      {id:'1002',comment:'helloWorld',modifierdate:'20201124'},\r\n                      {id:'1003',comment:'goodWorld',modifierdate:'20201124'},\r\n                      {id:'1004',comment:'pickWorld',modifierdate:'20201124'},\r\n    ]\r\n\r\n        const commentByCommentList =(param)=>{\r\n\r\n            if(param ==='open'){\r\n                setUnfoldList('open'); \r\n            }\r\n            if(param ==='close'){\r\n                setUnfoldList('close'); \r\n            }\r\n            \r\n        }\r\n\r\n\r\n    return (\r\n        <>\r\n                <div  className='divTableRow' >\r\n                    <div  className=\"divTableCell\">\r\n                    <b>{who}</b> &nbsp; <small>{custumDateFormat(createdDate)}</small><br/>\r\n                    {comment}<br />\r\n                   <a onClick={()=>commentByCommentList('open')}>답글 [9]</a> {commentId}\r\n                   \r\n                        <div  style={{marginTop:\"1%\",marginLeft:\"5%\",display:\"block\",float:\"right\"}}>\r\n                            <LikeTwoTone onClick={()=>likeBtn(commentId,flag,'good')} twoToneColor={clickedComponent && likeDislikeflag==='good' ? \"#ff0000\" : \"#1ba640\"}/>{clickedComponent && likeDislikeflag==='good' ? parseInt(good)+1:good}\r\n                            &nbsp;&nbsp;&nbsp;&nbsp;\r\n                            <DislikeTwoTone onClick={()=>likeBtn(commentId,flag,'bad')} twoToneColor={clickedComponent && likeDislikeflag==='bad' ? \"#ff0000\" : \"#1ba640\"} />{clickedComponent && likeDislikeflag==='bad' ? parseInt(bad)+1:bad}\r\n                            &nbsp;&nbsp;&nbsp;&nbsp;\r\n                            <br />\r\n                        </div> \r\n                    </div>\r\n                    {mainPosts_1001CommentByComments && mainPosts_1001CommentByComments.map((v,i)=>\r\n                        <Comment1001ByComments \r\n                                key={i}\r\n                                postFlag={postFlag} \r\n                                nickName={nickName} \r\n                                postId={postId} \r\n                                userInfo={userInfo}\r\n                                commentId={commentId} \r\n    \r\n                                byCommentId={v.byCommentId}\r\n                                comment={v.comment}\r\n                                who={v.who}\r\n    \r\n                                good={v.good}\r\n                                bad={v.bad}\r\n                                createdDate={v.createdDate}\r\n    \r\n                                \r\n                        />\r\n                    )}\r\n                </div>    \r\n     \r\n\r\n     \r\n        </>   \r\n\r\n\r\n                \r\n    )\r\n\r\n}\r\n\r\nexport default React.memo(Comments1001); "]},"metadata":{},"sourceType":"module"}