{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(sagaJoin),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchJoin),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(sagaLogin),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogin),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(authSag);\n\nimport axios from 'axios';\nimport { all, fork, takeLatest, takeEvery, put, delay, call } from 'redux-saga/effects';\nimport { JOIN_REQUEST, JOIN_SUCCESS, JOIN_FAILURE, LOGIN_REQUEST, LOGIN_SUCCESS, LOGIN_FAILURE } from '../reducers/auth';\n\nfunction APIJoin(data) {\n  return axios.post('/auth', {\n    data: data\n  }, {\n    withCredentials: true\n  });\n}\n\n_c = APIJoin;\n\nfunction sagaJoin(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function sagaJoin$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          console.log(action, action.data);\n          _context.next = 4;\n          return call(APIJoin, action.data);\n\n        case 4:\n          result = _context.sent;\n          _context.next = 7;\n          return put({\n            type: JOIN_SUCCESS,\n            data: result\n          });\n\n        case 7:\n          _context.next = 14;\n          break;\n\n        case 9:\n          _context.prev = 9;\n          _context.t0 = _context[\"catch\"](0);\n          alert('에러발생');\n          _context.next = 14;\n          return put({\n            type: JOIN_FAILURE,\n            error: _context.t0\n          });\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 9]]);\n}\n\nfunction watchJoin() {\n  return _regeneratorRuntime.wrap(function watchJoin$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(JOIN_REQUEST, sagaJoin);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction APILogin(data) {\n  return axios.post('/login', {\n    data: data\n  }, {\n    withCredentials: true\n  });\n}\n\n_c2 = APILogin;\n\nfunction sagaLogin(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function sagaLogin$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return call(APILogin, action.data);\n\n        case 2:\n          result = _context3.sent;\n          _context3.prev = 3;\n          _context3.next = 11;\n          break;\n\n        case 6:\n          _context3.prev = 6;\n          _context3.t0 = _context3[\"catch\"](3);\n          alert('로그인 에러');\n          _context3.next = 11;\n          return put({\n            type: LOGIN_FAILURE,\n            error: _context3.t0\n          });\n\n        case 11:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[3, 6]]);\n}\n\nfunction watchLogin() {\n  return _regeneratorRuntime.wrap(function watchLogin$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(LOGIN_REQUEST, sagaLogin);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nexport default function authSag() {\n  return _regeneratorRuntime.wrap(function authSag$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([fork(watchJoin), fork(watchLogin)]);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"APIJoin\");\n$RefreshReg$(_c2, \"APILogin\");","map":{"version":3,"sources":["C:/git Repository/PersonalProject_001/frontend/sagas/authSaga.js"],"names":["sagaJoin","watchJoin","sagaLogin","watchLogin","authSag","axios","all","fork","takeLatest","takeEvery","put","delay","call","JOIN_REQUEST","JOIN_SUCCESS","JOIN_FAILURE","LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_FAILURE","APIJoin","data","post","withCredentials","action","console","log","result","type","alert","error","APILogin"],"mappings":";;oDAmBUA,Q;qDAwBAC,S;qDAUAC,S;qDAeAC,U;qDAKeC,O;;AAzEzB,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAQC,GAAR,EAAYC,IAAZ,EAAiBC,UAAjB,EAA4BC,SAA5B,EAAuCC,GAAvC,EAA4CC,KAA5C,EAAkDC,IAAlD,QAA6D,oBAA7D;AACA,SACKC,YADL,EAEKC,YAFL,EAGKC,YAHL,EAIKC,aAJL,EAKKC,aALL,EAMKC,aANL,QAQK,kBARL;;AAWA,SAASC,OAAT,CAAiBC,IAAjB,EAAsB;AAElB,SAAOf,KAAK,CAACgB,IAAN,CAAW,OAAX,EAAmB;AAACD,IAAAA,IAAI,EAAJA;AAAD,GAAnB,EAA0B;AAACE,IAAAA,eAAe,EAAC;AAAjB,GAA1B,CAAP;AAEH;;KAJQH,O;;AAMT,SAAUnB,QAAV,CAAmBuB,MAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGOC,UAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ,EAAoBA,MAAM,CAACH,IAA3B;AAHP;AAIuB,iBAAMR,IAAI,CAACO,OAAD,EAASI,MAAM,CAACH,IAAhB,CAAV;;AAJvB;AAIcM,UAAAA,MAJd;AAAA;AAKQ,iBAAMhB,GAAG,CAAC;AACNiB,YAAAA,IAAI,EAACb,YADC;AAENM,YAAAA,IAAI,EAAEM;AAFA,WAAD,CAAT;;AALR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAYQE,UAAAA,KAAK,CAAC,MAAD,CAAL;AAZR;AAcQ,iBAAMlB,GAAG,CAAC;AACNiB,YAAAA,IAAI,EAACZ,YADC;AAENc,YAAAA,KAAK;AAFC,WAAD,CAAT;;AAdR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAwBA,SAAU5B,SAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMO,UAAU,CAACK,YAAD,EAAcb,QAAd,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAAS8B,QAAT,CAAkBV,IAAlB,EAAuB;AAEnB,SAAOf,KAAK,CAACgB,IAAN,CAAW,QAAX,EAAoB;AAACD,IAAAA,IAAI,EAAJA;AAAD,GAApB,EAA2B;AAACE,IAAAA,eAAe,EAAC;AAAjB,GAA3B,CAAP;AACH;;MAHQQ,Q;;AAMT,SAAU5B,SAAV,CAAoBqB,MAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEmB,iBAAMX,IAAI,CAACkB,QAAD,EAAUP,MAAM,CAACH,IAAjB,CAAV;;AAFnB;AAEUM,UAAAA,MAFV;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAOQE,UAAAA,KAAK,CAAC,QAAD,CAAL;AAPR;AAQQ,iBAAMlB,GAAG,CAAC;AACNiB,YAAAA,IAAI,EAACT,aADC;AAENW,YAAAA,KAAK;AAFC,WAAD,CAAT;;AARR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAeA,SAAU1B,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMK,UAAU,CAACQ,aAAD,EAAed,SAAf,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKA,eAAe,SAAUE,OAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAGX,iBAAME,GAAG,CAAC,CACNC,IAAI,CAACN,SAAD,CADE,EAENM,IAAI,CAACJ,UAAD,CAFE,CAAD,CAAT;;AAHW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import axios from 'axios'\r\nimport {all,fork,takeLatest,takeEvery ,put, delay,call} from 'redux-saga/effects'; \r\nimport \r\n    {JOIN_REQUEST,\r\n     JOIN_SUCCESS,\r\n     JOIN_FAILURE,\r\n     LOGIN_REQUEST,\r\n     LOGIN_SUCCESS,\r\n     LOGIN_FAILURE, \r\n    } \r\nfrom '../reducers/auth'; \r\n\r\n\r\nfunction APIJoin(data){\r\n\r\n    return axios.post('/auth',{data},{withCredentials:true}); \r\n\r\n}\r\n\r\nfunction* sagaJoin(action){\r\n    \r\n    try{\r\n       console.log(action, action.data);\r\n        const result = yield call(APIJoin,action.data); \r\n        yield put({\r\n            type:JOIN_SUCCESS,\r\n            data: result,\r\n        }); \r\n\r\n    }catch(e){\r\n\r\n        alert('에러발생'); \r\n\r\n        yield put({\r\n            type:JOIN_FAILURE,\r\n            error:e, \r\n        })\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nfunction* watchJoin(){\r\n    yield takeLatest(JOIN_REQUEST,sagaJoin)\r\n}\r\n\r\nfunction APILogin(data){\r\n\r\n    return axios.post('/login',{data},{withCredentials:true}); \r\n}\r\n\r\n\r\nfunction* sagaLogin(action){\r\n\r\n    const result = yield call(APILogin,action.data); \r\n\r\n    try{\r\n\r\n    }catch(e){\r\n        alert('로그인 에러'); \r\n        yield put({\r\n            type:LOGIN_FAILURE, \r\n            error:e,\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchLogin(){\r\n    yield takeLatest(LOGIN_REQUEST,sagaLogin); \r\n}\r\n\r\n\r\nexport default function* authSag(){\r\n\r\n\r\n    yield all([\r\n        fork(watchJoin), \r\n        fork(watchLogin), \r\n        \r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}