{"ast":null,"code":"import axios from 'axios';\nimport { all, fork, takeLatest, takeEvery, put, delay, call } from 'redux-saga/effects';\nimport { JOIN_REQUEST, JOIN_SUCCESS, JOIN_FAILURE, LOGIN_REQUEST, LOGIN_SUCCESS, LOGIN_FAILURE, LOAD_USER_REQUEST, LOAD_USER_SUCCESS, LOAD_USER_FAILURE } from '../reducers/auth'; //유저정보 유지 사이클 \n//------------------------------------------------------------------------\n\nfunction APILoadUser() {\n  return axios.get(`/auth`, {\n    withCredentials: true\n  });\n}\n\nfunction* sagaLoadUser(action) {\n  try {\n    const result = yield call(APILoadUser, action.data);\n    console.log('result====>', result);\n    yield put({\n      type: LOAD_USER_SUCCESS\n    });\n  } catch (e) {\n    alert('에러발생');\n    yield put({\n      type: LOAD_USER_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadUser() {\n  yield takeLatest(LOAD_USER_REQUEST, sagaLoadUser);\n} //------------------------------------------------------------------------\n//회원가입 사이클 \n//------------------------------------------------------------------------\n\n\nfunction APIJoin(data) {\n  console.log('data==>', data);\n  return axios.post('/auth/join', {\n    data\n  }, {\n    withCredentials: true\n  });\n}\n\nfunction* sagaJoin(action) {\n  try {\n    console.log(action, action.data);\n    const result = yield call(APIJoin, action.data);\n    yield put({\n      type: JOIN_SUCCESS,\n      data: result\n    });\n  } catch (e) {\n    alert('에러발생');\n    yield put({\n      type: JOIN_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchJoin() {\n  yield takeLatest(JOIN_REQUEST, sagaJoin);\n} //------------------------------------------------------------------------\n//로그인 사이클\n//------------------------------------------------------------------------\n\n\nfunction APILogin(data) {\n  return axios.post('/auth/login', data, {\n    withCredentials: true\n  });\n}\n\nfunction* sagaLogin(action) {\n  try {\n    const result = yield call(APILogin, action.data);\n    yield put({\n      type: LOGIN_SUCCESS,\n      data: result.data[0]\n    });\n  } catch (e) {\n    alert('로그인 에러');\n    yield put({\n      type: LOGIN_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLogin() {\n  yield takeEvery(LOGIN_REQUEST, sagaLogin);\n} //------------------------------------------------------------------------\n\n\nexport default function* authSag() {\n  yield all([fork(watchJoin), fork(watchLogin), fork(watchLoadUser)]);\n}","map":{"version":3,"sources":["D:/git Repository/PersonalProject_001/frontend/sagas/authSaga.js"],"names":["axios","all","fork","takeLatest","takeEvery","put","delay","call","JOIN_REQUEST","JOIN_SUCCESS","JOIN_FAILURE","LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_FAILURE","LOAD_USER_REQUEST","LOAD_USER_SUCCESS","LOAD_USER_FAILURE","APILoadUser","get","withCredentials","sagaLoadUser","action","result","data","console","log","type","e","alert","error","watchLoadUser","APIJoin","post","sagaJoin","watchJoin","APILogin","sagaLogin","watchLogin","authSag"],"mappings":"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","sourcesContent":["import axios from 'axios'\r\nimport {all,fork,takeLatest,takeEvery ,put, delay,call} from 'redux-saga/effects'; \r\nimport \r\n    {JOIN_REQUEST,\r\n     JOIN_SUCCESS,\r\n     JOIN_FAILURE,\r\n     LOGIN_REQUEST,\r\n     LOGIN_SUCCESS,\r\n     LOGIN_FAILURE, \r\n     LOAD_USER_REQUEST,\r\n     LOAD_USER_SUCCESS,\r\n     LOAD_USER_FAILURE,\r\n    } \r\nfrom '../reducers/auth'; \r\n\r\n\r\n//유저정보 유지 사이클 \r\n//------------------------------------------------------------------------\r\nfunction APILoadUser(){\r\n\r\n    return axios.get(`/auth` , {withCredentials:true}); \r\n}\r\n\r\nfunction* sagaLoadUser(action){\r\n\r\n    try{\r\n        const result = yield call(APILoadUser,action.data); \r\n        console.log('result====>' , result); \r\n        yield put({\r\n                type:LOAD_USER_SUCCESS, \r\n\r\n            \r\n        }); \r\n\r\n    }catch(e){\r\n        alert('에러발생'); \r\n        yield put({\r\n            type:LOAD_USER_FAILURE,\r\n            error:e, \r\n        });\r\n    }\r\n\r\n}\r\n\r\n\r\nfunction* watchLoadUser(){\r\n    yield takeLatest(LOAD_USER_REQUEST,sagaLoadUser);\r\n}\r\n//------------------------------------------------------------------------\r\n\r\n\r\n\r\n\r\n//회원가입 사이클 \r\n//------------------------------------------------------------------------\r\nfunction APIJoin(data){\r\n    console.log('data==>' , data); \r\n    return axios.post('/auth/join',{data},{withCredentials:true}); \r\n\r\n}\r\n\r\n\r\n\r\n\r\nfunction* sagaJoin(action){\r\n    \r\n    try{\r\n       console.log(action, action.data);\r\n        const result = yield call(APIJoin,action.data); \r\n        yield put({\r\n            type:JOIN_SUCCESS,\r\n            data: result,\r\n        }); \r\n\r\n    }catch(e){\r\n\r\n        alert('에러발생'); \r\n\r\n        yield put({\r\n            type:JOIN_FAILURE,\r\n            error:e, \r\n        })\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nfunction* watchJoin(){\r\n    yield takeLatest(JOIN_REQUEST,sagaJoin)\r\n}\r\n//------------------------------------------------------------------------\r\n\r\n\r\n\r\n//로그인 사이클\r\n//------------------------------------------------------------------------\r\nfunction APILogin(data){\r\n    return axios.post('/auth/login',data,{withCredentials:true}); \r\n}\r\n\r\nfunction* sagaLogin(action){\r\n\r\n\r\n    try{\r\n        const result = yield call(APILogin,action.data); \r\n\r\n        yield put({\r\n            type:LOGIN_SUCCESS,\r\n            data: result.data[0],\r\n        }); \r\n\r\n\r\n    }catch(e){\r\n        alert('로그인 에러'); \r\n        yield put({\r\n            type:LOGIN_FAILURE, \r\n            error:e,\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchLogin(){\r\n    yield takeEvery(LOGIN_REQUEST,sagaLogin); \r\n}\r\n//------------------------------------------------------------------------\r\n\r\n\r\nexport default function* authSag(){\r\n\r\n\r\n    yield all([\r\n        fork(watchJoin), \r\n        fork(watchLogin), \r\n        fork(watchLoadUser), \r\n        \r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}