{"ast":null,"code":"import axios from 'axios';\nimport { all, fork, takeLatest, takeEvery, put, delay, call } from 'redux-saga/effects';\nimport { JOIN_REQUEST, JOIN_SUCCESS, JOIN_FAILURE, LOGIN_REQUEST, LOGIN_SUCCESS, LOGIN_FAILURE, LOAD_USER_REQUEST, LOAD_USER_SUCCESS, LOAD_USER_FAILURE } from '../reducers/auth'; //유저정보 유지 사이클 \n//------------------------------------------------------------------------\n\nfunction APILoadUser() {\n  return axios.get('/auth/', {\n    withCredentials: true\n  });\n}\n\nfunction* sagaLoadUser(action) {\n  try {\n    const result = yield call(APILoadUser);\n    yield put({\n      type: LOAD_USER_SUCCESS,\n      data: result\n    });\n  } catch (e) {\n    console.error('LOAD_USER_FAILURE=>', e);\n    yield put({\n      type: LOAD_USER_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadUser() {\n  yield takeLatest(LOAD_USER_REQUEST, sagaLoadUser);\n} //------------------------------------------------------------------------\n//회원가입 사이클 \n//------------------------------------------------------------------------\n\n\nfunction APIJoin(data) {\n  console.log('data==>', data);\n  return axios.post('/auth/join', {\n    data\n  }, {\n    withCredentials: true\n  });\n}\n\nfunction* sagaJoin(action) {\n  try {\n    console.log(action, action.data);\n    const result = yield call(APIJoin, action.data);\n    yield put({\n      type: JOIN_SUCCESS,\n      data: result\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: JOIN_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchJoin() {\n  yield takeLatest(JOIN_REQUEST, sagaJoin);\n} //------------------------------------------------------------------------\n//로그인 사이클\n//------------------------------------------------------------------------\n\n\nfunction APILogin(data) {\n  return axios.post('/auth/login', data, {\n    withCredentials: true\n  });\n}\n\nfunction* sagaLogin(action) {\n  try {\n    const result = yield call(APILogin, action.data);\n    yield put({\n      type: LOGIN_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    alert('로그인 에러');\n    yield put({\n      type: LOGIN_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLogin() {\n  yield takeEvery(LOGIN_REQUEST, sagaLogin);\n} //------------------------------------------------------------------------\n\n\nexport default function* authSag() {\n  yield all([fork(watchJoin), fork(watchLogin), fork(watchLoadUser)]);\n}","map":{"version":3,"sources":["C:/git Repository/PersonalProject_001/frontend/sagas/authSaga.js"],"names":["axios","all","fork","takeLatest","takeEvery","put","delay","call","JOIN_REQUEST","JOIN_SUCCESS","JOIN_FAILURE","LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_FAILURE","LOAD_USER_REQUEST","LOAD_USER_SUCCESS","LOAD_USER_FAILURE","APILoadUser","get","withCredentials","sagaLoadUser","action","result","type","data","e","console","error","watchLoadUser","APIJoin","log","post","sagaJoin","watchJoin","APILogin","sagaLogin","alert","watchLogin","authSag"],"mappings":"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","sourcesContent":["import axios from 'axios'\r\nimport {all,fork,takeLatest,takeEvery ,put, delay,call} from 'redux-saga/effects'; \r\nimport \r\n    {JOIN_REQUEST,\r\n     JOIN_SUCCESS,\r\n     JOIN_FAILURE,\r\n     LOGIN_REQUEST,\r\n     LOGIN_SUCCESS,\r\n     LOGIN_FAILURE, \r\n     LOAD_USER_REQUEST,\r\n     LOAD_USER_SUCCESS,\r\n     LOAD_USER_FAILURE,\r\n    } \r\nfrom '../reducers/auth'; \r\n\r\n\r\n//유저정보 유지 사이클 \r\n//------------------------------------------------------------------------\r\nfunction APILoadUser(){\r\n\r\n    return axios.get('/auth/' , {withCredentials:true}); \r\n}\r\n\r\nfunction* sagaLoadUser(action){\r\n\r\n    try{\r\n        const result = yield call(APILoadUser); \r\n        yield put({\r\n                type:LOAD_USER_SUCCESS, \r\n                data: result,           \r\n        }); \r\n\r\n    }catch(e){\r\n        console.error('LOAD_USER_FAILURE=>' , e); \r\n        yield put({\r\n            type:LOAD_USER_FAILURE,\r\n            error:e, \r\n        });\r\n    }\r\n\r\n}\r\n\r\n\r\nfunction* watchLoadUser(){\r\n    yield takeLatest(LOAD_USER_REQUEST,sagaLoadUser);\r\n}\r\n//------------------------------------------------------------------------\r\n\r\n\r\n\r\n\r\n//회원가입 사이클 \r\n//------------------------------------------------------------------------\r\nfunction APIJoin(data){\r\n    console.log('data==>' , data); \r\n    return axios.post('/auth/join',{data},{withCredentials:true}); \r\n\r\n}\r\n\r\n\r\n\r\n\r\nfunction* sagaJoin(action){\r\n    \r\n    try{\r\n       console.log(action, action.data);\r\n        const result = yield call(APIJoin,action.data); \r\n        yield put({\r\n            type:JOIN_SUCCESS,\r\n            data: result,\r\n        }); \r\n\r\n    }catch(e){\r\n\r\n      console.error(e); \r\n\r\n        yield put({\r\n            type:JOIN_FAILURE,\r\n            error:e, \r\n        })\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nfunction* watchJoin(){\r\n    yield takeLatest(JOIN_REQUEST,sagaJoin)\r\n}\r\n//------------------------------------------------------------------------\r\n\r\n\r\n\r\n//로그인 사이클\r\n//------------------------------------------------------------------------\r\nfunction APILogin(data){\r\n    return axios.post('/auth/login',data,{withCredentials:true}); \r\n}\r\n\r\nfunction* sagaLogin(action){\r\n\r\n\r\n    try{\r\n        const result = yield call(APILogin,action.data); \r\n        yield put({\r\n            type:LOGIN_SUCCESS,\r\n            data: result.data,\r\n        }); \r\n\r\n\r\n    }catch(e){\r\n        alert('로그인 에러'); \r\n        yield put({\r\n            type:LOGIN_FAILURE, \r\n            error:e,\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchLogin(){\r\n    yield takeEvery(LOGIN_REQUEST,sagaLogin); \r\n}\r\n//------------------------------------------------------------------------\r\n\r\n\r\nexport default function* authSag(){\r\n\r\n\r\n    yield all([\r\n        fork(watchJoin), \r\n        fork(watchLogin), \r\n        fork(watchLoadUser), \r\n        \r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}