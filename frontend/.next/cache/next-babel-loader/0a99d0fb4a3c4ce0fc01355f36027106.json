{"ast":null,"code":"var _jsxFileName = \"D:\\\\git Repository\\\\PersonalProject_001\\\\frontend\\\\pages\\\\test2.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useMemo, useCallback, useRef, current } from 'react';\n\nconst Test2 = () => {\n  console.log('ComponentTest2');\n  const {\n    0: value,\n    1: setValue\n  } = useState(0);\n\n  const handleClick = () => console.log('clicked!'); //컴포넌트가 렌더링 될 때마다 함수를 새로 생성한다는 단점이 있다. \n  //부모 컴포넌트가 렌더링되거나, 상태가 변경되는 경우, React 컴포넌트는 렌더링을 유발한다.\n\n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 9\n    }\n  }, __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 9\n    }\n  }, \"\\uD604\\uC7AC \\uCE74\\uC6B4\\uD130 \\uAC12\\uC740 \", __jsx(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 21\n    }\n  }, value), \" \\uC785\\uB2C8\\uB2E4.\"), __jsx(\"button\", {\n    onClick: () => setValue(value + 1),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 9\n    }\n  }, \"+1\"), __jsx(\"button\", {\n    onClick: () => setValue(value - 1),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 9\n    }\n  }, \"-1\"));\n};\n\nexport default Test2;","map":{"version":3,"sources":["D:/git Repository/PersonalProject_001/frontend/pages/test2.js"],"names":["React","useState","useMemo","useCallback","useRef","current","Test2","console","log","value","setValue","handleClick"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,OAAzB,EAAkCC,WAAlC,EAA8CC,MAA9C,EAAsDC,OAAtD,QAAoE,OAApE;;AAKA,MAAMC,KAAK,GAAG,MAAK;AACfC,EAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACA,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBT,QAAQ,CAAC,CAAD,CAAlC;;AACA,QAAMU,WAAW,GAAG,MAAMJ,OAAO,CAACC,GAAR,CAAY,UAAZ,CAA1B,CAHe,CAIf;AACA;;;AACA,SAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sDACY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIC,KAAJ,CADZ,yBADA,EAIA;AAAQ,IAAA,OAAO,EAAE,MAAMC,QAAQ,CAACD,KAAK,GAAG,CAAT,CAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAJA,EAKA;AAAQ,IAAA,OAAO,EAAE,MAAMC,QAAQ,CAACD,KAAK,GAAG,CAAT,CAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UALA,CAFJ;AAWH,CAjBD;;AAoBA,eAAeH,KAAf","sourcesContent":["import React, {useState, useMemo, useCallback,useRef ,current} from 'react'\r\n\r\n\r\n\r\n\r\nconst Test2 = () =>{\r\n    console.log('ComponentTest2'); \r\n    const [value, setValue] = useState(0);\r\n    const handleClick = () => console.log('clicked!')\r\n    //컴포넌트가 렌더링 될 때마다 함수를 새로 생성한다는 단점이 있다. \r\n    //부모 컴포넌트가 렌더링되거나, 상태가 변경되는 경우, React 컴포넌트는 렌더링을 유발한다.\r\n    return (\r\n\r\n        <div>\r\n        <p>\r\n          현재 카운터 값은 <b>{value}</b> 입니다.\r\n        </p>\r\n        <button onClick={() => setValue(value + 1)}>+1</button>\r\n        <button onClick={() => setValue(value - 1)}>-1</button>\r\n      </div>\r\n    )\r\n\r\n}\r\n\r\n\r\nexport default Test2; "]},"metadata":{},"sourceType":"module"}