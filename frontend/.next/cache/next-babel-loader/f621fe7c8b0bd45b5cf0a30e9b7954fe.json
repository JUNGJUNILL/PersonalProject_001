{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(sagaEmpList),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchempList),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(sagaEmpInsert),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchInsertEmp),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(upLoadImages),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(watchUploadImages),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(sagaTest),\n    _marked8 = /*#__PURE__*/_regeneratorRuntime.mark(watchTest),\n    _marked9 = /*#__PURE__*/_regeneratorRuntime.mark(empListSaga);\n\nimport axios from 'axios';\nimport { all, fork, takeLatest, takeEvery, put, delay, call } from 'redux-saga/effects';\nimport { EMP_LIST_REQUEST, EMP_LIST_SUCCESS, EMP_LIST_FAILURE, EMP_INSERT_REQUEST, EMP_INSERT_SUCCESS, EMP_INSERT_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE, TEST_REQUEST, TEST_SUCCESS, TEST_FAILURE } from '../reducers/emp'; //EMP SELECT\n//-----------------------------------------------------------------------------------\n\nfunction APIempList(data) {\n  return axios.post('/emp', {\n    data: data\n  }, {\n    withCredentials: true\n  });\n}\n\n_c = APIempList;\n\nfunction sagaEmpList(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function sagaEmpList$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(APIempList, action.data);\n\n        case 3:\n          result = _context.sent;\n          console.log('empSelect=>', result.data);\n          _context.next = 7;\n          return put({\n            type: EMP_LIST_SUCCESS,\n            data: result.data\n          });\n\n        case 7:\n          _context.next = 15;\n          break;\n\n        case 9:\n          _context.prev = 9;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0);\n          alert('error', _context.t0);\n          _context.next = 15;\n          return put({\n            type: EMP_LIST_FAILURE,\n            error: _context.t0\n          });\n\n        case 15:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 9]]);\n}\n\nfunction watchempList() {\n  return _regeneratorRuntime.wrap(function watchempList$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(EMP_LIST_REQUEST, sagaEmpList);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n} //-----------------------------------------------------------------------------------\n//EMP INSERT \n//-----------------------------------------------------------------------------------\n\n\nfunction APIempInsert(data) {\n  return axios.post('/emp/empInsert', {\n    data: data\n  }, {\n    withCredentials: true\n  });\n}\n\n_c2 = APIempInsert;\n\nfunction sagaEmpInsert(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function sagaEmpInsert$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(APIempInsert, action.data);\n\n        case 3:\n          result = _context3.sent;\n          console.log('saga', result);\n          _context3.next = 7;\n          return put({\n            type: EMP_INSERT_SUCCESS,\n            data: result.data\n          });\n\n        case 7:\n          _context3.next = 15;\n          break;\n\n        case 9:\n          _context3.prev = 9;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.error(_context3.t0);\n          alert('error', _context3.t0);\n          _context3.next = 15;\n          return put({\n            type: EMP_INSERT_FAILURE,\n            error: _context3.t0\n          });\n\n        case 15:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 9]]);\n}\n\nfunction watchInsertEmp() {\n  return _regeneratorRuntime.wrap(function watchInsertEmp$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(EMP_INSERT_REQUEST, sagaEmpInsert);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n} //-----------------------------------------------------------------------------------\n// FILE UPLOAD \n//-----------------------------------------------------------------------------------\n\n\nfunction APIUploadImage(formData) {\n  return axios.post('/emp/images', formData, {\n    withCredentials: true\n  });\n}\n\n_c3 = APIUploadImage;\n\nfunction upLoadImages(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function upLoadImages$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return call(APIUploadImage, action.data);\n\n        case 3:\n          result = _context5.sent;\n          _context5.next = 6;\n          return put({\n            type: UPLOAD_IMAGES_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context5.next = 14;\n          break;\n\n        case 8:\n          _context5.prev = 8;\n          _context5.t0 = _context5[\"catch\"](0);\n          console.error(_context5.t0);\n          alert('error', _context5.t0);\n          _context5.next = 14;\n          return put({\n            type: UPLOAD_IMAGES_FAILURE,\n            error: _context5.t0\n          });\n\n        case 14:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[0, 8]]);\n}\n\nfunction watchUploadImages() {\n  return _regeneratorRuntime.wrap(function watchUploadImages$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeLatest(UPLOAD_IMAGES_REQUEST, upLoadImages);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n} //-----------------------------------------------------------------------------------\n//TEST\n//-----------------------------------------------------------------------------------\n\n\nfunction APItest(data) {\n  return axios.post('/emp/select', {\n    data: data\n  }, {\n    withCredentials: true\n  });\n}\n\n_c4 = APItest;\n\nfunction sagaTest(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function sagaTest$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.prev = 0;\n          _context7.next = 3;\n          return call(APItest, action.data);\n\n        case 3:\n          result = _context7.sent;\n          console.log('sagasagates', result.data);\n          _context7.next = 7;\n          return put({\n            type: TEST_SUCCESS,\n            data: result.data\n          });\n\n        case 7:\n          _context7.next = 15;\n          break;\n\n        case 9:\n          _context7.prev = 9;\n          _context7.t0 = _context7[\"catch\"](0);\n          console.error(_context7.t0);\n          alert('error', _context7.t0);\n          _context7.next = 15;\n          return put({\n            type: TEST_FAILURE,\n            error: _context7.t0\n          });\n\n        case 15:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7, null, [[0, 9]]);\n}\n\nfunction watchTest() {\n  return _regeneratorRuntime.wrap(function watchTest$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return takeLatest(TEST_REQUEST, sagaTest);\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8);\n} //-----------------------------------------------------------------------------------\n\n\nexport default function empListSaga() {\n  return _regeneratorRuntime.wrap(function empListSaga$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.next = 2;\n          return all([fork(watchempList), fork(watchInsertEmp), fork(watchUploadImages), fork(watchTest)]);\n\n        case 2:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9);\n}\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"APIempList\");\n$RefreshReg$(_c2, \"APIempInsert\");\n$RefreshReg$(_c3, \"APIUploadImage\");\n$RefreshReg$(_c4, \"APItest\");","map":{"version":3,"sources":["D:/git Repository/PersonalProject_001/frontend/sagas/empListSaga.js"],"names":["sagaEmpList","watchempList","sagaEmpInsert","watchInsertEmp","upLoadImages","watchUploadImages","sagaTest","watchTest","empListSaga","axios","all","fork","takeLatest","takeEvery","put","delay","call","EMP_LIST_REQUEST","EMP_LIST_SUCCESS","EMP_LIST_FAILURE","EMP_INSERT_REQUEST","EMP_INSERT_SUCCESS","EMP_INSERT_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","TEST_REQUEST","TEST_SUCCESS","TEST_FAILURE","APIempList","data","post","withCredentials","action","result","console","log","type","error","alert","APIempInsert","APIUploadImage","formData","APItest"],"mappings":"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","sourcesContent":["import axios from 'axios'\r\nimport {all,fork,takeLatest,takeEvery ,put, delay,call} from 'redux-saga/effects'; \r\nimport \r\n    {EMP_LIST_REQUEST,\r\n     EMP_LIST_SUCCESS,\r\n     EMP_LIST_FAILURE,\r\n     EMP_INSERT_REQUEST,\r\n     EMP_INSERT_SUCCESS,\r\n     EMP_INSERT_FAILURE,\r\n     UPLOAD_IMAGES_REQUEST,\r\n     UPLOAD_IMAGES_SUCCESS,\r\n     UPLOAD_IMAGES_FAILURE,\r\n\r\n    TEST_REQUEST,\r\n    TEST_SUCCESS,\r\n    TEST_FAILURE\r\n    } \r\nfrom '../reducers/emp'; \r\n\r\n\r\n\r\n//EMP SELECT\r\n//-----------------------------------------------------------------------------------\r\nfunction APIempList(data){\r\n    return axios.post('/emp',{data},{withCredentials:true})\r\n}\r\n\r\nfunction* sagaEmpList(action){\r\n\r\n    try{\r\n      const result = yield call(APIempList,action.data); \r\n      console.log('empSelect=>' , result.data)\r\n      yield  put({\r\n            type:EMP_LIST_SUCCESS, \r\n            data:result.data,\r\n        });\r\n\r\n    }catch(e){\r\n\r\n        console.error(e); \r\n        alert('error', e); \r\n        yield put({\r\n            type:EMP_LIST_FAILURE, \r\n            error: e, \r\n        }); \r\n    }\r\n}\r\n\r\nfunction* watchempList(){\r\n    yield takeLatest(EMP_LIST_REQUEST,sagaEmpList); \r\n}\r\n//-----------------------------------------------------------------------------------\r\n\r\n\r\n//EMP INSERT \r\n//-----------------------------------------------------------------------------------\r\nfunction APIempInsert(data){\r\n\r\n    return axios.post('/emp/empInsert',{data},{withCredentials:true})\r\n\r\n}\r\n\r\nfunction* sagaEmpInsert(action){\r\n\r\n    try{\r\n\r\n        const result = yield call(APIempInsert,action.data); \r\n        console.log('saga' , result); \r\n        yield  put({\r\n              type:EMP_INSERT_SUCCESS, \r\n              data:result.data,\r\n          });\r\n  \r\n      }catch(e){\r\n  \r\n          console.error(e); \r\n          alert('error', e); \r\n          yield put({\r\n              type:EMP_INSERT_FAILURE, \r\n              error: e, \r\n          }); \r\n      }\r\n\r\n}\r\n\r\n\r\nfunction* watchInsertEmp(){\r\n    yield takeLatest(EMP_INSERT_REQUEST,sagaEmpInsert); \r\n}\r\n//-----------------------------------------------------------------------------------\r\n\r\n\r\n\r\n// FILE UPLOAD \r\n//-----------------------------------------------------------------------------------\r\nfunction APIUploadImage(formData){\r\n    return axios.post('/emp/images',formData,{withCredentials:true}); \r\n}\r\n\r\nfunction* upLoadImages(action){\r\n\r\n\r\n    try{\r\n        const result = yield call(APIUploadImage,action.data); \r\n        yield  put({\r\n              type:UPLOAD_IMAGES_SUCCESS, \r\n              data:result.data,\r\n          });\r\n  \r\n      }catch(e){\r\n  \r\n          console.error(e); \r\n          alert('error', e); \r\n          yield put({\r\n              type:UPLOAD_IMAGES_FAILURE, \r\n              error: e, \r\n          }); \r\n      }\r\n\r\n}\r\n\r\n\r\n\r\nfunction* watchUploadImages(){\r\n    yield takeLatest(UPLOAD_IMAGES_REQUEST,upLoadImages); \r\n}\r\n//-----------------------------------------------------------------------------------\r\n\r\n\r\n\r\n\r\n\r\n//TEST\r\n//-----------------------------------------------------------------------------------\r\n\r\nfunction APItest(data){\r\n\r\n    return axios.post('/emp/select',{data},{withCredentials:true})\r\n\r\n}\r\n\r\nfunction* sagaTest(action){\r\n\r\n    try{\r\n\r\n        const result = yield call(APItest,action.data); \r\n        console.log('sagasagates' , result.data); \r\n        yield  put({\r\n              type:TEST_SUCCESS, \r\n              data:result.data,\r\n          });\r\n  \r\n      }catch(e){\r\n  \r\n          console.error(e); \r\n          alert('error', e); \r\n          yield put({\r\n              type:TEST_FAILURE, \r\n              error: e, \r\n          }); \r\n      }\r\n\r\n}\r\n\r\n\r\nfunction* watchTest(){\r\n    yield takeLatest(TEST_REQUEST,sagaTest); \r\n}\r\n//-----------------------------------------------------------------------------------\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default function* empListSaga(){\r\n\r\n    yield all([\r\n        fork(watchempList), \r\n        fork(watchInsertEmp), \r\n        fork(watchUploadImages), \r\n        fork(watchTest), \r\n     ])\r\n}"]},"metadata":{},"sourceType":"module"}