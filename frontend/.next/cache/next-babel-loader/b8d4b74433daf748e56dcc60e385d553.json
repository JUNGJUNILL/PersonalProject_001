{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar _this = this,\n    _jsxFileName = \"D:\\\\git Repository\\\\PersonalProject_001\\\\frontend\\\\pages\\\\test.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from \"react\";\nimport Item from '../components/testComponent/Item';\nimport CreateUser from '../components/testComponent/CreateUser';\nimport UserList from '../components/testComponent/UserList';\n\nvar Test = function Test() {\n  _s();\n\n  var _useState = useState([1, 2, 3]),\n      numbers = _useState[0],\n      setNumbers = _useState[1];\n\n  var _useState2 = useState([1, 2, 3, 4, 5]),\n      array = _useState2[0],\n      setArray = _useState2[1];\n\n  var addNumber = function addNumber() {\n    setArray(_toConsumableArray(numbers)); //배열 추가 시 \n\n    setNumbers(function (prev) {\n      return [].concat(_toConsumableArray(prev), [prev.length + 1]);\n    });\n    console.log('numbers=>', numbers, 'array=>', array);\n  };\n  /*\r\n  <div>\r\n        {numbers.map(num => (\r\n        <Item key={num} num={num}></Item>\r\n      ))}\r\n      <div onClick={addNumber}>Click</div>\r\n      <input type=\"text\" value={array.length} />\r\n  </div>\r\n  */\n\n\n  var users = [{\n    id: 1,\n    username: 'velopert',\n    email: 'public.velopert@gmail.com'\n  }, {\n    id: 2,\n    username: 'tester',\n    email: 'tester@example.com'\n  }, {\n    id: 3,\n    username: 'liz',\n    email: 'liz@example.com'\n  }];\n  var nextId = useRef(4);\n\n  var onCreate = function onCreate() {\n    // 나중에 구현 할 배열에 항목 추가하는 로직\n    // ...\n    nextId.current += 1;\n  };\n\n  return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }, __jsx(CreateUser, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }), __jsx(UserList, {\n    users: users,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }));\n};\n\n_s(Test, \"w5+Uuct4DEroKEyjfcu/6e/nEIo=\");\n\n_c = Test;\nexport default Test;\n\nvar _c;\n\n$RefreshReg$(_c, \"Test\");","map":{"version":3,"sources":["D:/git Repository/PersonalProject_001/frontend/pages/test.js"],"names":["React","useState","useEffect","Item","CreateUser","UserList","Test","numbers","setNumbers","array","setArray","addNumber","prev","length","console","log","users","id","username","email","nextId","useRef","onCreate","current"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAAyBC,SAAzB,QAA0C,OAA1C;AACA,OAAOC,IAAP,MAAiB,kCAAjB;AACA,OAAOC,UAAP,MAAuB,wCAAvB;AACA,OAAOC,QAAP,MAAqB,sCAArB;;AAEA,IAAMC,IAAI,GAAG,SAAPA,IAAO,GAAK;AAAA;;AAAA,kBAEgBL,QAAQ,CAAC,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAD,CAFxB;AAAA,MAEPM,OAFO;AAAA,MAEEC,UAFF;;AAAA,mBAGYP,QAAQ,CAAC,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,EAAS,CAAT,CAAD,CAHpB;AAAA,MAGPQ,KAHO;AAAA,MAGAC,QAHA;;AAMd,MAAMC,SAAS,GAAG,SAAZA,SAAY,GAAM;AACtBD,IAAAA,QAAQ,oBAAKH,OAAL,EAAR,CADsB,CAEpB;;AACAC,IAAAA,UAAU,CAAC,UAAAI,IAAI;AAAA,0CAAQA,IAAR,IAAcA,IAAI,CAACC,MAAL,GAAc,CAA5B;AAAA,KAAL,CAAV;AAEAC,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAA0BR,OAA1B,EAAmC,SAAnC,EAA+CE,KAA/C;AAED,GAPH;AAQE;;;;;;;;;;;AAWD,MAAMO,KAAK,GAAG,CACb;AACEC,IAAAA,EAAE,EAAE,CADN;AAEEC,IAAAA,QAAQ,EAAE,UAFZ;AAGEC,IAAAA,KAAK,EAAE;AAHT,GADa,EAMb;AACEF,IAAAA,EAAE,EAAE,CADN;AAEEC,IAAAA,QAAQ,EAAE,QAFZ;AAGEC,IAAAA,KAAK,EAAE;AAHT,GANa,EAWb;AACEF,IAAAA,EAAE,EAAE,CADN;AAEEC,IAAAA,QAAQ,EAAE,KAFZ;AAGEC,IAAAA,KAAK,EAAE;AAHT,GAXa,CAAd;AAkBD,MAAMC,MAAM,GAAGC,MAAM,CAAC,CAAD,CAArB;;AACA,MAAMC,QAAQ,GAAG,SAAXA,QAAW,GAAM;AACrB;AACA;AAEAF,IAAAA,MAAM,CAACG,OAAP,IAAkB,CAAlB;AACD,GALD;;AAQA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,MAAC,QAAD;AAAU,IAAA,KAAK,EAAEP,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF;AAQH,CA5DD;;GAAMV,I;;KAAAA,I;AA8DN,eAAeA,IAAf","sourcesContent":["import React, { useState,useEffect } from \"react\";\r\nimport Item from '../components/testComponent/Item'\r\nimport CreateUser from '../components/testComponent/CreateUser'\r\nimport UserList from '../components/testComponent/UserList'\r\n\r\nconst Test = () =>{\r\n\r\n    const [numbers, setNumbers] = useState([1, 2, 3]);\r\n    const [array, setArray] = useState([1,2,3,4,5]); \r\n\r\n\r\n    const addNumber = () => {\r\n      setArray([...numbers]); \r\n        //배열 추가 시 \r\n        setNumbers(prev => [...prev, prev.length + 1]);\r\n        \r\n        console.log('numbers=>' , numbers, 'array=>' , array); \r\n\r\n      };\r\n      /*\r\n      <div>\r\n            {numbers.map(num => (\r\n            <Item key={num} num={num}></Item>\r\n          ))}\r\n          <div onClick={addNumber}>Click</div>\r\n          <input type=\"text\" value={array.length} />\r\n      </div>\r\n      */\r\n\r\n\r\n     const users = [\r\n      {\r\n        id: 1,\r\n        username: 'velopert',\r\n        email: 'public.velopert@gmail.com'\r\n      },\r\n      {\r\n        id: 2,\r\n        username: 'tester',\r\n        email: 'tester@example.com'\r\n      },\r\n      {\r\n        id: 3,\r\n        username: 'liz',\r\n        email: 'liz@example.com'\r\n      }\r\n    ];\r\n\r\n    const nextId = useRef(4);\r\n    const onCreate = () => {\r\n      // 나중에 구현 할 배열에 항목 추가하는 로직\r\n      // ...\r\n  \r\n      nextId.current += 1;\r\n    };\r\n\r\n\r\n    return (\r\n      <div>\r\n        <CreateUser />\r\n        <UserList users={users} />\r\n\r\n      </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Test; "]},"metadata":{},"sourceType":"module"}