{"ast":null,"code":"import axios from 'axios';\nimport jwtDeCoder from 'jwt-decode';\nimport { all, fork, takeLatest, takeEvery, put, delay, call } from 'redux-saga/effects';\nimport { JOIN_REQUEST, JOIN_SUCCESS, JOIN_FAILURE, LOGIN_REQUEST, LOGIN_SUCCESS, LOGIN_FAILURE, LOAD_USER_REQUEST, LOAD_USER_SUCCESS, LOAD_USER_FAILURE, LOGOUT_REQUEST, LOGOUT_SUCCESS, LOGOUT_FAILURE } from '../reducers/auth'; //유저정보 유지 사이클 \n//------------------------------------------------------------------------\n\nfunction APILoadUser(data) {\n  return axios.get('/auth/', {\n    data\n  }, {\n    withCredentials: true\n  });\n}\n\nfunction* sagaLoadUser(action) {\n  try {\n    const result = yield call(APILoadUser, action.data);\n    console.log('데이타!!==>' + action.data);\n    yield put({\n      type: LOAD_USER_SUCCESS,\n      data: result.data.nick\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOAD_USER_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadUser() {\n  yield takeEvery(LOAD_USER_REQUEST, sagaLoadUser);\n} //------------------------------------------------------------------------\n//회원가입 사이클 \n//------------------------------------------------------------------------\n\n\nfunction APIJoin(data) {\n  console.log('data==>', data);\n  return axios.post('/auth/join', {\n    data\n  }, {\n    withCredentials: true\n  });\n}\n\nfunction* sagaJoin(action) {\n  try {\n    console.log(action, action.data);\n    const result = yield call(APIJoin, action.data);\n    yield put({\n      type: JOIN_SUCCESS,\n      data: result\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: JOIN_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchJoin() {\n  yield takeLatest(JOIN_REQUEST, sagaJoin);\n} //------------------------------------------------------------------------\n//로그아웃 사이클\n//------------------------------------------------------------------------\n\n\nfunction APILogOut() {\n  return axios.get('/auth/logOut', {\n    withCredentials: true\n  });\n}\n\nfunction* sagaLogOut() {\n  try {\n    const result = yield call(APILogOut);\n    yield put({\n      type: LOGOUT_SUCCESS\n    });\n  } catch (e) {\n    alert('로그아웃 에러');\n    yield put({\n      type: LOGOUT_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(LOGOUT_REQUEST, sagaLogOut);\n} //------------------------------------------------------------------------\n//로그인 사이클\n//------------------------------------------------------------------------\n\n\nfunction APILogin(data) {\n  //jwt 로그인\n  return axios.post('/auth/login', {\n    data\n  }, {\n    withCredentials: true\n  }); //passport local 로그인\n  //return axios.post('/auth/login',data,{withCredentials:true});\n} //카카오 로그인 \n\n\nfunction APILoginKakao() {\n  return axios.get('/auth/kakao/', {\n    withCredentials: true\n  });\n}\n\nfunction APILoginKakaoSDK() {\n  return axios.get('/auth/kakaoTest/', {\n    withCredentials: true\n  });\n}\n\nfunction* sagaLogin(action) {\n  try {\n    let result;\n    let decoded;\n\n    if (action.data.loginType === 'local') {\n      result = yield call(APILogin, action.data);\n      decoded = jwtDeCoder(result.data.token);\n      yield put({\n        type: LOGIN_SUCCESS,\n        data: decoded.nick\n      });\n    } else if (action.data.loginType === 'kakao') {\n      result = yield call(APILoginKakao);\n      decoded = result.data;\n      yield put({\n        type: LOGIN_SUCCESS,\n        data: decoded.nick\n      });\n    } else {\n      if (Kakao.isInitialized()) {\n        console.log('Kakao.isInitialized()=>>', Kakao.isInitialized());\n        Kakao.Auth.authorize({\n          redirectUri: 'http://captainryan.gonetis.com:3095/api/auth/kakaoTest',\n          //redirectUri:'/auth/kakao/',\n          success: function (authObj) {\n            console.log('성공이야!==>', authObj);\n          }\n        });\n      }\n\n      result = yield call(APILoginKakao);\n      decoded = result.data;\n      yield put({\n        type: LOGIN_SUCCESS,\n        data: decoded.nick\n      });\n    }\n  } catch (e) {\n    alert('로그인 에러', result);\n    yield put({\n      type: LOGIN_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLogin() {\n  yield takeEvery(LOGIN_REQUEST, sagaLogin);\n} //------------------------------------------------------------------------\n\n\nexport default function* authSaga() {\n  yield all([fork(watchJoin), fork(watchLogin), fork(watchLoadUser), fork(watchLogOut)]);\n}","map":{"version":3,"sources":["D:/git Repository/PersonalProject_001/frontend/sagas/authSaga.js"],"names":["axios","jwtDeCoder","all","fork","takeLatest","takeEvery","put","delay","call","JOIN_REQUEST","JOIN_SUCCESS","JOIN_FAILURE","LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_FAILURE","LOAD_USER_REQUEST","LOAD_USER_SUCCESS","LOAD_USER_FAILURE","LOGOUT_REQUEST","LOGOUT_SUCCESS","LOGOUT_FAILURE","APILoadUser","data","get","withCredentials","sagaLoadUser","action","result","console","log","type","nick","e","error","watchLoadUser","APIJoin","post","sagaJoin","watchJoin","APILogOut","sagaLogOut","alert","watchLogOut","APILogin","APILoginKakao","APILoginKakaoSDK","sagaLogin","decoded","loginType","token","Kakao","isInitialized","Auth","authorize","redirectUri","success","authObj","watchLogin","authSaga"],"mappings":"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","sourcesContent":["import axios from 'axios'\r\nimport jwtDeCoder from 'jwt-decode'\r\nimport {all,fork,takeLatest,takeEvery ,put, delay,call} from 'redux-saga/effects'; \r\nimport \r\n    {JOIN_REQUEST,\r\n     JOIN_SUCCESS,\r\n     JOIN_FAILURE,\r\n     LOGIN_REQUEST,\r\n     LOGIN_SUCCESS,\r\n     LOGIN_FAILURE, \r\n     LOAD_USER_REQUEST,\r\n     LOAD_USER_SUCCESS,\r\n     LOAD_USER_FAILURE,\r\n     LOGOUT_REQUEST,\r\n     LOGOUT_SUCCESS,\r\n     LOGOUT_FAILURE,\r\n    } \r\nfrom '../reducers/auth'; \r\n\r\n\r\n//유저정보 유지 사이클 \r\n//------------------------------------------------------------------------\r\nfunction APILoadUser(data){\r\n\r\n    return axios.get('/auth/' ,{data}, {withCredentials:true}); \r\n}\r\n\r\nfunction* sagaLoadUser(action){\r\n\r\n    try{\r\n\r\n        const result = yield call(APILoadUser,action.data);\r\n        console.log('데이타!!==>' + action.data)\r\n    \r\n        yield put({\r\n                type:LOAD_USER_SUCCESS, \r\n                data: result.data.nick,           \r\n        }); \r\n\r\n    }catch(e){\r\n        console.error(e); \r\n        yield put({\r\n            type:LOAD_USER_FAILURE,\r\n            error:e, \r\n        });\r\n    }\r\n\r\n}\r\n\r\n\r\nfunction* watchLoadUser(){\r\n    yield takeEvery(LOAD_USER_REQUEST,sagaLoadUser);\r\n}\r\n//------------------------------------------------------------------------\r\n\r\n\r\n\r\n\r\n//회원가입 사이클 \r\n//------------------------------------------------------------------------\r\nfunction APIJoin(data){\r\n    console.log('data==>' , data); \r\n    return axios.post('/auth/join',{data},{withCredentials:true}); \r\n\r\n}\r\n\r\n\r\n\r\n\r\nfunction* sagaJoin(action){\r\n    \r\n    try{\r\n       console.log(action, action.data);\r\n        const result = yield call(APIJoin,action.data); \r\n        yield put({\r\n            type:JOIN_SUCCESS,\r\n            data: result,\r\n        }); \r\n\r\n    }catch(e){\r\n\r\n      console.error(e); \r\n\r\n        yield put({\r\n            type:JOIN_FAILURE,\r\n            error:e, \r\n        })\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nfunction* watchJoin(){\r\n    yield takeLatest(JOIN_REQUEST,sagaJoin)\r\n}\r\n//------------------------------------------------------------------------\r\n\r\n\r\n\r\n\r\n//로그아웃 사이클\r\n//------------------------------------------------------------------------\r\nfunction APILogOut(){\r\n\r\n    return axios.get('/auth/logOut',{withCredentials:true});\r\n\r\n\r\n}\r\n\r\nfunction* sagaLogOut(){\r\n\r\n\r\n    try{\r\n      const result =   yield call(APILogOut); \r\n    \r\n\r\n        yield put({\r\n            type:LOGOUT_SUCCESS,\r\n        }); \r\n\r\n\r\n    }catch(e){\r\n        alert('로그아웃 에러'); \r\n        yield put({\r\n            type:LOGOUT_FAILURE, \r\n            error:e,\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchLogOut(){\r\n    yield takeLatest(LOGOUT_REQUEST,sagaLogOut); \r\n}\r\n//------------------------------------------------------------------------\r\n\r\n\r\n//로그인 사이클\r\n//------------------------------------------------------------------------\r\nfunction APILogin(data){\r\n\r\n    //jwt 로그인\r\n    return axios.post('/auth/login',{data},{withCredentials:true});\r\n\r\n    //passport local 로그인\r\n    //return axios.post('/auth/login',data,{withCredentials:true});\r\n}\r\n//카카오 로그인 \r\nfunction APILoginKakao(){\r\n\r\n    return axios.get('/auth/kakao/',{withCredentials:true});\r\n}\r\n\r\nfunction APILoginKakaoSDK(){\r\n    return axios.get('/auth/kakaoTest/',{withCredentials:true});\r\n}\r\n\r\nfunction* sagaLogin(action){\r\n\r\n\r\n    try{\r\n\r\n        let result; \r\n        let decoded;\r\n        if(action.data.loginType==='local'){\r\n\r\n            result = yield call(APILogin,action.data); \r\n            decoded =jwtDeCoder(result.data.token); \r\n            yield put({\r\n                type:LOGIN_SUCCESS,\r\n                data:decoded.nick,\r\n            }); \r\n\r\n        }else if(action.data.loginType==='kakao'){\r\n\r\n            result = yield call(APILoginKakao); \r\n            decoded =result.data;\r\n            yield put({\r\n                type:LOGIN_SUCCESS,\r\n                data:decoded.nick,\r\n            }); \r\n\r\n        }else{\r\n            if(Kakao.isInitialized()){\r\n                    console.log('Kakao.isInitialized()=>>',Kakao.isInitialized())\r\n                    Kakao.Auth.authorize({\r\n                        \r\n                        redirectUri:'http://captainryan.gonetis.com:3095/api/auth/kakaoTest',\r\n                        //redirectUri:'/auth/kakao/',\r\n                        \r\n                        success : function(authObj){\r\n                            console.log('성공이야!==>', authObj); \r\n                        }\r\n\r\n                    });\r\n            }\r\n            result = yield call(APILoginKakao); \r\n            decoded =result.data;\r\n            yield put({\r\n                type:LOGIN_SUCCESS,\r\n                data:decoded.nick,\r\n            }); \r\n        }\r\n        \r\n                               \r\n\r\n\r\n\r\n    }catch(e){\r\n        alert('로그인 에러',result); \r\n        yield put({\r\n            type:LOGIN_FAILURE, \r\n            error:e,\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchLogin(){\r\n    yield takeEvery(LOGIN_REQUEST,sagaLogin); \r\n}\r\n//------------------------------------------------------------------------\r\n\r\n\r\nexport default function* authSaga(){\r\n\r\n\r\n    yield all([\r\n        fork(watchJoin), \r\n        fork(watchLogin), \r\n        fork(watchLoadUser), \r\n        fork(watchLogOut), \r\n        \r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}