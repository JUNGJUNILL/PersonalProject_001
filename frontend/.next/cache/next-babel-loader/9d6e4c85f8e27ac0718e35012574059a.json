{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"D:\\\\git Repository\\\\PersonalProject_001\\\\frontend\\\\components\\\\mainPosts_1001\\\\mainPosts_1001_comments.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useCallback, useEffect, useState, createRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport custumDateFormat from '../../utilComponent/custumDateFormat';\nimport { DislikeTwoTone, LikeTwoTone } from '@ant-design/icons';\nimport { MAINPOSTS_1001_COMMENTS_REQUEST, MAINPOSTS_1001_COMMENTLIKE_REQUEST } from '../../reducers/mainPosts_1001';\n\nvar Comments1001 = function Comments1001(_ref) {\n  _s();\n\n  var key = _ref.key,\n      postFlag = _ref.postFlag,\n      nickName = _ref.nickName,\n      postId = _ref.postId,\n      userInfo = _ref.userInfo,\n      commentId = _ref.commentId,\n      comment = _ref.comment,\n      who = _ref.who,\n      flag = _ref.flag,\n      good = _ref.good,\n      bad = _ref.bad,\n      createdDate = _ref.createdDate,\n      click = _ref.click;\n\n  var _useState = useState(parseInt(good)),\n      goodCount = _useState[0],\n      setGoodCount = _useState[1];\n\n  var _useState2 = useState(parseInt(bad)),\n      badCount = _useState2[0],\n      setBadCount = _useState2[1];\n\n  var _useState3 = useState(false),\n      like = _useState3[0],\n      setLike = _useState3[1];\n\n  var _useState4 = useState(false),\n      disLike = _useState4[0],\n      setDisLike = _useState4[1];\n\n  var dispatch = useDispatch();\n  console.log('댓글 컴포넌트 로드 commentId=>   ', commentId, '  like=> ', like, 'click=> ', click, 'good=>  ', good, 'bad=>  ', bad);\n  var likeBtn = useCallback(function (commentid, flag, likeDislike) {\n    if (!userInfo) {\n      alert('로그인이 필요한 서비스 입니다.');\n      return;\n    } //alert(`${commentid},${flag},${likeDislike}`)\n    //문자 리터럴로 해야 alert에 변수 들어가진다.\n\n\n    if (flag === \"Y\") {\n      alert('이미 좋아요! 싫어요! 했습니다.');\n      return;\n    } else {\n      if (likeDislike === \"good\") {\n        setLike(true);\n        setDisLike(false);\n        setGoodCount(0);\n        setGoodCount(parseInt(good) + 1);\n        console.log('good 버튼 누름commentId==>   ', commentId, '   goodCount=>', goodCount, ' good=>  ', good);\n      } else {\n        setLike(false);\n        setDisLike(true);\n        setBadCount(0);\n        setBadCount(parseInt(bad) + 1);\n        console.log('bad 버튼 누름commentId==>   ', commentId, '   badCount=>', badCount, ' bad=>  ', bad);\n      } //댓글 좋아요!\n\n\n      dispatch({\n        type: MAINPOSTS_1001_COMMENTLIKE_REQUEST,\n        data: {\n          commentid: commentid,\n          postFlag: postFlag,\n          postId: postId,\n          flag: likeDislike,\n          who: userInfo,\n          nickName: nickName\n        }\n      });\n    }\n\n    alert(\"\".concat(likeDislike));\n  }, []);\n  return __jsx(\"div\", {\n    className: \"divTableRow\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 17\n    }\n  }, __jsx(\"div\", {\n    className: \"divTableCell\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 21\n    }\n  }, __jsx(\"b\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 21\n    }\n  }, who), \" \\xA0 \", __jsx(\"small\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 41\n    }\n  }, custumDateFormat(createdDate)), __jsx(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 87\n    }\n  }), comment, __jsx(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 30\n    }\n  }), \"\\uB2F5\\uAE00 [9] \", commentId, __jsx(\"div\", {\n    style: {\n      marginTop: \"1%\",\n      display: \"block\",\n      \"float\": \"right\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 25\n    }\n  }, __jsx(LikeTwoTone, {\n    onClick: function onClick() {\n      return likeBtn(commentId, flag, 'good');\n    },\n    twoToneColor: like && click ? \"#ff0000\" : \"#1ba640\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 29\n    }\n  }), like && click ? goodCount : good, \"\\xA0\\xA0\\xA0\\xA0\", __jsx(DislikeTwoTone, {\n    onClick: function onClick() {\n      return likeBtn(commentId, flag, 'bad');\n    },\n    twoToneColor: disLike && click ? \"#ff0000\" : \"#1ba640\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 29\n    }\n  }), bad, \"\\xA0\\xA0\\xA0\\xA0\", __jsx(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 29\n    }\n  }))));\n};\n\n_s(Comments1001, \"VWIfyaaAu379PEf8RooQ5WDkXq8=\", false, function () {\n  return [useDispatch];\n});\n\n_c = Comments1001;\nexport default Comments1001;\n\nvar _c;\n\n$RefreshReg$(_c, \"Comments1001\");","map":{"version":3,"sources":["D:/git Repository/PersonalProject_001/frontend/components/mainPosts_1001/mainPosts_1001_comments.js"],"names":["React","useCallback","useEffect","useState","createRef","useDispatch","useSelector","custumDateFormat","DislikeTwoTone","LikeTwoTone","MAINPOSTS_1001_COMMENTS_REQUEST","MAINPOSTS_1001_COMMENTLIKE_REQUEST","Comments1001","key","postFlag","nickName","postId","userInfo","commentId","comment","who","flag","good","bad","createdDate","click","parseInt","goodCount","setGoodCount","badCount","setBadCount","like","setLike","disLike","setDisLike","dispatch","console","log","likeBtn","commentid","likeDislike","alert","type","data","marginTop","display"],"mappings":"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","sourcesContent":["import React, { useCallback,useEffect, useState, createRef } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport custumDateFormat from  '../../utilComponent/custumDateFormat';\r\nimport {DislikeTwoTone,LikeTwoTone} from '@ant-design/icons'\r\nimport \r\n    {\r\n     MAINPOSTS_1001_COMMENTS_REQUEST, \r\n     MAINPOSTS_1001_COMMENTLIKE_REQUEST,\r\n    } \r\nfrom '../../reducers/mainPosts_1001'; \r\n\r\nconst Comments1001 = ({\r\n                      key,\r\n                      postFlag,\r\n                      nickName,\r\n                      postId,\r\n                      userInfo,\r\n\r\n                      commentId,\r\n                      comment,\r\n                      who,\r\n                      flag,\r\n                      good,\r\n                      bad,\r\n                      createdDate,\r\n\r\n                      click,\r\n                    })=>{\r\n\r\n       \r\n    const [goodCount,setGoodCount] = useState(parseInt(good));  \r\n    const [badCount,setBadCount]   = useState(parseInt(bad)); \r\n    const [like , setLike]        = useState(false); \r\n    const [disLike , setDisLike]  = useState(false); \r\n\r\n    const dispatch = useDispatch();    \r\n    \r\n    \r\n   console.log('댓글 컴포넌트 로드 commentId=>   ',commentId,'  like=> ' , like, 'click=> ',click , 'good=>  ', good, 'bad=>  ' , bad); \r\n\r\n\r\n\r\n\r\n    const likeBtn =useCallback((commentid,flag,likeDislike)=>{\r\n        if(!userInfo){\r\n          alert('로그인이 필요한 서비스 입니다.'); \r\n          return;\r\n        }\r\n      \r\n        //alert(`${commentid},${flag},${likeDislike}`)\r\n        //문자 리터럴로 해야 alert에 변수 들어가진다.\r\n    \r\n        if(flag === \"Y\"){\r\n          alert('이미 좋아요! 싫어요! 했습니다.'); \r\n          return; \r\n    \r\n        }else{\r\n            if(likeDislike ===\"good\"){\r\n                setLike(true); \r\n                setDisLike(false); \r\n\r\n                setGoodCount(0); \r\n                setGoodCount(parseInt(good)+1); \r\n                console.log('good 버튼 누름commentId==>   ',commentId ,'   goodCount=>' , goodCount, ' good=>  ',good ); \r\n            }else{\r\n                setLike(false); \r\n                setDisLike(true); \r\n\r\n                setBadCount(0); \r\n                setBadCount(parseInt(bad)+1)\r\n\r\n                console.log('bad 버튼 누름commentId==>   ',commentId ,'   badCount=>' , badCount, ' bad=>  ',bad ); \r\n              }\r\n\r\n        //댓글 좋아요!\r\n          dispatch({\r\n            type:MAINPOSTS_1001_COMMENTLIKE_REQUEST, \r\n            data:{\r\n              commentid,\r\n              postFlag,\r\n              postId,\r\n              flag: likeDislike ,\r\n              who: userInfo,\r\n              nickName,\r\n            }\r\n        }); \r\n\r\n    \r\n        }\r\n\r\n       alert(`${likeDislike}`); \r\n      \r\n      },[]); \r\n\r\n    return (\r\n                <div  className='divTableRow' >\r\n                    <div  className=\"divTableCell\">\r\n                    <b>{who}</b> &nbsp; <small>{custumDateFormat(createdDate)}</small><br/>\r\n                    {comment}<br />\r\n                    답글 [9] {commentId}\r\n               \r\n                        <div  style={{marginTop:\"1%\",display:\"block\",float:\"right\"}}>\r\n                            <LikeTwoTone onClick={()=>likeBtn(commentId,flag,'good')} twoToneColor={like && click ? \"#ff0000\" : \"#1ba640\"}/>{like && click ? goodCount : good}\r\n                            &nbsp;&nbsp;&nbsp;&nbsp;\r\n                            <DislikeTwoTone onClick={()=>likeBtn(commentId,flag,'bad')} twoToneColor={disLike && click ? \"#ff0000\" : \"#1ba640\"} />{bad}\r\n                            &nbsp;&nbsp;&nbsp;&nbsp;\r\n                            <br />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n                \r\n    )\r\n\r\n}\r\n\r\nexport default Comments1001; "]},"metadata":{},"sourceType":"module"}