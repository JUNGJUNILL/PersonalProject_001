{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _this = this,\n    _jsxFileName = \"D:\\\\git Repository\\\\PersonalProject_001\\\\frontend\\\\pages\\\\test.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect, useRef, memo, useCallback } from \"react\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport Item from '../components/testComponent/Item';\nimport CreateUser from '../components/testComponent/CreateUser';\nimport UserList from '../components/testComponent/UserList';\nimport { MAINPOSTS_1001_DETAIL_INFO_REQUEST, MAINPOSTS_1001_COMMENTS_REQUEST, MAINPOSTS_1001_COMMENTINSERT_REQUEST, MAINPOSTS_1001_COMMENTLIKE_REQUEST, MAINPOSTS_1001_COMMENTBYCOMMENT_REQUEST } from '../reducers/mainPosts_1001';\nimport { Badge } from 'antd';\n\nvar Test = function Test() {\n  _s();\n\n  /*\r\n    const [numbers, setNumbers] = useState([1, 2, 3]);\r\n    const [array, setArray] = useState([]); \r\n  \r\n    const addNumber = () => {\r\n      setArray([...numbers]); \r\n        //배열 추가 시 \r\n        //setNumbers(prev => [...prev, prev.length + 1]);\r\n        \r\n        console.log('numbers=>' , numbers, 'array=>' , array); \r\n        };\r\n  */\n  var _useSelector = useSelector(function (state) {\n    return state.mainPosts_1001;\n  }),\n      mainPosts_1001Comments = _useSelector.mainPosts_1001Comments;\n\n  var dispatch = useDispatch();\n\n  var _useState = useState(''),\n      a = _useState[0],\n      setA = _useState[1];\n\n  var _useState2 = useState(''),\n      b = _useState2[0],\n      setB = _useState2[1]; // useEffect(()=>{\n  //  // 댓글 리스트 \n  //   // dispatch({\n  //   //   type:MAINPOSTS_1001_COMMENTS_REQUEST, \n  //   //   data:{\n  //   //     postId:'10000001',\n  //   //     nickName:'2222',\n  //   //     postFlag:'1001',\n  //   //     who:'nick1111', \n  //   //   }\n  //   // }); \n  //   setA('dddd'); \n  //   // setB('DDDDDDDDDDDDDD'); \n  // },[]); \n\n\n  console.log('hello world', a);\n\n  var _useState3 = useState({\n    username: '',\n    email: ''\n  }),\n      inputs = _useState3[0],\n      setInputs = _useState3[1];\n\n  var _useState4 = useState(0),\n      count = _useState4[0],\n      setCount = _useState4[1];\n\n  var username = inputs.username,\n      email = inputs.email; // const onChange = e =>{\n  // }\n\n  var onChange = useCallback(function (e) {\n    var _e$target = e.target,\n        name = _e$target.name,\n        value = _e$target.value;\n    setInputs(_objectSpread(_objectSpread({}, inputs), {}, _defineProperty({}, name, value)));\n  }, [name]);\n\n  var _useState5 = useState([{\n    id: 1,\n    username: 'velopert',\n    email: 'public.velopert@gmail.com'\n  }, {\n    id: 2,\n    username: 'tester',\n    email: 'tester@example.com'\n  }, {\n    id: 3,\n    username: 'liz',\n    email: 'liz@example.com'\n  }]),\n      users = _useState5[0],\n      setUsers = _useState5[1];\n\n  var nextId = useRef(4);\n  var onCreate = useCallback(function () {\n    var user = {\n      id: nextId.current,\n      username: username,\n      email: email\n    }; //추가된 데이터를 위로 올리기 \n\n    setUsers([user].concat(_toConsumableArray(users))); //추가된 데이터를 아래로 올리기 \n    //setUsers([...users,user]);\n\n    setInputs({\n      username: '',\n      email: ''\n    });\n    nextId.current += 1;\n  }, []);\n  return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }\n  }, __jsx(CreateUser, {\n    username: username,\n    email: email,\n    onChange: onChange,\n    onCreate: onCreate,\n    array: users,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 11\n    }\n  }), __jsx(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }\n  }), count, __jsx(\"button\", {\n    onClick: function onClick() {\n      return setCount(count + 1);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 11\n    }\n  }, \"click\"));\n};\n\n_s(Test, \"JVS+g2EErSBzZjZuq2aYGm3noO0=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = Test;\nexport default Test;\n\nvar _c;\n\n$RefreshReg$(_c, \"Test\");","map":{"version":3,"sources":["D:/git Repository/PersonalProject_001/frontend/pages/test.js"],"names":["React","useState","useEffect","useRef","memo","useCallback","useDispatch","useSelector","Item","CreateUser","UserList","MAINPOSTS_1001_DETAIL_INFO_REQUEST","MAINPOSTS_1001_COMMENTS_REQUEST","MAINPOSTS_1001_COMMENTINSERT_REQUEST","MAINPOSTS_1001_COMMENTLIKE_REQUEST","MAINPOSTS_1001_COMMENTBYCOMMENT_REQUEST","Badge","Test","state","mainPosts_1001","mainPosts_1001Comments","dispatch","a","setA","b","setB","console","log","username","email","inputs","setInputs","count","setCount","onChange","e","target","name","value","id","users","setUsers","nextId","onCreate","user","current"],"mappings":"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","sourcesContent":["import React, { useState,useEffect,useRef ,memo, useCallback} from \"react\";\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport Item from '../components/testComponent/Item'\r\nimport CreateUser from '../components/testComponent/CreateUser'\r\nimport UserList from '../components/testComponent/UserList'\r\nimport \r\n    {MAINPOSTS_1001_DETAIL_INFO_REQUEST,\r\n     MAINPOSTS_1001_COMMENTS_REQUEST, \r\n     MAINPOSTS_1001_COMMENTINSERT_REQUEST,\r\n     MAINPOSTS_1001_COMMENTLIKE_REQUEST,\r\n     MAINPOSTS_1001_COMMENTBYCOMMENT_REQUEST\r\n    } \r\nfrom '../reducers/mainPosts_1001'; \r\nimport { Badge } from 'antd';\r\n\r\nconst Test = () =>{\r\n  /*\r\n    const [numbers, setNumbers] = useState([1, 2, 3]);\r\n    const [array, setArray] = useState([]); \r\n\r\n\r\n    const addNumber = () => {\r\n      setArray([...numbers]); \r\n        //배열 추가 시 \r\n        //setNumbers(prev => [...prev, prev.length + 1]);\r\n        \r\n        console.log('numbers=>' , numbers, 'array=>' , array); \r\n\r\n      };\r\n  */\r\n  const { mainPosts_1001Comments, } = useSelector((state)=>state.mainPosts_1001); \r\n\r\n const dispatch = useDispatch(); \r\n\r\n\r\n const [a,setA] = useState(''); \r\n const [b,setB] = useState(''); \r\n  // useEffect(()=>{\r\n  //  // 댓글 리스트 \r\n  //   // dispatch({\r\n  //   //   type:MAINPOSTS_1001_COMMENTS_REQUEST, \r\n  //   //   data:{\r\n  //   //     postId:'10000001',\r\n  //   //     nickName:'2222',\r\n  //   //     postFlag:'1001',\r\n  //   //     who:'nick1111', \r\n  //   //   }\r\n  //   // }); \r\n\r\n\r\n  //   setA('dddd'); \r\n  //   // setB('DDDDDDDDDDDDDD'); \r\n\r\n  // },[]); \r\n  \r\n console.log('hello world',a); \r\n\r\n    const [inputs, setInputs] =useState({username:'', email:'', }); \r\n    const [count,setCount]= useState(0);\r\n    \r\n    const { username, email } = inputs;\r\n\r\n    // const onChange = e =>{\r\n    \r\n    // }\r\n\r\n    const onChange = useCallback((e)=>{\r\n      const {name, value} = e.target; \r\n\r\n      \r\n      setInputs({\r\n        ...inputs,[name]:value\r\n      }); \r\n    },[name])\r\n\r\n    const [users, setUsers] = useState([\r\n      {\r\n        id: 1,\r\n        username: 'velopert',\r\n        email: 'public.velopert@gmail.com'\r\n      },\r\n      {\r\n        id: 2,\r\n        username: 'tester',\r\n        email: 'tester@example.com'\r\n      },\r\n      {\r\n        id: 3,\r\n        username: 'liz',\r\n        email: 'liz@example.com'\r\n      }\r\n    ]);\r\n  \r\n    const nextId = useRef(4);\r\n    const onCreate = useCallback(() => {\r\n      \r\n      const user = {\r\n        id: nextId.current,\r\n        username,\r\n        email\r\n      };\r\n      \r\n      //추가된 데이터를 위로 올리기 \r\n      setUsers([user,...users]);\r\n\r\n      //추가된 데이터를 아래로 올리기 \r\n      //setUsers([...users,user]);\r\n\r\n\r\n      setInputs({\r\n        username: '',\r\n        email: ''\r\n      });\r\n  \r\n      nextId.current += 1;\r\n    },[]);\r\n    \r\n\r\n    return (\r\n      <div>\r\n          <CreateUser \r\n            username={username}\r\n            email={email}\r\n            onChange={onChange}\r\n            onCreate={onCreate}\r\n            array={users}\r\n          /><br />\r\n          {count}\r\n          <button onClick={()=>setCount(count+1)}>click</button>\r\n      </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Test; "]},"metadata":{},"sourceType":"module"}