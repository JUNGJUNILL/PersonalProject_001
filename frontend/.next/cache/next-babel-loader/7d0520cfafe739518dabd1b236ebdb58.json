{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"D:\\\\git Repository\\\\PersonalProject_001\\\\frontend\\\\components\\\\mainPosts_1001\\\\mainPosts_1001_comments.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useCallback, useEffect, useState, createRef, memo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport custumDateFormat from '../../utilComponent/custumDateFormat';\nimport { DislikeTwoTone, LikeTwoTone } from '@ant-design/icons';\nimport { MAINPOSTS_1001_COMMENTS_REQUEST, MAINPOSTS_1001_COMMENTLIKE_REQUEST } from '../../reducers/mainPosts_1001';\nimport { Badge } from 'antd';\n\nvar Comments1001 = function Comments1001(_ref) {\n  _s();\n\n  var key = _ref.key,\n      postFlag = _ref.postFlag,\n      nickName = _ref.nickName,\n      postId = _ref.postId,\n      userInfo = _ref.userInfo,\n      commentId = _ref.commentId,\n      comment = _ref.comment,\n      who = _ref.who,\n      flag = _ref.flag,\n      good = _ref.good,\n      bad = _ref.bad,\n      createdDate = _ref.createdDate,\n      isAddcomment = _ref.isAddcomment,\n      likeDisLikeFalg = _ref.likeDisLikeFalg,\n      hello = _ref.hello,\n      realFlag = _ref.realFlag,\n      likeBtn = _ref.likeBtn,\n      backbeer = _ref.backbeer;\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(function (state) {\n    return state.mainPosts_1001;\n  }),\n      clickCommentId = _useSelector.clickCommentId,\n      likeIsClicked = _useSelector.likeIsClicked;\n\n  var _useState = useState(parseInt(good)),\n      goodCount = _useState[0],\n      setGoodCount = _useState[1];\n\n  var _useState2 = useState(parseInt(bad)),\n      badCount = _useState2[0],\n      setBadCount = _useState2[1];\n\n  var _useState3 = useState(false),\n      like = _useState3[0],\n      setLike = _useState3[1];\n\n  var _useState4 = useState(false),\n      disLike = _useState4[0],\n      setDisLike = _useState4[1];\n\n  var _useState5 = useState(backbeer),\n      g = _useState5[0],\n      setG = _useState5[1];\n\n  var gggg = function gggg() {\n    alert(g);\n    return;\n  };\n\n  console.log('realFlag=>', realFlag, 'good=>   ', good, 'bad=>  ', bad, '   clickCommentId=> ', hello, '  commentId=>  ', commentId, 'flag=>  ', flag, '  likeIsClicked=>', likeIsClicked, 'isAddcomment =>', isAddcomment, '   likeDisLikeFalg=> ', likeDisLikeFalg, 'backbeer=>', backbeer); // const likeBtn =useCallback((commentid,flag,likeDislike)=>{\n  //     if(!userInfo){\n  //       alert('로그인이 필요한 서비스 입니다.'); \n  //       return;\n  //     }\n  //       //alert(`${commentid},${flag},${likeDislike}`)\n  //     //문자 리터럴로 해야 alert에 변수 들어가진다.\n  //     if(flag===\"Y\" || likeDisLikeFalg){\n  //       alert('이미 좋아요! 싫어요! 했습니다.'); \n  //       return; \n  //     }else{\n  //         //alert('likeDisLikeFalg->' , likeDisLikeFalg); \n  //         if(likeDislike === \"good\"){\n  //           setGoodCount(parseInt(good)+1); \n  //         }else{\n  //           setBadCount(parseInt(bad)+1);\n  //           }\n  //       //댓글 좋아요!\n  //       dispatch({\n  //         type:MAINPOSTS_1001_COMMENTLIKE_REQUEST, \n  //         data:{\n  //           commentid,\n  //           postFlag,\n  //           postId,\n  //           flag: likeDislike ,\n  //           who: userInfo,\n  //           nickName,\n  //         }\n  //     }); \n  //            // 댓글 리스트 \n  //     //   dispatch({\n  //     //     type:MAINPOSTS_1001_COMMENTS_REQUEST, \n  //     //     data:{\n  //     //       postId,\n  //     //       nickName,\n  //     //       postFlag,\n  //     //       who:userInfo,\n  //     //     }\n  //     // }); \n  //     }\n  //    alert(`${likeDislike}`); \n  //   },[]); \n\n  return __jsx(\"div\", {\n    className: \"divTableRow\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 17\n    }\n  }, __jsx(\"div\", {\n    className: \"divTableCell\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 21\n    }\n  }, __jsx(\"b\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 21\n    }\n  }, who), \" \\xA0 \", __jsx(\"small\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 41\n    }\n  }, custumDateFormat(createdDate)), __jsx(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 87\n    }\n  }), comment, __jsx(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 30\n    }\n  }), \"\\uB2F5\\uAE00 [9] \", commentId, __jsx(\"div\", {\n    style: {\n      marginTop: \"1%\",\n      display: \"block\",\n      \"float\": \"right\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 25\n    }\n  }, __jsx(LikeTwoTone, {\n    onClick: function onClick() {\n      return likeBtn(commentId, flag, 'good');\n    },\n    twoToneColor: backbeer === commentId ? \"#ff0000\" : \"#1ba640\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 29\n    }\n  }), good, \"\\xA0\\xA0\\xA0\\xA0\", __jsx(DislikeTwoTone, {\n    onClick: function onClick() {\n      return likeBtn(commentId, flag, 'bad');\n    },\n    twoToneColor: realFlag !== flag && likeDisLikeFalg === 'bad' ? \"#ff0000\" : \"#1ba640\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 29\n    }\n  }), bad, \"\\xA0\\xA0\\xA0\\xA0\", __jsx(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 29\n    }\n  }))));\n};\n\n_s(Comments1001, \"OukWpVeMGvHuZwlRHEiKim5lj3k=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = Comments1001;\nexport default _c2 = React.memo(Comments1001);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Comments1001\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["D:/git Repository/PersonalProject_001/frontend/components/mainPosts_1001/mainPosts_1001_comments.js"],"names":["React","useCallback","useEffect","useState","createRef","memo","useDispatch","useSelector","custumDateFormat","DislikeTwoTone","LikeTwoTone","MAINPOSTS_1001_COMMENTS_REQUEST","MAINPOSTS_1001_COMMENTLIKE_REQUEST","Badge","Comments1001","key","postFlag","nickName","postId","userInfo","commentId","comment","who","flag","good","bad","createdDate","isAddcomment","likeDisLikeFalg","hello","realFlag","likeBtn","backbeer","dispatch","state","mainPosts_1001","clickCommentId","likeIsClicked","parseInt","goodCount","setGoodCount","badCount","setBadCount","like","setLike","disLike","setDisLike","g","setG","gggg","alert","console","log","marginTop","display"],"mappings":"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","sourcesContent":["import React, { useCallback,useEffect, useState, createRef, memo } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport custumDateFormat from  '../../utilComponent/custumDateFormat';\r\nimport {DislikeTwoTone,LikeTwoTone} from '@ant-design/icons'\r\nimport \r\n    {\r\n     MAINPOSTS_1001_COMMENTS_REQUEST, \r\n     MAINPOSTS_1001_COMMENTLIKE_REQUEST,\r\n    } \r\nfrom '../../reducers/mainPosts_1001'; \r\nimport { Badge } from 'antd';\r\n\r\nconst Comments1001 = ({\r\n                      key,\r\n                      postFlag,\r\n                      nickName,\r\n                      postId,\r\n                      userInfo,\r\n\r\n                      commentId,\r\n                      comment,\r\n                      who,\r\n                      flag,\r\n                      good,\r\n                      bad,\r\n                      createdDate,\r\n                      isAddcomment,\r\n                      likeDisLikeFalg,\r\n                      hello, \r\n\r\n\r\n                      realFlag,\r\n                      likeBtn,\r\n\r\n                      backbeer\r\n\r\n                    })=>{\r\n\r\n    const dispatch = useDispatch();       \r\n    const {clickCommentId,\r\n           likeIsClicked } =useSelector((state)=>state.mainPosts_1001); \r\n\r\n    const [goodCount,setGoodCount] = useState(parseInt(good));  \r\n    const [badCount,setBadCount]   = useState(parseInt(bad)); \r\n    const [like , setLike]        = useState(false); \r\n    const [disLike , setDisLike]  = useState(false); \r\n\r\n    const [g, setG] = useState(backbeer); \r\n\r\n    const gggg = ()=>{\r\n        alert(g);\r\n        return; \r\n    }\r\n\r\n\r\n    console.log('realFlag=>' , realFlag,'good=>   ' , good,'bad=>  ',bad , '   clickCommentId=> ' , hello , '  commentId=>  ' , commentId, 'flag=>  ' , flag,'  likeIsClicked=>',likeIsClicked,'isAddcomment =>' , isAddcomment,'   likeDisLikeFalg=> ',likeDisLikeFalg , 'backbeer=>', backbeer); \r\n\r\n    // const likeBtn =useCallback((commentid,flag,likeDislike)=>{\r\n    //     if(!userInfo){\r\n    //       alert('로그인이 필요한 서비스 입니다.'); \r\n    //       return;\r\n    //     }\r\n    //       //alert(`${commentid},${flag},${likeDislike}`)\r\n    //     //문자 리터럴로 해야 alert에 변수 들어가진다.\r\n    \r\n    //     if(flag===\"Y\" || likeDisLikeFalg){\r\n          \r\n    //       alert('이미 좋아요! 싫어요! 했습니다.'); \r\n    //       return; \r\n    \r\n    //     }else{\r\n    //         //alert('likeDisLikeFalg->' , likeDisLikeFalg); \r\n    //         if(likeDislike === \"good\"){\r\n\r\n    //           setGoodCount(parseInt(good)+1); \r\n\r\n    //         }else{\r\n\r\n    //           setBadCount(parseInt(bad)+1);\r\n\r\n    //           }\r\n\r\n     \r\n\r\n    //       //댓글 좋아요!\r\n    //       dispatch({\r\n    //         type:MAINPOSTS_1001_COMMENTLIKE_REQUEST, \r\n    //         data:{\r\n    //           commentid,\r\n    //           postFlag,\r\n    //           postId,\r\n    //           flag: likeDislike ,\r\n    //           who: userInfo,\r\n    //           nickName,\r\n    //         }\r\n    //     }); \r\n\r\n\r\n    //            // 댓글 리스트 \r\n    //     //   dispatch({\r\n    //     //     type:MAINPOSTS_1001_COMMENTS_REQUEST, \r\n    //     //     data:{\r\n    //     //       postId,\r\n    //     //       nickName,\r\n    //     //       postFlag,\r\n    //     //       who:userInfo,\r\n    //     //     }\r\n    //     // }); \r\n    \r\n    //     }\r\n\r\n    //    alert(`${likeDislike}`); \r\n      \r\n    //   },[]); \r\n\r\n    return (\r\n                <div  className='divTableRow' >\r\n                    <div  className=\"divTableCell\">\r\n                    <b>{who}</b> &nbsp; <small>{custumDateFormat(createdDate)}</small><br/>\r\n                    {comment}<br />\r\n                    답글 [9] {commentId}\r\n               \r\n                        <div  style={{marginTop:\"1%\",display:\"block\",float:\"right\"}}>\r\n                            <LikeTwoTone onClick={()=>likeBtn(commentId,flag,'good')} twoToneColor={backbeer === commentId ? \"#ff0000\" : \"#1ba640\"}/>{good}\r\n                            &nbsp;&nbsp;&nbsp;&nbsp;\r\n                            <DislikeTwoTone onClick={()=>likeBtn(commentId,flag,'bad')} twoToneColor={realFlag !== flag  && likeDisLikeFalg ==='bad' ? \"#ff0000\" : \"#1ba640\"} />{bad}\r\n                            &nbsp;&nbsp;&nbsp;&nbsp;\r\n                            <br />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n                \r\n    )\r\n\r\n}\r\n\r\nexport default React.memo(Comments1001); "]},"metadata":{},"sourceType":"module"}