{"ast":null,"code":"var _jsxFileName = \"D:\\\\git Repository\\\\PersonalProject_001\\\\frontend\\\\pages\\\\_app.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport AppLayOut from '../components/AppLayOut';\nimport Head from 'next/head';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\nimport 'antd/dist/antd.css';\nimport '../CSS/antdMobile.css';\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\nimport { createWrapper } from 'next-redux-wrapper';\nimport { createStore, compose, applyMiddleware } from 'redux';\nimport reducer from '../reducers';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\nimport rootSaga from '../sagas';\nimport { LOAD_USER_REQUEST } from '../reducers/auth'; //프로젝트 고정 틀\n\nconst Project01_TodoList = ({\n  Component,\n  pageProps\n}) => {\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }\n  }, __jsx(Head, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 17\n    }\n  }, __jsx(\"title\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 21\n    }\n  }, \"TodoList\"), __jsx(\"script\", {\n    src: \"https://developers.kakao.com/sdk/js/kakao.js\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 21\n    }\n  }), __jsx(\"link\", {\n    rel: \"stylesheet\",\n    href: \"https://cdnjs.cloudflare.com/ajax/libs/antd/3.16.2/antd.min.css\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 21\n    }\n  }), __jsx(\"link\", {\n    rel: \"stylesheet\",\n    href: \"https://cdnjs.cloudflare.com/ajax/libs/antd-mobile/2.3.3/antd-mobile.css\",\n    integrity: \"sha256-uZbNsqglsHyapiY6Nlj8o9kAmliY/rWNCTqthjIHIXw=\",\n    crossorigin: \"anonymous\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 21\n    }\n  })), __jsx(AppLayOut, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 17\n    }\n  }, __jsx(Component, _extends({}, pageProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 21\n    }\n  }))));\n};\n\nProject01_TodoList.getInitialProps = async context => {\n  //▲ next에서 제공해줌\n  const {\n    ctx,\n    Component\n  } = context;\n  let pageProps = {};\n  const state = ctx.store.getState(); //프로젝트 전체 stat를 가져 올 수 있다. \n\n  const isServer = true || !!context.req || !!context.ctx.req; //SSR로 접속\n\n  const cookie = isServer ? ctx.req.headers.cookie : ''; //그냥 일반 접속자\n\n  if (isServer) {\n    console.log('hello==>', axios.defaults.headers.Cookie);\n    console.log('headers==>', axios.defaults.headers);\n    console.log('_SEC2==>', axios.defaults.headers.Cookie._SEC2);\n    console.log('_SEC4==>', axios.defaults.headers.Cookie._SEC4);\n  } //로그인 접속자\n\n\n  if (isServer && cookie) {\n    //클라이언 환경에서는 브라우저가 쿠키를 넣어주고, \n    //SSR일 때는 우리가 직접 넣어줘야 한다. \n    axios.defaults.headers.Cookie = cookie;\n  } //(새로고침)로그인 정보 유지\n\n\n  if (!state.auth.userInfo) {\n    ctx.store.dispatch({\n      type: LOAD_USER_REQUEST\n    });\n  }\n\n  if (Component.getInitialProps) {\n    pageProps = await Component.getInitialProps(ctx);\n  }\n\n  return {\n    pageProps\n  };\n};\n\nProject01_TodoList.propTypes = {\n  Component: PropTypes.elementType.isRequired\n};\n\nconst configureStore = () => {\n  const sagaMiddleware = createSagaMiddleware();\n  const middlewares = [sagaMiddleware]; // 미들웨어들을 넣으면 된다.\n  //production\n\n  const enhancer = false ? compose(applyMiddleware(...middlewares)) : composeWithDevTools(applyMiddleware(...middlewares));\n  const store = createStore(reducer, enhancer); //react에서 redux를 사용하기 위해서는 createStore로 store를 생성해 주어야 한다. \n  //redux-next-wapper 6 버전 부터는 Provider store={store}를 내부적으로 해 준다. \n  //sagaMiddleware.run(rootSaga);  이새끼때문에 REQUEST, SUCCESS 2번씩 실행됨 ㅅㅂ \n\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n  return store;\n}; //const wrapper = createWrapper(configureStore, {debug:  process.env.NODE_ENV === 'development'}); \n\n\nconst wrapper = createWrapper(configureStore, {\n  debug: false\n});\nexport default wrapper.withRedux(Project01_TodoList);","map":{"version":3,"sources":["D:/git Repository/PersonalProject_001/frontend/pages/_app.js"],"names":["AppLayOut","Head","PropTypes","axios","createWrapper","createStore","compose","applyMiddleware","reducer","composeWithDevTools","createSagaMiddleware","rootSaga","LOAD_USER_REQUEST","Project01_TodoList","Component","pageProps","getInitialProps","context","ctx","state","store","getState","isServer","req","cookie","headers","console","log","defaults","Cookie","_SEC2","_SEC4","auth","userInfo","dispatch","type","propTypes","elementType","isRequired","configureStore","sagaMiddleware","middlewares","enhancer","sagaTask","run","wrapper","debug","withRedux"],"mappings":";;;;;;AAAA,OAAOA,SAAP,MAAsB,yBAAtB;AACA,OAAOC,IAAP,MAAsB,WAAtB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,oBAAP;AACA,OAAQ,uBAAR;AACA,OAAO,kDAAP;AAKA,SAAQC,aAAR,QAA4B,oBAA5B;AACA,SAASC,WAAT,EAAsBC,OAAtB,EAA+BC,eAA/B,QAAsD,OAAtD;AACA,OAAOC,OAAP,MAAqB,aAArB;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,OAAOC,QAAP,MAAqB,UAArB;AACA,SAASC,iBAAT,QAAkC,kBAAlC,C,CAKA;;AACA,MAAMC,kBAAkB,GAAG,CAAC;AAACC,EAAAA,SAAD;AAAWC,EAAAA;AAAX,CAAD,KAA0B;AAE7C,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,EAGI;AAAQ,IAAA,GAAG,EAAC,8CAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHJ,EAII;AAAM,IAAA,GAAG,EAAC,YAAV;AAAuB,IAAA,IAAI,EAAC,iEAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJJ,EAKI;AAAM,IAAA,GAAG,EAAC,YAAV;AAAuB,IAAA,IAAI,EAAC,0EAA5B;AAAuG,IAAA,SAAS,EAAC,qDAAjH;AAAuK,IAAA,WAAW,EAAC,WAAnL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALJ,CADJ,EAQI,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,SAAD,eAAeA,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADJ,CARJ,CADJ;AAgBP,CAlBD;;AAqBAF,kBAAkB,CAACG,eAAnB,GAAqC,MAAOC,OAAP,IAAiB;AACV;AAC1C,QAAM;AAAEC,IAAAA,GAAF;AAAMJ,IAAAA;AAAN,MAAoBG,OAA1B;AACA,MAAIF,SAAS,GAAE,EAAf;AACA,QAAMI,KAAK,GAAGD,GAAG,CAACE,KAAJ,CAAUC,QAAV,EAAd,CAJoD,CAIb;;AACvC,QAAMC,QAAQ,GAAG,QAAiC,CAAC,CAACL,OAAO,CAACM,GAA3C,IAAkD,CAAC,CAACN,OAAO,CAACC,GAAR,CAAYK,GAAjF,CALoD,CAMpD;;AAEA,QAAMC,MAAM,GAAGF,QAAQ,GAAGJ,GAAG,CAACK,GAAJ,CAAQE,OAAR,CAAgBD,MAAnB,GAA4B,EAAnD,CARoD,CAWpD;;AACA,MAAGF,QAAH,EAAY;AAEVI,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBxB,KAAK,CAACyB,QAAN,CAAeH,OAAf,CAAuBI,MAA/C;AACAH,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BxB,KAAK,CAACyB,QAAN,CAAeH,OAAzC;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBxB,KAAK,CAACyB,QAAN,CAAeH,OAAf,CAAuBI,MAAvB,CAA8BC,KAAtD;AACAJ,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBxB,KAAK,CAACyB,QAAN,CAAeH,OAAf,CAAuBI,MAAvB,CAA8BE,KAAtD;AAED,GAnBmD,CAqBpD;;;AACA,MAAGT,QAAQ,IAAIE,MAAf,EAAsB;AAClB;AACA;AACArB,IAAAA,KAAK,CAACyB,QAAN,CAAeH,OAAf,CAAuBI,MAAvB,GAAgCL,MAAhC;AACH,GA1BmD,CA4BpD;;;AACA,MAAG,CAACL,KAAK,CAACa,IAAN,CAAWC,QAAf,EAAwB;AACpBf,IAAAA,GAAG,CAACE,KAAJ,CAAUc,QAAV,CAAmB;AACjBC,MAAAA,IAAI,EAACvB;AADY,KAAnB;AAIH;;AAGD,MAAGE,SAAS,CAACE,eAAb,EAA6B;AAC7BD,IAAAA,SAAS,GAAI,MAAMD,SAAS,CAACE,eAAV,CAA0BE,GAA1B,CAAnB;AACC;;AAED,SAAO;AAACH,IAAAA;AAAD,GAAP;AAGD,CA5CD;;AA+CAF,kBAAkB,CAACuB,SAAnB,GAA+B;AAC7BtB,EAAAA,SAAS,EAACZ,SAAS,CAACmC,WAAV,CAAsBC;AADH,CAA/B;;AAQA,MAAMC,cAAc,GAAG,MAAM;AAC3B,QAAMC,cAAc,GAAG9B,oBAAoB,EAA3C;AACA,QAAM+B,WAAW,GAAG,CAACD,cAAD,CAApB,CAF2B,CAEW;AACI;;AAC1C,QAAME,QAAQ,GAAG,QACbpC,OAAO,CAACC,eAAe,CAAC,GAAGkC,WAAJ,CAAhB,CADM,GAEbhC,mBAAmB,CAACF,eAAe,CAAC,GAAGkC,WAAJ,CAAhB,CAFvB;AAIA,QAAMrB,KAAK,GAAGf,WAAW,CAACG,OAAD,EAAUkC,QAAV,CAAzB,CAR2B,CASb;AACA;AAEb;;AACAtB,EAAAA,KAAK,CAACuB,QAAN,GAAiBH,cAAc,CAACI,GAAf,CAAmBjC,QAAnB,CAAjB;AACA,SAAOS,KAAP;AAEF,CAhBD,C,CAkBA;;;AACA,MAAMyB,OAAO,GAAGzC,aAAa,CAACmC,cAAD,EAAiB;AAACO,EAAAA,KAAK,EAAG;AAAT,CAAjB,CAA7B;AACA,eAAeD,OAAO,CAACE,SAAR,CAAkBlC,kBAAlB,CAAf","sourcesContent":["import AppLayOut from '../components/AppLayOut';\r\nimport Head      from 'next/head';\r\nimport PropTypes from 'prop-types'\r\nimport axios from 'axios'; \r\n\r\nimport 'antd/dist/antd.css'; \r\nimport  '../CSS/antdMobile.css';\r\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\r\n\r\n\r\n\r\n\r\nimport {createWrapper} from 'next-redux-wrapper';\r\nimport { createStore, compose, applyMiddleware } from 'redux';\r\nimport reducer  from '../reducers';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport createSagaMiddleware from 'redux-saga'\r\nimport rootSaga from '../sagas'; \r\nimport { LOAD_USER_REQUEST } from '../reducers/auth';\r\n\r\n\r\n\r\n\r\n//프로젝트 고정 틀\r\nconst Project01_TodoList = ({Component,pageProps}) =>{\r\n\r\n        return (\r\n            <div>\r\n                <Head>\r\n                    <title>TodoList</title>\r\n                    \r\n                    <script src=\"https://developers.kakao.com/sdk/js/kakao.js\"></script>\r\n                    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/antd/3.16.2/antd.min.css\"/>\r\n                    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/antd-mobile/2.3.3/antd-mobile.css\" integrity=\"sha256-uZbNsqglsHyapiY6Nlj8o9kAmliY/rWNCTqthjIHIXw=\" crossorigin=\"anonymous\" />\r\n                </Head>\r\n                <AppLayOut>\r\n                    <Component {...pageProps} />\r\n                </AppLayOut>\r\n            </div>\r\n            ); \r\n\r\n\r\n}\r\n\r\n\r\nProject01_TodoList.getInitialProps = async (context)=>{\r\n                                            //▲ next에서 제공해줌\r\n  const { ctx,Component } = context; \r\n  let pageProps ={}; \r\n  const state = ctx.store.getState();    //프로젝트 전체 stat를 가져 올 수 있다. \r\n  const isServer = typeof window === 'undefined' || !!context.req || !!context.ctx.req;\r\n  //SSR로 접속\r\n\r\n  const cookie = isServer ? ctx.req.headers.cookie : ''; \r\n\r\n  \r\n  //그냥 일반 접속자\r\n  if(isServer){\r\n   \r\n    console.log('hello==>', axios.defaults.headers.Cookie); \r\n    console.log('headers==>', axios.defaults.headers); \r\n    console.log('_SEC2==>', axios.defaults.headers.Cookie._SEC2); \r\n    console.log('_SEC4==>', axios.defaults.headers.Cookie._SEC4); \r\n\r\n  }\r\n\r\n  //로그인 접속자\r\n  if(isServer && cookie){\r\n      //클라이언 환경에서는 브라우저가 쿠키를 넣어주고, \r\n      //SSR일 때는 우리가 직접 넣어줘야 한다. \r\n      axios.defaults.headers.Cookie = cookie; \r\n  }\r\n\r\n  //(새로고침)로그인 정보 유지\r\n  if(!state.auth.userInfo){\r\n      ctx.store.dispatch({\r\n        type:LOAD_USER_REQUEST,\r\n      });\r\n\r\n  }\r\n\r\n\r\n  if(Component.getInitialProps){\r\n  pageProps =  await Component.getInitialProps(ctx); \r\n  }\r\n  \r\n  return {pageProps}; \r\n\r\n\r\n}\r\n\r\n\r\nProject01_TodoList.propTypes = { \r\n  Component:PropTypes.elementType.isRequired, \r\n\r\n}\r\n\r\n\r\n\r\n\r\nconst configureStore = () => {\r\n  const sagaMiddleware = createSagaMiddleware(); \r\n  const middlewares = [sagaMiddleware]; // 미들웨어들을 넣으면 된다.\r\n                                            //production\r\n  const enhancer = process.env.NODE_ENV === 'production'\r\n    ? compose(applyMiddleware(...middlewares))\r\n    : composeWithDevTools(applyMiddleware(...middlewares));\r\n\r\n  const store = createStore(reducer, enhancer);\r\n                //react에서 redux를 사용하기 위해서는 createStore로 store를 생성해 주어야 한다. \r\n                //redux-next-wapper 6 버전 부터는 Provider store={store}를 내부적으로 해 준다. \r\n\r\n   //sagaMiddleware.run(rootSaga);  이새끼때문에 REQUEST, SUCCESS 2번씩 실행됨 ㅅㅂ \r\n   store.sagaTask = sagaMiddleware.run(rootSaga);\r\n   return store;\r\n\r\n}\r\n  \r\n//const wrapper = createWrapper(configureStore, {debug:  process.env.NODE_ENV === 'development'}); \r\nconst wrapper = createWrapper(configureStore, {debug:  false}); \r\nexport default wrapper.withRedux(Project01_TodoList); "]},"metadata":{},"sourceType":"module"}