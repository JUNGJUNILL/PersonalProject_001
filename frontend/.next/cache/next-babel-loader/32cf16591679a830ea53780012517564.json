{"ast":null,"code":"var _jsxFileName = \"D:\\\\git Repository\\\\PersonalProject_001\\\\frontend\\\\pages\\\\login.js\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable no-undef */\nimport React, { Component } from 'react';\n\nclass Login extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      isLogin: false\n    });\n\n    _defineProperty(this, \"loginWithKakao\", () => {\n      try {\n        return new Promise((resolve, reject) => {\n          if (!Kakao) {\n            reject('Kakao 인스턴스가 존재하지 않습니다.');\n          }\n\n          Kakao.Auth.login({\n            success: auth => {\n              console.log('정상적으로 로그인 되었습니다.', auth);\n              this.setState({\n                isLogin: true\n              });\n            },\n            fail: err => {\n              console.error(err);\n            }\n          });\n        });\n      } catch (err) {\n        console.error(err);\n      }\n    });\n\n    _defineProperty(this, \"logoutWithKakao\", () => {\n      if (Kakao.Auth.getAccessToken()) {\n        console.log('카카오 인증 액세스 토큰이 존재합니다.', Kakao.Auth.getAccessToken());\n        Kakao.Auth.logout(() => {\n          console.log('로그아웃 되었습니다', Kakao.Auth.getAccessToken());\n          this.setState({\n            isLogin: false\n          });\n        });\n      }\n    });\n  }\n\n  componentDidMount() {\n    Kakao.init('6905840ea6abb16362e7bf0ba2cf16f5');\n\n    if (Kakao.Auth.getAccessToken()) {\n      console.log('액세스 토큰이 존재합니다. 세션을 유지합니다.');\n      this.setState({\n        isLogin: true\n      });\n    }\n  }\n\n  render() {\n    const {\n      isLogin\n    } = this.state;\n\n    const loginView = __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 24\n      }\n    }, __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 7\n      }\n    }, \"\\uB85C\\uADF8\\uC778\\uD654\\uBA74\"), __jsx(\"button\", {\n      onClick: this.loginWithKakao,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 7\n      }\n    }, \"\\uCE74\\uCE74\\uC624 \\uB85C\\uADF8\\uC778\"));\n\n    const mainView = __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 23\n      }\n    }, __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 7\n      }\n    }, \"\\uBA54\\uC778 \\uD654\\uBA74\"), __jsx(\"button\", {\n      onClick: this.logoutWithKakao,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 7\n      }\n    }, \"\\uCE74\\uCE74\\uC624 \\uB85C\\uADF8\\uC544\\uC6C3\"));\n\n    return __jsx(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 7\n      }\n    }, isLogin ? mainView : loginView);\n  }\n\n}\n\nexport default Login;","map":{"version":3,"sources":["D:/git Repository/PersonalProject_001/frontend/pages/login.js"],"names":["React","Component","Login","isLogin","Promise","resolve","reject","Kakao","Auth","login","success","auth","console","log","setState","fail","err","error","getAccessToken","logout","componentDidMount","init","render","state","loginView","loginWithKakao","mainView","logoutWithKakao"],"mappings":";;;;;AAAA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;AAEA,MAAMC,KAAN,SAAoBD,SAApB,CAA8B;AAAA;AAAA;;AAAA,mCACpB;AACNE,MAAAA,OAAO,EAAE;AADH,KADoB;;AAAA,4CAIX,MAAM;AACrB,UAAI;AACF,eAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,cAAI,CAACC,KAAL,EAAY;AACVD,YAAAA,MAAM,CAAC,wBAAD,CAAN;AACD;;AACDC,UAAAA,KAAK,CAACC,IAAN,CAAWC,KAAX,CAAiB;AACfC,YAAAA,OAAO,EAAGC,IAAD,IAAU;AACjBC,cAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCF,IAAhC;AACA,mBAAKG,QAAL,CAAc;AACZX,gBAAAA,OAAO,EAAE;AADG,eAAd;AAGD,aANc;AAOfY,YAAAA,IAAI,EAAGC,GAAD,IAAS;AACbJ,cAAAA,OAAO,CAACK,KAAR,CAAcD,GAAd;AACD;AATc,WAAjB;AAWD,SAfM,CAAP;AAgBD,OAjBD,CAiBE,OAAOA,GAAP,EAAY;AACZJ,QAAAA,OAAO,CAACK,KAAR,CAAcD,GAAd;AACD;AACF,KAzB2B;;AAAA,6CA0BV,MAAM;AACtB,UAAIT,KAAK,CAACC,IAAN,CAAWU,cAAX,EAAJ,EAAiC;AAC/BN,QAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqCN,KAAK,CAACC,IAAN,CAAWU,cAAX,EAArC;AACAX,QAAAA,KAAK,CAACC,IAAN,CAAWW,MAAX,CAAkB,MAAM;AACtBP,UAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BN,KAAK,CAACC,IAAN,CAAWU,cAAX,EAA1B;AACA,eAAKJ,QAAL,CAAc;AACZX,YAAAA,OAAO,EAAE;AADG,WAAd;AAGD,SALD;AAMD;AACF,KApC2B;AAAA;;AAqC5BiB,EAAAA,iBAAiB,GAAG;AAClBb,IAAAA,KAAK,CAACc,IAAN,CAAW,kCAAX;;AACA,QAAId,KAAK,CAACC,IAAN,CAAWU,cAAX,EAAJ,EAAiC;AAC/BN,MAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AACA,WAAKC,QAAL,CAAc;AACZX,QAAAA,OAAO,EAAE;AADG,OAAd;AAGD;AACF;;AACDmB,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEnB,MAAAA;AAAF,QAAc,KAAKoB,KAAzB;;AAEA,UAAMC,SAAS,GAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wCADiB,EAEjB;AAAQ,MAAA,OAAO,EAAE,KAAKC,cAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAFiB,CAAnB;;AAKA,UAAMC,QAAQ,GAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAChB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCADgB,EAEhB;AAAQ,MAAA,OAAO,EAAE,KAAKC,eAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qDAFgB,CAAlB;;AAIA,WACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGxB,OAAO,GAAGuB,QAAH,GAAcF,SADxB,CADF;AAKD;;AA/D2B;;AAkE9B,eAAetB,KAAf","sourcesContent":["/* eslint-disable no-undef */\r\nimport React, { Component } from 'react';\r\n\r\nclass Login extends Component {\r\n  state = {\r\n    isLogin: false,\r\n  }\r\n  loginWithKakao = () => {\r\n    try {\r\n      return new Promise((resolve, reject) => {\r\n        if (!Kakao) {\r\n          reject('Kakao 인스턴스가 존재하지 않습니다.')\r\n        }\r\n        Kakao.Auth.login({\r\n          success: (auth) => {\r\n            console.log('정상적으로 로그인 되었습니다.', auth)\r\n            this.setState({\r\n              isLogin: true\r\n            })\r\n          },\r\n          fail: (err) => {\r\n            console.error(err)\r\n          }\r\n        })\r\n      })\r\n    } catch (err) {\r\n      console.error(err)\r\n    }\r\n  }\r\n  logoutWithKakao = () => {\r\n    if (Kakao.Auth.getAccessToken()) {\r\n      console.log('카카오 인증 액세스 토큰이 존재합니다.', Kakao.Auth.getAccessToken())\r\n      Kakao.Auth.logout(() => {\r\n        console.log('로그아웃 되었습니다', Kakao.Auth.getAccessToken());\r\n        this.setState({\r\n          isLogin: false\r\n        })        \r\n      });\r\n    }\r\n  }\r\n  componentDidMount() {\r\n    Kakao.init('6905840ea6abb16362e7bf0ba2cf16f5');\r\n    if (Kakao.Auth.getAccessToken()) {\r\n      console.log('액세스 토큰이 존재합니다. 세션을 유지합니다.')\r\n      this.setState({\r\n        isLogin: true\r\n      })\r\n    }\r\n  }\r\n  render() {\r\n    const { isLogin } = this.state;\r\n\r\n    const loginView = (<div>\r\n      <p>로그인화면</p>\r\n      <button onClick={this.loginWithKakao}>카카오 로그인</button>\r\n    </div>)\r\n\r\n    const mainView = (<div>\r\n      <p>메인 화면</p>\r\n      <button onClick={this.logoutWithKakao}>카카오 로그아웃</button>\r\n    </div>)\r\n    return (\r\n      <div className=\"App\">\r\n        {isLogin ? mainView : loginView}     \r\n    </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Login;"]},"metadata":{},"sourceType":"module"}