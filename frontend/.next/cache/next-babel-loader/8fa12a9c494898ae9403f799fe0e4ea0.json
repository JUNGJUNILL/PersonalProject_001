{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _this = this,\n    _jsxFileName = \"D:\\\\git Repository\\\\PersonalProject_001\\\\frontend\\\\pages\\\\test.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect, useRef, memo } from \"react\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport Item from '../components/testComponent/Item';\nimport CreateUser from '../components/testComponent/CreateUser';\nimport UserList from '../components/testComponent/UserList';\nimport { MAINPOSTS_1001_DETAIL_INFO_REQUEST, MAINPOSTS_1001_COMMENTS_REQUEST, MAINPOSTS_1001_COMMENTINSERT_REQUEST, MAINPOSTS_1001_COMMENTLIKE_REQUEST, MAINPOSTS_1001_COMMENTBYCOMMENT_REQUEST } from '../reducers/mainPosts_1001';\nimport { Badge } from 'antd';\n\nvar Test = function Test() {\n  _s();\n\n  /*\r\n    const [numbers, setNumbers] = useState([1, 2, 3]);\r\n    const [array, setArray] = useState([]); \r\n  \r\n    const addNumber = () => {\r\n      setArray([...numbers]); \r\n        //배열 추가 시 \r\n        //setNumbers(prev => [...prev, prev.length + 1]);\r\n        \r\n        console.log('numbers=>' , numbers, 'array=>' , array); \r\n        };\r\n  */\n  var _useSelector = useSelector(function (state) {\n    return state.mainPosts_1001;\n  }),\n      mainPosts_1001Comments = _useSelector.mainPosts_1001Comments;\n\n  var dispatch = useDispatch();\n  console.log('hello world', mainPosts_1001Comments);\n\n  var _useState = useState(''),\n      a = _useState[0],\n      setA = _useState[1];\n\n  useEffect(function () {\n    //댓글 리스트 \n    // dispatch({\n    //   type:MAINPOSTS_1001_COMMENTS_REQUEST, \n    //   data:{\n    //     postId:'10000001',\n    //     nickName:'2222',\n    //     postFlag:'1001',\n    //     who:'nick1111', \n    //   }\n    // }); \n    setA('dddd');\n  }, []);\n\n  var _useState2 = useState({\n    username: '',\n    email: ''\n  }),\n      inputs = _useState2[0],\n      setInputs = _useState2[1];\n\n  var username = inputs.username,\n      email = inputs.email;\n\n  var onChange = function onChange(e) {\n    var _e$target = e.target,\n        name = _e$target.name,\n        value = _e$target.value;\n    setInputs(_objectSpread(_objectSpread({}, inputs), {}, _defineProperty({}, name, value)));\n  };\n\n  var _useState3 = useState([{\n    id: 1,\n    username: 'velopert',\n    email: 'public.velopert@gmail.com'\n  }, {\n    id: 2,\n    username: 'tester',\n    email: 'tester@example.com'\n  }, {\n    id: 3,\n    username: 'liz',\n    email: 'liz@example.com'\n  }]),\n      users = _useState3[0],\n      setUsers = _useState3[1];\n\n  var nextId = useRef(4);\n\n  var onCreate = function onCreate() {\n    var user = {\n      id: nextId.current,\n      username: username,\n      email: email\n    }; //추가된 데이터를 위로 올리기 \n\n    setUsers([user].concat(_toConsumableArray(users))); //추가된 데이터를 아래로 올리기 \n    //setUsers([...users,user]);\n\n    setInputs({\n      username: '',\n      email: ''\n    });\n    nextId.current += 1;\n  };\n\n  return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }\n  }, __jsx(CreateUser, {\n    username: username,\n    email: email,\n    onChange: onChange,\n    onCreate: onCreate,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 11\n    }\n  }));\n};\n\n_s(Test, \"U2vSzq6MCw/GQs7JRtiuS5hL2V4=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = Test;\nexport default _c2 = memo(Test);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Test\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["D:/git Repository/PersonalProject_001/frontend/pages/test.js"],"names":["React","useState","useEffect","useRef","memo","useDispatch","useSelector","Item","CreateUser","UserList","MAINPOSTS_1001_DETAIL_INFO_REQUEST","MAINPOSTS_1001_COMMENTS_REQUEST","MAINPOSTS_1001_COMMENTINSERT_REQUEST","MAINPOSTS_1001_COMMENTLIKE_REQUEST","MAINPOSTS_1001_COMMENTBYCOMMENT_REQUEST","Badge","Test","state","mainPosts_1001","mainPosts_1001Comments","dispatch","console","log","a","setA","username","email","inputs","setInputs","onChange","e","target","name","value","id","users","setUsers","nextId","onCreate","user","current"],"mappings":"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","sourcesContent":["import React, { useState,useEffect,useRef ,memo} from \"react\";\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport Item from '../components/testComponent/Item'\r\nimport CreateUser from '../components/testComponent/CreateUser'\r\nimport UserList from '../components/testComponent/UserList'\r\nimport \r\n    {MAINPOSTS_1001_DETAIL_INFO_REQUEST,\r\n     MAINPOSTS_1001_COMMENTS_REQUEST, \r\n     MAINPOSTS_1001_COMMENTINSERT_REQUEST,\r\n     MAINPOSTS_1001_COMMENTLIKE_REQUEST,\r\n     MAINPOSTS_1001_COMMENTBYCOMMENT_REQUEST\r\n    } \r\nfrom '../reducers/mainPosts_1001'; \r\nimport { Badge } from 'antd';\r\n\r\nconst Test = () =>{\r\n  /*\r\n    const [numbers, setNumbers] = useState([1, 2, 3]);\r\n    const [array, setArray] = useState([]); \r\n\r\n\r\n    const addNumber = () => {\r\n      setArray([...numbers]); \r\n        //배열 추가 시 \r\n        //setNumbers(prev => [...prev, prev.length + 1]);\r\n        \r\n        console.log('numbers=>' , numbers, 'array=>' , array); \r\n\r\n      };\r\n  */\r\n  const { mainPosts_1001Comments, } = useSelector((state)=>state.mainPosts_1001); \r\n\r\n const dispatch = useDispatch(); \r\n\r\n\r\n console.log('hello world',mainPosts_1001Comments); \r\n const [a,setA] = useState(''); \r\n  useEffect(()=>{\r\n    //댓글 리스트 \r\n    // dispatch({\r\n    //   type:MAINPOSTS_1001_COMMENTS_REQUEST, \r\n    //   data:{\r\n    //     postId:'10000001',\r\n    //     nickName:'2222',\r\n    //     postFlag:'1001',\r\n    //     who:'nick1111', \r\n    //   }\r\n    // }); \r\n    setA('dddd'); \r\n\r\n  },[]); \r\n\r\n    const [inputs, setInputs] =useState({username:'', email:'', }); \r\n\r\n    \r\n    const { username, email } = inputs;\r\n\r\n    const onChange = e =>{\r\n      const {name, value} = e.target; \r\n\r\n      \r\n      setInputs({\r\n        ...inputs,[name]:value\r\n      }); \r\n    }\r\n\r\n    const [users, setUsers] = useState([\r\n      {\r\n        id: 1,\r\n        username: 'velopert',\r\n        email: 'public.velopert@gmail.com'\r\n      },\r\n      {\r\n        id: 2,\r\n        username: 'tester',\r\n        email: 'tester@example.com'\r\n      },\r\n      {\r\n        id: 3,\r\n        username: 'liz',\r\n        email: 'liz@example.com'\r\n      }\r\n    ]);\r\n  \r\n    const nextId = useRef(4);\r\n    const onCreate = () => {\r\n      \r\n      const user = {\r\n        id: nextId.current,\r\n        username,\r\n        email\r\n      };\r\n      \r\n      //추가된 데이터를 위로 올리기 \r\n      setUsers([user,...users]);\r\n\r\n      //추가된 데이터를 아래로 올리기 \r\n      //setUsers([...users,user]);\r\n\r\n\r\n      setInputs({\r\n        username: '',\r\n        email: ''\r\n      });\r\n  \r\n      nextId.current += 1;\r\n    };\r\n    \r\n\r\n    return (\r\n      <div>\r\n          <CreateUser \r\n            username={username}\r\n            email={email}\r\n            onChange={onChange}\r\n            onCreate={onCreate}\r\n          />\r\n          \r\n      </div>\r\n    )\r\n\r\n}\r\n\r\nexport default memo(Test); "]},"metadata":{},"sourceType":"module"}